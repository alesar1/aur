# HG changeset patch
# User Pantxo Diribarne <pantxo.diribarne@gmail.com>
# Date 1544869891 -3600
#      Sat Dec 15 11:31:31 2018 +0100
# Node ID d25f4bc99e426b12c7a4097e73395843541025c0
# Parent  5faffcf234b7aef35862ecfc0a4757db1ced80ba
[mq]: blocking_qt

diff -r 5faffcf234b7 -r d25f4bc99e42 libgui/graphics/Backend.cc
--- a/libgui/graphics/Backend.cc	Fri Nov 23 11:18:53 2018 +0100
+++ b/libgui/graphics/Backend.cc	Sat Dec 15 11:31:31 2018 +0100
@@ -76,7 +76,8 @@
     ObjectFactory *factory = ObjectFactory::instance ();
 
     connect (this, SIGNAL (createObject (double)),
-             factory, SLOT (createObject (double)));
+             factory, SLOT (createObject (double)),
+             Qt::BlockingQueuedConnection);
   }
 
   Backend::~Backend (void)
@@ -162,7 +163,8 @@
     if (proxy)
       {
         proxy->finalize ();
-        delete proxy;
+        if (proxy)
+          delete proxy;
 
         graphics_object gObj (go);
 
diff -r 5faffcf234b7 -r d25f4bc99e42 libgui/graphics/ObjectProxy.cc
--- a/libgui/graphics/ObjectProxy.cc	Fri Nov 23 11:18:53 2018 +0100
+++ b/libgui/graphics/ObjectProxy.cc	Sat Dec 15 11:31:31 2018 +0100
@@ -52,8 +52,6 @@
           {
             disconnect (this, SIGNAL (sendUpdate (int)),
                         m_object, SLOT (slotUpdate (int)));
-            disconnect (this, SIGNAL (sendFinalize (void)),
-                        m_object, SLOT (slotFinalize (void)));
             disconnect (this, SIGNAL (sendRedraw (void)),
                         m_object, SLOT (slotRedraw (void)));
             disconnect (this, SIGNAL (sendShow (void)),
@@ -68,8 +66,6 @@
           {
             connect (this, SIGNAL (sendUpdate (int)),
                      m_object, SLOT (slotUpdate (int)));
-            connect (this, SIGNAL (sendFinalize (void)),
-                     m_object, SLOT (slotFinalize (void)));
             connect (this, SIGNAL (sendRedraw (void)),
                      m_object, SLOT (slotRedraw (void)));
             connect (this, SIGNAL (sendShow (void)),
@@ -84,7 +80,7 @@
   void
   ObjectProxy::setObject (Object *obj)
   {
-    emit sendFinalize ();
+    finalize ();
     init (obj);
   }
 
@@ -101,7 +97,15 @@
   ObjectProxy::finalize (void)
   {
     emit sendFinalize ();
-    init (nullptr);
+    if (! m_object)
+      return;
+    
+    Qt::ConnectionType t = Qt::BlockingQueuedConnection;
+
+    if (QThread::currentThread () == QCoreApplication::instance ()->thread ())
+      t = Qt::DirectConnection;
+
+    QMetaObject::invokeMethod (m_object, "slotFinalize", t);
   }
 
   void
@@ -140,22 +144,6 @@
     QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
                                Q_RETURN_ARG (uint8NDArray, retval));
 
-    // FIXME: The following may fail for obscure reasons, see bug #53328.
-    //        In absence of a solution, we retry twice before calling error().
-    if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                     Q_RETURN_ARG (uint8NDArray, retval)))
-      {
-        octave::sleep (0.1);
-        if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                         Q_RETURN_ARG (uint8NDArray, retval)))
-          {
-            octave::sleep (0.2);
-            if (! QMetaObject::invokeMethod (m_object, "slotGetPixels", t,
-                                             Q_RETURN_ARG (uint8NDArray, retval)))
-              error ("getframe: unable to retrieve figure pixels");
-          }
-      }
-
     return retval;
   }
 
diff -r 5faffcf234b7 -r d25f4bc99e42 libinterp/corefcn/graphics.cc
--- a/libinterp/corefcn/graphics.cc	Fri Nov 23 11:18:53 2018 +0100
+++ b/libinterp/corefcn/graphics.cc	Sat Dec 15 11:31:31 2018 +0100
@@ -2003,7 +2003,8 @@
 
       for (int k = 0; k < children.numel (); k++)
         finalize_r (children(k));
-
+      
+      gh_manager::unlock ();
       go.finalize ();
     }
 }
@@ -2752,6 +2753,7 @@
       bp.execute_deletefcn ();
 
       // Notify graphics toolkit.
+      unlock ();
       p->second.finalize ();
 
       // NOTE: Call remove_child before erasing the go from the map.
@@ -3053,7 +3055,10 @@
   graphics_object go = gh_manager::get_object (h);
 
   if (go)
-    go.initialize ();
+    {
+      gh_manager::unlock ();
+      go.initialize ();
+    }
 }
 
 // ---------------------------------------------------------------------
@@ -10408,7 +10413,6 @@
 %!   assert (get (hax, "uicontextmenu"), hctx2);
 %!   assert (get (hf, "children"), [hctx2; hctx1; hax]);
 %!   delete (hctx2);
-%!   pause (.005);
 %!   assert (get (hf, "uicontextmenu"), []);
 %!   assert (get (hax, "uicontextmenu"), []);
 %!   assert (get (hf, "children"), [hctx1; hax]);
@@ -13091,24 +13095,10 @@
 
           graphics_object go = gh_manager::get_object (h);
 
-          // FIXME: when using qt toolkit the print_figure method
-          // returns immediately and Canvas::print doesn't have
-          // enough time to lock the mutex before we lock it here
-          // again.  We thus wait 50 ms (which may not be enough) to
-          // give it a chance: see http://octave.1599824.n4.nabble.com/Printing-issues-with-Qt-toolkit-tp4673270.html
-
           gh_manager::unlock ();
 
           go.get_toolkit ().print_figure (go, term, file, debug_file);
 
-          // FIXME: In ObjectProxy.cc ObjectProxy::init
-          // we now use connect (..., Qt::BlockingQueuedConnection)
-          // which should make the sleep unnecessary.
-          // See bug #44463 and #48519
-          // Remove it and the FIXME block above after testing.
-
-          // octave_sleep (0.05);
-
           gh_manager::lock ();
         }
     }
