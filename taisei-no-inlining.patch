From 0f78b1a7eb05aa741541ca56559d7a3f381b57e2 Mon Sep 17 00:00:00 2001
From: "Andrew \"Akari\" Alexeyew" <akari@dbc.1gb.ua>
Date: Fri, 10 Aug 2012 22:27:46 +0300
Subject: [PATCH] Got rid of inline prototypes

---
 src/config.c           |  8 ++++----
 src/config.h           |  8 ++++----
 src/global.c           |  8 ++++----
 src/item.c             |  2 +-
 src/projectile.h       |  2 +-
 src/random.c           | 16 ++++++++--------
 src/random.h           | 16 ++++++++--------
 src/resource/model.c   |  4 ++--
 src/resource/texture.c |  2 +-
 src/stageutils.c       |  2 +-
 src/stageutils.h       |  2 +-
 11 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/src/config.c b/src/config.c
index 5bdd3bd..650ca82 100644
--- a/src/config.c
+++ b/src/config.c
@@ -108,19 +108,19 @@ FILE* config_open(char *filename, char *mode) {
 	return out;
 }
 
-inline int config_intval_p(ConfigEntry *e) {
+int config_intval_p(ConfigEntry *e) {
 	return tconfig.intval[e->key];
 }
 
-inline char* config_strval_p(ConfigEntry *e) {
+char* config_strval_p(ConfigEntry *e) {
 	return tconfig.strval[e->key];
 }
 
-inline int config_intval(char *key) {
+int config_intval(char *key) {
 	return config_intval_p(config_findentry(key));
 }
 
-inline char* config_strval(char *key) {
+char* config_strval(char *key) {
 	return config_strval_p(config_findentry(key));
 }
 
diff --git a/src/config.h b/src/config.h
index 483d288..ae8f8b1 100644
--- a/src/config.h
+++ b/src/config.h
@@ -77,9 +77,9 @@ void config_load(char *filename);
 void config_save(char *filename);
 ConfigEntry* config_findentry(char *name);
 
-inline int config_intval(char*);
-inline int config_intval_p(ConfigEntry*);
-inline char* config_strval(char*);
-inline char* config_strval_p(ConfigEntry*);
+int config_intval(char*);
+int config_intval_p(ConfigEntry*);
+char* config_strval(char*);
+char* config_strval_p(ConfigEntry*);
 
 #endif
diff --git a/src/global.c b/src/global.c
index 4b20010..21fef1d 100644
--- a/src/global.c
+++ b/src/global.c
@@ -121,19 +121,19 @@ void fade_out(float f) {
 	colorfill(0, 0, 0, f);
 }
 
-inline double psin(double x) {
+double psin(double x) {
 	return 0.5 + 0.5 * sin(x);
 }
 
-inline double max(double a, double b) {
+double max(double a, double b) {
 	return (a > b)? a : b;
 }
 
-inline double min(double a, double b) {
+double min(double a, double b) {
 	return (a < b)? a : b;
 }
 
-inline double clamp(double f, double lower, double upper) {
+double clamp(double f, double lower, double upper) {
 	if(f < lower)
 		return lower;
 	if(f > upper)
diff --git a/src/item.c b/src/item.c
index fbeb54d..a3a31e5 100644
--- a/src/item.c
+++ b/src/item.c
@@ -126,7 +126,7 @@ int collision_item(Item *i) {
 	return 0;
 }
 
-inline void spawn_item(complex pos, Type type) {
+void spawn_item(complex pos, Type type) {
 	tsrand_fill(2);
 	create_item(pos, 5*cexp(I*tsrand_a(0)/afrand(1)*M_PI*2), type);
 }
diff --git a/src/projectile.h b/src/projectile.h
index 16c9fd3..0aa6419 100644
--- a/src/projectile.h
+++ b/src/projectile.h
@@ -49,7 +49,7 @@ typedef struct Projectile {
 } Projectile;
 
 Color *rgba(float r, float g, float b, float a);
-inline Color *rgb(float r, float g, float b);
+Color *rgb(float r, float g, float b);
 
 #define create_particle3c(n,p,c,d,r,a1,a2,a3) create_particle4c(n,p,c,d,r,a1,a2,a3,0)
 #define create_particle2c(n,p,c,d,r,a1,a2) create_particle4c(n,p,c,d,r,a1,a2,0,0)
diff --git a/src/random.c b/src/random.c
index ed917a6..26be952 100644
--- a/src/random.c
+++ b/src/random.c
@@ -33,19 +33,19 @@ int tsrand_p(RandomState *rnd) {
 	return (uint32_t)((rnd->z << 16u) + rnd->w) % TSRAND_MAX;
 }
 
-inline void tsrand_seed(uint32_t seed) {
+void tsrand_seed(uint32_t seed) {
 	tsrand_seed_p(tsrand_current, seed);
 }
 
-inline int tsrand(void) {
+int tsrand(void) {
 	return tsrand_p(tsrand_current);
 }
 
-inline double frand(void) {
+double frand(void) {
 	return tsrand()/(double)TSRAND_MAX;
 }
 
-inline double nfrand(void) {
+double nfrand(void) {
 	return frand() * 2 - 1;
 }
 
@@ -96,21 +96,21 @@ void tsrand_fill_p(RandomState *rnd, int amount) {
 		tsrand_array[i] = tsrand_p(rnd);
 }
 
-inline void tsrand_fill(int amount) {
+void tsrand_fill(int amount) {
 	tsrand_fill_p(tsrand_current, amount);
 }
 
-inline int tsrand_a(int idx) {
+int tsrand_a(int idx) {
 	if(idx >= tsrand_array_elems || idx < 0)
 		errx(-1, "tsrand_a: index out of range (%i / %i)", idx, tsrand_array_elems);
 	return tsrand_array[idx];
 }
 
-inline double afrand(int idx) {
+double afrand(int idx) {
 	return tsrand_a(idx)/(double)TSRAND_MAX;
 }
 
-inline double anfrand(int idx) {
+double anfrand(int idx) {
 	return afrand(idx) * 2 - 1;
 }
 
diff --git a/src/random.h b/src/random.h
index 490e913..8f65db8 100644
--- a/src/random.h
+++ b/src/random.h
@@ -21,17 +21,17 @@ void tsrand_switch(RandomState *rnd);
 void tsrand_seed_p(RandomState *rnd, uint32_t seed);
 int tsrand_p(RandomState *rnd);
 
-inline void tsrand_seed(uint32_t seed);
-inline int tsrand(void);
+void tsrand_seed(uint32_t seed);
+int tsrand(void);
 
-inline double frand(void);
-inline double nfrand(void);
+double frand(void);
+double nfrand(void);
 
 void tsrand_fill_p(RandomState *rnd, int amount);
-inline void tsrand_fill(int amount);
-inline int tsrand_a(int idx);
-inline double afrand(int idx);
-inline double anfrand(int idx);
+void tsrand_fill(int amount);
+int tsrand_a(int idx);
+double afrand(int idx);
+double anfrand(int idx);
 
 #define TSRAND_MAX INT32_MAX
 
diff --git a/src/resource/model.c b/src/resource/model.c
index a560806..0245fb8 100644
--- a/src/resource/model.c
+++ b/src/resource/model.c
@@ -107,7 +107,7 @@ void parse_obj(char *filename, ObjFileData *data) {
 	}
 }
 	
-static inline void bad_reference_error(char *filename, char *aux, int n) {
+static void bad_reference_error(char *filename, char *aux, int n) {
 	errx(-1, "load_model():\n!- OBJ file '%s': Index %d: bad %s index reference\n", filename, n, aux);
 }
 
@@ -227,4 +227,4 @@ void delete_model(void **models, void *model) {
 
 void delete_models() { // Does not delete elements from the VBO, so doing this at runtime is leaking VBO space		
 	delete_all_elements((void **)&resources.models, delete_model);
-}
\ No newline at end of file
+}
diff --git a/src/resource/texture.c b/src/resource/texture.c
index 2c30955..f4e85a3 100644
--- a/src/resource/texture.c
+++ b/src/resource/texture.c
@@ -25,7 +25,7 @@ Color *rgba(float r, float g, float b, float a) {
 	return clr;
 }
 
-inline Color *rgb(float r, float g, float b) {
+Color *rgb(float r, float g, float b) {
 	return rgba(r, g, b, 1.0);
 }
 
diff --git a/src/stageutils.c b/src/stageutils.c
index 2edcef8..493aa08 100644
--- a/src/stageutils.c
+++ b/src/stageutils.c
@@ -34,7 +34,7 @@ void set_perspective_viewport(Stage3D *s, float n, float f, int vx, int vy, int
 	glMatrixMode(GL_MODELVIEW);
 }
 
-inline void set_perspective(Stage3D *s, float n, float f) {
+void set_perspective(Stage3D *s, float n, float f) {
 	set_perspective_viewport(s, n, f, VIEWPORT_X, VIEWPORT_Y, VIEWPORT_W, VIEWPORT_H);
 }
 
diff --git a/src/stageutils.h b/src/stageutils.h
index 89ee1d8..e272ab6 100644
--- a/src/stageutils.h
+++ b/src/stageutils.h
@@ -39,7 +39,7 @@ void init_stage3d(Stage3D *s);
 void add_model(Stage3D *s, SegmentDrawRule draw, SegmentPositionRule pos);
 
 void set_perspective_viewport(Stage3D *s, float n, float f, int vx, int vy, int vw, int vh);
-inline void set_perspective(Stage3D *s, float near, float far);
+void set_perspective(Stage3D *s, float near, float far);
 void draw_stage3d(Stage3D *s, float maxrange);
 
 void free_stage3d(Stage3D *s);
