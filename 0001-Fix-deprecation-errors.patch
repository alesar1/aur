From e7bead4ae15a784af504f9d6bda66aa4fc1f36e5 Mon Sep 17 00:00:00 2001
From: Dimitris Kiziridis <ragouel@outlook.com>
Date: Fri, 9 Oct 2020 21:35:48 +0300
Subject: [PATCH 1/1] Fix deprecation errors

---
 src/client/cli/cmd/mount.cpp                         |  2 +-
 src/client/cli/cmd/set.cpp                           |  2 +-
 src/network/local_socket_reply.cpp                   | 12 ++++++------
 src/platform/backends/shared/linux/backend_utils.cpp |  4 +++-
 src/sshfs_mount/sshfs_server.cpp                     |  2 +-
 5 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/src/client/cli/cmd/mount.cpp b/src/client/cli/cmd/mount.cpp
index 4408cd1b..72415d27 100644
--- a/src/client/cli/cmd/mount.cpp
+++ b/src/client/cli/cmd/mount.cpp
@@ -151,7 +151,7 @@ mp::ParseCode cmd::Mount::parse_args(mp::ArgParser* parser)
 
     for (auto i = 1; i < parser->positionalArguments().count(); ++i)
     {
-        auto parsed_target = QString(parser->positionalArguments().at(i)).split(":", QString::SkipEmptyParts);
+        auto parsed_target = QString(parser->positionalArguments().at(i)).split(":", Qt::SkipEmptyParts);
 
         auto entry = request.add_target_paths();
         entry->set_instance_name(parsed_target.at(0).toStdString());
diff --git a/src/client/cli/cmd/set.cpp b/src/client/cli/cmd/set.cpp
index fc28abab..58f795e6 100644
--- a/src/client/cli/cmd/set.cpp
+++ b/src/client/cli/cmd/set.cpp
@@ -123,7 +123,7 @@ mp::ParseCode cmd::Set::parse_args(mp::ArgParser* parser)
         }
         else
         {
-            const auto keyval = args.at(0).split('=', QString::KeepEmptyParts);
+            const auto keyval = args.at(0).split('=', Qt::KeepEmptyParts);
             if (keyval.size() != 2 || keyval[0].isEmpty())
             {
                 cerr << "Bad key-value format.\n";
diff --git a/src/network/local_socket_reply.cpp b/src/network/local_socket_reply.cpp
index ac2f8128..50ba26d4 100644
--- a/src/network/local_socket_reply.cpp
+++ b/src/network/local_socket_reply.cpp
@@ -115,7 +115,7 @@ void mp::LocalSocketReply::abort()
     close();
 
     setError(OperationCanceledError, "Operation canceled");
-    emit error(OperationCanceledError);
+    emit errorOccurred(OperationCanceledError);
 
     setFinished(true);
     emit finished();
@@ -143,11 +143,11 @@ void mp::LocalSocketReply::send_request(const QNetworkRequest& request, QIODevic
     auto op = request.attribute(QNetworkRequest::CustomVerbAttribute).toByteArray();
 
     // Build the HTTP method part
-    http_data += op + ' ' + request.url().path();
+    http_data += op + ' ' + request.url().path().toLatin1();
 
     if (request.url().hasQuery())
     {
-        http_data += "?" + request.url().query();
+        http_data += "?" + request.url().query().toLatin1();
     }
 
     http_data += " HTTP/1.1\r\n";
@@ -299,7 +299,7 @@ void mp::LocalSocketReply::parse_status(const QByteArray& status)
     {
         setError(QNetworkReply::ProtocolFailure, "Malformed HTTP response from server");
 
-        emit error(QNetworkReply::ProtocolFailure);
+        emit errorOccurred(QNetworkReply::ProtocolFailure);
 
         return;
     }
@@ -313,7 +313,7 @@ void mp::LocalSocketReply::parse_status(const QByteArray& status)
 
         setError(error_code, http_status_match.captured("message"));
 
-        emit error(error_code);
+        emit errorOccurred(error_code);
     }
 }
 
@@ -323,7 +323,7 @@ bool mp::LocalSocketReply::local_socket_write(const QByteArray& data)
     if (bytes_written < 0)
     {
         setError(QNetworkReply::InternalServerError, local_socket->errorString());
-        emit error(QNetworkReply::InternalServerError);
+        emit errorOccurred(QNetworkReply::InternalServerError);
 
         return false;
     }
diff --git a/src/platform/backends/shared/linux/backend_utils.cpp b/src/platform/backends/shared/linux/backend_utils.cpp
index 7408485a..20d7680d 100644
--- a/src/platform/backends/shared/linux/backend_utils.cpp
+++ b/src/platform/backends/shared/linux/backend_utils.cpp
@@ -200,7 +200,9 @@ void mp::backend::check_for_kvm_support()
 {
     QProcess check_kvm;
     check_kvm.setProcessChannelMode(QProcess::MergedChannels);
-    check_kvm.start(QDir(QCoreApplication::applicationDirPath()).filePath("check_kvm_support"));
+//    check_kvm.start(QDir(QCoreApplication::applicationDirPath()).filePath("check_kvm_support"));
+    QDir(QCoreApplication::applicationDirPath()).filePath("check_kvm_support");
+    check_kvm.start();
     check_kvm.waitForFinished();
 
     if (check_kvm.error() == QProcess::FailedToStart)
diff --git a/src/sshfs_mount/sshfs_server.cpp b/src/sshfs_mount/sshfs_server.cpp
index 6a0cbe05..ef09b868 100644
--- a/src/sshfs_mount/sshfs_server.cpp
+++ b/src/sshfs_mount/sshfs_server.cpp
@@ -40,7 +40,7 @@ unordered_map<int, int> deserialise_id_map(const char* in)
 {
     unordered_map<int, int> id_map;
     QString input(in);
-    auto maps = input.split(',', QString::SkipEmptyParts);
+    auto maps = input.split(',',Qt::SkipEmptyParts);
     for (auto map : maps)
     {
         auto ids = map.split(":");
-- 
2.28.0

