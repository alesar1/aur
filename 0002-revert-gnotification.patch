diff --git a/Telegram/CMakeLists.txt b/Telegram/CMakeLists.txt
index 9614a4478..3a4d3cafa 100644
--- a/Telegram/CMakeLists.txt
+++ b/Telegram/CMakeLists.txt
@@ -1129,7 +1129,6 @@ PRIVATE
     platform/platform_integration.h
     platform/platform_main_window.h
     platform/platform_notifications_manager.h
-    platform/platform_specific.cpp
     platform/platform_specific.h
     platform/platform_tray.h
     platform/platform_window_title.h
diff --git a/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp b/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
index c76378a0c..7c9a0e12c 100644
--- a/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/notifications_manager_linux.cpp
@@ -9,13 +9,10 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "platform/linux/notifications_manager_linux.h"
 
 #include "window/notifications_utilities.h"
-#include "base/options.h"
 #include "base/platform/base_platform_info.h"
 #include "base/platform/linux/base_linux_glibmm_helper.h"
 #include "base/platform/linux/base_linux_dbus_utilities.h"
-#include "platform/platform_specific.h"
 #include "core/application.h"
-#include "core/sandbox.h"
 #include "core/core_settings.h"
 #include "data/data_forum_topic.h"
 #include "history/history.h"
@@ -30,8 +27,6 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include <glibmm.h>
 #include <giomm.h>
 
-#include <dlfcn.h>
-
 namespace Platform {
 namespace Notifications {
 namespace {
@@ -341,9 +336,6 @@ private:
 	const not_null<Manager*> _manager;
 	NotificationId _id;
 
-	Glib::RefPtr<Gio::Application> _application;
-	Glib::RefPtr<Gio::Notification> _notification;
-
 	Glib::RefPtr<Gio::DBus::Connection> _dbusConnection;
 	Glib::ustring _title;
 	Glib::ustring _body;
@@ -370,8 +362,7 @@ NotificationData::NotificationData(
 	not_null<Manager*> manager,
 	NotificationId id)
 : _manager(manager)
-, _id(id)
-, _application(Gio::Application::get_default()) {
+, _id(id) {
 }
 
 bool NotificationData::init(
@@ -379,64 +370,6 @@ bool NotificationData::init(
 		const QString &subtitle,
 		const QString &msg,
 		Window::Notifications::Manager::DisplayOptions options) {
-	if (_application) {
-		_notification = Gio::Notification::create(title.toStdString());
-
-		_notification->set_body(
-			subtitle.isEmpty()
-				? msg.toStdString()
-				: qsl("%1\n%2").arg(subtitle, msg).toStdString());
-
-		_notification->set_icon(
-			Gio::ThemedIcon::create(base::IconName().toStdString()));
-
-		// glib 2.42+, we keep glib 2.40+ compatibility
-		static const auto set_priority = [] {
-			// reset dlerror after dlsym call
-			const auto guard = gsl::finally([] { dlerror(); });
-			return reinterpret_cast<decltype(&g_notification_set_priority)>(
-				dlsym(RTLD_DEFAULT, "g_notification_set_priority"));
-		}();
-
-		if (set_priority) {
-			// for chat messages, according to
-			// https://docs.gtk.org/gio/enum.NotificationPriority.html
-			set_priority(_notification->gobj(), G_NOTIFICATION_PRIORITY_HIGH);
-		}
-
-		// glib 2.70+, we keep glib 2.40+ compatibility
-		static const auto set_category = [] {
-			// reset dlerror after dlsym call
-			const auto guard = gsl::finally([] { dlerror(); });
-			return reinterpret_cast<decltype(&g_notification_set_category)>(
-				dlsym(RTLD_DEFAULT, "g_notification_set_category"));
-		}();
-
-		if (set_category) {
-			set_category(_notification->gobj(), "im.received");
-		}
-
-		const auto idTuple = _id.toTuple();
-
-		_notification->set_default_action(
-			"app.notification-reply",
-			idTuple);
-
-		if (!options.hideMarkAsRead) {
-			_notification->add_button(
-				tr::lng_context_mark_read(tr::now).toStdString(),
-				"app.notification-mark-as-read",
-				idTuple);
-		}
-
-		_notification->add_button(
-			tr::lng_notification_reply(tr::now).toStdString(),
-			"app.notification-reply",
-			idTuple);
-
-		return true;
-	}
-
 	Noexcept([&] {
 		_dbusConnection = Gio::DBus::Connection::get_sync(
 			Gio::DBus::BusType::SESSION);
@@ -607,17 +540,6 @@ NotificationData::~NotificationData() {
 }
 
 void NotificationData::show() {
-	if (_application && _notification) {
-		_application->send_notification(
-			std::to_string(_id.contextId.sessionId)
-				+ '-'
-				+ std::to_string(_id.contextId.peerId.value)
-				+ '-'
-				+ std::to_string(_id.msgId.bare),
-			_notification);
-		return;
-	}
-
 	// a hack for snap's activation restriction
 	const auto weak = base::make_weak(this);
 	StartServiceAsync(crl::guard(weak, [=] {
@@ -660,17 +582,6 @@ void NotificationData::show() {
 }
 
 void NotificationData::close() {
-	if (_application) {
-		_application->withdraw_notification(
-			std::to_string(_id.contextId.sessionId)
-				+ '-'
-				+ std::to_string(_id.contextId.peerId.value)
-				+ '-'
-				+ std::to_string(_id.msgId.bare));
-		_manager->clearNotification(_id);
-		return;
-	}
-
 	_dbusConnection->call(
 		std::string(kObjectPath),
 		std::string(kInterface),
@@ -686,16 +597,7 @@ void NotificationData::close() {
 }
 
 void NotificationData::setImage(const QString &imagePath) {
-	if (imagePath.isEmpty()) {
-		return;
-	}
-
-	if (_notification) {
-		_notification->set_icon(Gio::Icon::create(imagePath.toStdString()));
-		return;
-	}
-
-	if (_imageKey.empty()) {
+	if (imagePath.isEmpty() || _imageKey.empty()) {
 		return;
 	}
 
@@ -789,13 +691,13 @@ bool SkipFlashBounceForCustom() {
 }
 
 bool Supported() {
-	return ServiceRegistered || Gio::Application::get_default();
+	return ServiceRegistered;
 }
 
 bool Enforced() {
 	// Wayland doesn't support positioning
 	// and custom notifications don't work here
-	return IsWayland() || OptionGApplication.value();
+	return IsWayland();
 }
 
 bool ByDefault() {
@@ -821,30 +723,25 @@ bool ByDefault() {
 }
 
 void Create(Window::Notifications::System *system) {
+	static const auto ServiceWatcher = CreateServiceWatcher();
+
 	const auto managerSetter = [=] {
 		using ManagerType = Window::Notifications::ManagerType;
 		if ((Core::App().settings().nativeNotifications() || Enforced())
 			&& Supported()) {
-			if (system->manager().type() != ManagerType::Native) {
+			if (system->managerType() != ManagerType::Native) {
 				system->setManager(std::make_unique<Manager>(system));
 			}
 		} else if (Enforced()) {
-			if (system->manager().type() != ManagerType::Dummy) {
+			if (system->managerType() != ManagerType::Dummy) {
 				using DummyManager = Window::Notifications::DummyManager;
 				system->setManager(std::make_unique<DummyManager>(system));
 			}
-		} else if (system->manager().type() != ManagerType::Default) {
+		} else if (system->managerType() != ManagerType::Default) {
 			system->setManager(nullptr);
 		}
 	};
 
-	if (Gio::Application::get_default()) {
-		managerSetter();
-		return;
-	}
-
-	static const auto ServiceWatcher = CreateServiceWatcher();
-
 	const auto counter = std::make_shared<int>(2);
 	const auto oneReady = [=] {
 		if (!--*counter) {
diff --git a/Telegram/SourceFiles/platform/linux/specific_linux.cpp b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
index 506a450d6..8036fcb1d 100644
--- a/Telegram/SourceFiles/platform/linux/specific_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
@@ -8,7 +8,6 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "platform/linux/specific_linux.h"
 
 #include "base/random.h"
-#include "base/options.h"
 #include "base/platform/base_platform_info.h"
 #include "platform/linux/linux_desktop_environment.h"
 #include "platform/linux/linux_wayland_integration.h"
@@ -18,7 +17,6 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "storage/localstorage.h"
 #include "core/sandbox.h"
 #include "core/application.h"
-#include "core/local_url_handlers.h"
 #include "core/core_settings.h"
 #include "core/update_checker.h"
 #include "window/window_controller.h"
@@ -60,58 +58,6 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 using namespace Platform;
 using Platform::internal::WaylandIntegration;
 
-#ifndef DESKTOP_APP_DISABLE_DBUS_INTEGRATION
-typedef GApplication TDesktopApplication;
-typedef GApplicationClass TDesktopApplicationClass;
-
-G_DEFINE_TYPE(
-	TDesktopApplication,
-	t_desktop_application,
-	G_TYPE_APPLICATION)
-
-static void t_desktop_application_class_init(
-		TDesktopApplicationClass *klass) {
-	const auto application_class = G_APPLICATION_CLASS(klass);
-
-	application_class->before_emit = [](
-			GApplication *application,
-			GVariant *platformData) {
-		if (Platform::IsWayland()) {
-			static const auto keys = {
-				"activation-token",
-				"desktop-startup-id",
-			};
-			for (const auto &key : keys) {
-				const char *token = nullptr;
-				g_variant_lookup(platformData, key, "&s", &token);
-				if (token) {
-					qputenv("XDG_ACTIVATION_TOKEN", token);
-					break;
-				}
-			}
-		}
-	};
-
-	application_class->add_platform_data = [](
-			GApplication *application,
-			GVariantBuilder *builder) {
-		if (Platform::IsWayland()) {
-			const auto token = qgetenv("XDG_ACTIVATION_TOKEN");
-			if (!token.isEmpty()) {
-				g_variant_builder_add(
-					builder,
-					"{sv}",
-					"activation-token",
-					g_variant_new_string(token.constData()));
-			}
-		}
-	};
-}
-
-static void t_desktop_application_init(TDesktopApplication *application) {
-}
-#endif // !DESKTOP_APP_DISABLE_DBUS_INTEGRATION
-
 namespace Platform {
 namespace {
 
@@ -229,179 +175,6 @@ void PortalAutostart(bool start, bool silent) {
 	}
 }
 
-void LaunchGApplication() {
-	const auto connection = [] {
-		try {
-			return Gio::DBus::Connection::get_sync(
-				Gio::DBus::BusType::SESSION);
-		} catch (...) {
-			return Glib::RefPtr<Gio::DBus::Connection>();
-		}
-	}();
-
-	using namespace base::Platform::DBus;
-	const auto activatableNames = [&] {
-		try {
-			if (connection) {
-				return ListActivatableNames(connection);
-			}
-		} catch (...) {
-		}
-
-		return std::vector<Glib::ustring>();
-	}();
-
-	const auto freedesktopNotifications = [&] {
-		try {
-			if (connection && NameHasOwner(
-				connection,
-				"org.freedesktop.Notifications")) {
-				return true;
-			}
-		} catch (...) {
-		}
-
-		if (ranges::contains(
-			activatableNames,
-			"org.freedesktop.Notifications")) {
-			return true;
-		}
-
-		return false;
-	};
-
-	if (OptionGApplication.value()
-		|| (KSandbox::isFlatpak() && !freedesktopNotifications())) {
-		Glib::signal_idle().connect_once([] {
-			const auto appId = QGuiApplication::desktopFileName()
-				.chopped(8)
-				.toStdString();
-
-			const auto app = Glib::wrap(
-				G_APPLICATION(
-					g_object_new(
-						t_desktop_application_get_type(),
-						"application-id",
-						Gio::Application::id_is_valid(appId)
-							? appId.c_str()
-							: nullptr,
-						"flags",
-						G_APPLICATION_HANDLES_OPEN,
-						nullptr)));
-
-			app->signal_startup().connect([=] {
-				QEventLoop loop;
-				loop.exec(QEventLoop::ApplicationExec);
-				app->quit();
-			}, true);
-
-			app->signal_activate().connect([] {
-				Core::Sandbox::Instance().customEnterFromEventLoop([] {
-					if (const auto w = App::wnd()) {
-						w->activate();
-					}
-				});
-			}, true);
-
-			app->signal_open().connect([](
-					const Gio::Application::type_vec_files &files,
-					const Glib::ustring &hint) {
-				Core::Sandbox::Instance().customEnterFromEventLoop([&] {
-					for (const auto &file : files) {
-						if (file->get_uri_scheme() == "file") {
-							gSendPaths.append(
-								QString::fromStdString(file->get_path()));
-							continue;
-						}
-						const auto url = QString::fromStdString(
-							file->get_uri());
-						if (url.isEmpty()) {
-							continue;
-						}
-						if (url.startsWith(qstr("interpret://"))) {
-							gSendPaths.append(url);
-							continue;
-						}
-						if (Core::StartUrlRequiresActivate(url)) {
-							if (const auto w = App::wnd()) {
-								w->activate();
-							}
-						}
-						cSetStartUrl(url);
-						Core::App().checkStartUrl();
-					}
-					if (!cSendPaths().isEmpty()) {
-						if (const auto w = App::wnd()) {
-							w->sendPaths();
-						}
-					}
-				});
-			}, true);
-
-			app->add_action("Quit", [] {
-				Core::Sandbox::Instance().customEnterFromEventLoop([] {
-					Core::Quit();
-				});
-			});
-
-			using Window::Notifications::Manager;
-			using NotificationId = Manager::NotificationId;
-			using NotificationIdTuple = std::result_of<
-				decltype(&NotificationId::toTuple)(NotificationId*)
-			>::type;
-
-			const auto notificationIdVariantType = [] {
-				try {
-					return base::Platform::MakeGlibVariant(
-						NotificationId().toTuple()).get_type();
-				} catch (...) {
-					return Glib::VariantType();
-				}
-			}();
-
-			app->add_action_with_parameter(
-				"notification-reply",
-				notificationIdVariantType,
-				[](const Glib::VariantBase &parameter) {
-					Core::Sandbox::Instance().customEnterFromEventLoop([&] {
-						try {
-							const auto &app = Core::App();
-							const auto &notifications = app.notifications();
-							notifications.manager().notificationActivated(
-								NotificationId::FromTuple(
-									base::Platform::GlibVariantCast<
-										NotificationIdTuple
-									>(parameter)));
-						} catch (...) {
-						}
-					});
-				});
-
-			app->add_action_with_parameter(
-				"notification-mark-as-read",
-				notificationIdVariantType,
-				[](const Glib::VariantBase &parameter) {
-					Core::Sandbox::Instance().customEnterFromEventLoop([&] {
-						try {
-							const auto &app = Core::App();
-							const auto &notifications = app.notifications();
-							notifications.manager().notificationReplied(
-								NotificationId::FromTuple(
-									base::Platform::GlibVariantCast<
-										NotificationIdTuple
-									>(parameter)),
-								{});
-						} catch (...) {
-						}
-					});
-				});
-
-			app->hold();
-			app->run(0, nullptr);
-		});
-	}
-}
-
 bool GenerateDesktopFile(
 		const QString &targetPath,
 		const QStringList &args = {},
@@ -860,10 +633,6 @@ namespace ThirdParty {
 void start() {
 	LOG(("Icon theme: %1").arg(QIcon::themeName()));
 	LOG(("Fallback icon theme: %1").arg(QIcon::fallbackThemeName()));
-
-#ifndef DESKTOP_APP_DISABLE_DBUS_INTEGRATION
-	LaunchGApplication();
-#endif // !DESKTOP_APP_DISABLE_DBUS_INTEGRATION
 }
 
 void finish() {
diff --git a/Telegram/SourceFiles/platform/platform_specific.cpp b/Telegram/SourceFiles/platform/platform_specific.cpp
deleted file mode 100644
index b0387f82a..000000000
--- a/Telegram/SourceFiles/platform/platform_specific.cpp
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
-This file is part of Telegram Desktop,
-the official desktop application for the Telegram messaging service.
-
-For license and copyright information please follow this link:
-https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
-*/
-#include "platform/platform_specific.h"
-
-#include "base/options.h"
-
-namespace Platform {
-
-const char kOptionGApplication[] = "gapplication";
-
-base::options::toggle OptionGApplication({
-	.id = kOptionGApplication,
-	.name = "GApplication",
-	.description = "Force enable GLib's GApplication and GNotification."
-		" When disabled, autodetect is used.",
-	.scope = base::options::linux,
-	.restartRequired = true,
-});
-
-} // namespace Platform
diff --git a/Telegram/SourceFiles/platform/platform_specific.h b/Telegram/SourceFiles/platform/platform_specific.h
index 725ecdb7b..dc863b179 100644
--- a/Telegram/SourceFiles/platform/platform_specific.h
+++ b/Telegram/SourceFiles/platform/platform_specific.h
@@ -7,20 +7,8 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 */
 #pragma once
 
-namespace base::options {
-
-template <typename Type>
-class option;
-
-using toggle = option<bool>;
-
-} // namespace base::options
-
 namespace Platform {
 
-extern const char kOptionGApplication[];
-extern base::options::toggle OptionGApplication;
-
 void start();
 void finish();
 
diff --git a/Telegram/SourceFiles/settings/settings_experimental.cpp b/Telegram/SourceFiles/settings/settings_experimental.cpp
index 8b9b82f1f..b0313c6b8 100644
--- a/Telegram/SourceFiles/settings/settings_experimental.cpp
+++ b/Telegram/SourceFiles/settings/settings_experimental.cpp
@@ -16,7 +16,6 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "ui/chat/chat_style_radius.h"
 #include "base/options.h"
 #include "core/application.h"
-#include "platform/platform_specific.h"
 #include "chat_helpers/tabbed_panel.h"
 #include "dialogs/dialogs_inner_widget.h"
 #include "history/history_widget.h"
@@ -144,7 +143,6 @@ void SetupExperimental(
 	addToggle(Settings::kOptionMonoSettingsIcons);
 	addToggle(Webview::kOptionWebviewDebugEnabled);
 	addToggle(kOptionAutoScrollInactiveChat);
-	addToggle(Platform::kOptionGApplication);
 }
 
 } // namespace
diff --git a/Telegram/SourceFiles/window/notifications_manager.cpp b/Telegram/SourceFiles/window/notifications_manager.cpp
index c9896d7b7..c349686ba 100644
--- a/Telegram/SourceFiles/window/notifications_manager.cpp
+++ b/Telegram/SourceFiles/window/notifications_manager.cpp
@@ -125,9 +125,9 @@ void System::setManager(std::unique_ptr<Manager> manager) {
 	}
 }
 
-Manager &System::manager() const {
+ManagerType System::managerType() const {
 	Expects(_manager != nullptr);
-	return *_manager;
+	return _manager->type();
 }
 
 Main::Session *System::findSession(uint64 sessionId) const {
diff --git a/Telegram/SourceFiles/window/notifications_manager.h b/Telegram/SourceFiles/window/notifications_manager.h
index 57401671c..e1bc0ac56 100644
--- a/Telegram/SourceFiles/window/notifications_manager.h
+++ b/Telegram/SourceFiles/window/notifications_manager.h
@@ -84,7 +84,7 @@ public:
 
 	void createManager();
 	void setManager(std::unique_ptr<Manager> manager);
-	[[nodiscard]] Manager &manager() const;
+	[[nodiscard]] ManagerType managerType() const;
 
 	void checkDelayed();
 	void schedule(Data::ItemNotification notification);
@@ -217,22 +217,6 @@ public:
 		friend inline auto operator<=>(
 			const ContextId&,
 			const ContextId&) = default;
-
-		[[nodiscard]] auto toTuple() const {
-			return std::make_tuple(
-				sessionId,
-				peerId.value,
-				topicRootId.bare);
-		}
-
-		template<typename T>
-		[[nodiscard]] static auto FromTuple(const T &tuple) {
-			return ContextId{
-				std::get<0>(tuple),
-				PeerIdHelper(std::get<1>(tuple)),
-				std::get<2>(tuple),
-			};
-		}
 	};
 	struct NotificationId {
 		ContextId contextId;
@@ -241,20 +225,6 @@ public:
 		friend inline auto operator<=>(
 			const NotificationId&,
 			const NotificationId&) = default;
-
-		[[nodiscard]] auto toTuple() const {
-			return std::make_tuple(
-				contextId.toTuple(),
-				msgId.bare);
-		}
-
-		template<typename T>
-		[[nodiscard]] static auto FromTuple(const T &tuple) {
-			return NotificationId{
-				ContextId::FromTuple(std::get<0>(tuple)),
-				std::get<1>(tuple),
-			};
-		}
 	};
 	struct NotificationFields {
 		not_null<HistoryItem*> item;
