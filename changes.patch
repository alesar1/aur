diff --git a/.gitignore b/.gitignore
index c63307f..c5029f8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,7 +11,8 @@
 *.pydev*
 *.vcproj
 .idea/
-uid.dll
+lib/uid
+lib/uid.exe
 build/
 dist/
 Thumbs.db
diff --git a/.travis.yml b/.travis.yml
index 74ee1ab..dbbd36a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -11,6 +11,7 @@ install:
   - "pip install cx_Freeze"
   - "pip install python-coveralls"
   - "pip install -r requirements.txt --trusted-host content.faforever.com"
+  - curl -s https://api.github.com/repos/FAForever/uid/releases/latest | jq -r '.assets[] | select(.name | contains("uid")) | .browser_download_url' | wget -i - -O ./lib/uid
 
 
 before_script:
diff --git a/appveyor.yml b/appveyor.yml
index f58e1af..53b16b3 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -19,6 +19,7 @@ install:
   - ps: "$env:PYTEST_QT_API=\"pyqt4\""
   - ps: "$env:FAF_FORCE_PRODUCTION=true"
   - "%PYTHON%\\Scripts\\pip.exe install -r requirements.txt --trusted-host content.faforever.com"
+  - ps: (Invoke-WebRequest -Uri https://api.github.com/repos/FAForever/uid/releases/latest | ConvertFrom-Json).assets | where {$_.name -eq "uid.exe"} | %{ iwr $_.browser_download_url -OutFile ".\\lib\\uid.exe" }
 
 test_script:
     - "%PYTHON%\\Scripts\\py.test.exe -vv --full-trace"
diff --git a/setup.py b/setup.py
index cec04dc..fd9c8eb 100644
--- a/setup.py
+++ b/setup.py
@@ -11,7 +11,10 @@ sip.setapi('QList', 2)
 sip.setapi('QProcess', 2)
 
 import PyQt4.uic
-from cx_Freeze import setup, Executable
+if sys.platform == 'win32':
+    from cx_Freeze import setup, Executable
+else:
+    from distutils.core import setup
 
 sys.path.insert(0, "src")
 sys.path.insert(0, "lib")
@@ -19,16 +22,17 @@ sys.path.insert(0, "lib")
 company_name = 'FAF Community'
 product_name = 'Forged Alliance Forever'
 
-import config.version as version
-import PyQt4.uic
-git_version = version.get_git_version()
-msi_version = version.msi_version(git_version)
-appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
-version.write_release_version(appveyor_build_version)
+if sys.platform == 'win32':
+  import config.version as version
+  import PyQt4.uic
+  git_version = version.get_git_version()
+  msi_version = version.msi_version(git_version)
+  appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
+  version.write_release_version(appveyor_build_version)
 
-print('Git version:', git_version,
-      'Release version:', appveyor_build_version,
-      'Build version:', msi_version)
+  print('Git version:', git_version,
+        'Release version:', appveyor_build_version,
+        'Build version:', msi_version)
 
 # Ugly hack to fix broken PyQt4
 try:
@@ -43,7 +47,7 @@ except OSError:
 build_exe_options = {
     'include_files': ['res',
                       'RELEASE-VERSION',
-                      ('lib/uid.dll', 'uid.dll'),
+                      ('lib/uid.exe', 'uid.exe'),
                       ('lib/qt.conf', 'qt.conf'),
                       ('lib/xdelta3.exe', 'xdelta3.exe'),
                       ('lib/lua51.dll', 'lua51.dll')],
@@ -92,18 +96,31 @@ base = None
 if sys.platform == 'win32':
     base = 'Win32GUI'
 
-exe = Executable(
-    'src/__main__.py',
-    base=base,
-    targetName='FAForever.exe',
-    icon='res/faf.ico',
-    includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
-            "PyQt4.uic.widget-plugins"]
-)
+if sys.platform == 'win32':
+    platform_options = {
+        'executables': [Executable(
+                          'src/__main__.py',
+                          base=base,
+                          targetName='FAForever.exe',
+                          icon='res/faf.ico',
+                          includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
+                                  "PyQt4.uic.widget-plugins"]
+                      )],
+        'requires': ['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
+        'options': {'build_exe': build_exe_options,
+                 'bdist_msi': bdist_msi_options},
+        'version': msi_version,
+                 }
+        
+else:
+    from setuptools import find_packages
+    platform_options = {
+        'packages': find_packages(),
+        'version': os.getenv('FAFCLIENT_VERSION'),
+        }
 
 setup(
     name=product_name,
-    version=msi_version,
     description='Forged Alliance Forever - Lobby Client',
     long_description='FA Forever is a community project that allows you to play \
 Supreme Commander and Supreme Commander: Forged Alliance online \
@@ -113,8 +130,5 @@ ranked ladder play, and featured mods.',
     maintainer='Sheeo',
     url='http://www.faforever.com',
     license='GNU General Public License, Version 3',
-    options={'build_exe': build_exe_options,
-             'bdist_msi': bdist_msi_options},
-    executables=[exe],
-    requires=['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
+    **platform_options
 )
diff --git a/src/__main__.py b/src/__main__.py
index 438d743..f144245 100644
--- a/src/__main__.py
+++ b/src/__main__.py
@@ -30,14 +30,16 @@ uic.widgetPluginPath.append(path)
 if getattr(sys, 'frozen', False):
     os.chdir(os.path.dirname(sys.executable))
 else:
-    # We are most likely running from source
-    srcDir = os.path.dirname(os.path.relpath(__file__))
-    devRoot = os.path.abspath(os.path.join(srcDir, os.pardir))
-    os.chdir(devRoot)
-    # We need to set the working directory correctly.
+    if sys.platform == 'win32':
+        # We are most likely running from source
+        srcDir = os.path.dirname(os.path.relpath(__file__))
+        devRoot = os.path.abspath(os.path.join(srcDir, os.pardir))
+        os.chdir(devRoot)
+        # We need to set the working directory correctly.
 
 import util
-util.COMMON_DIR = os.path.join(os.getcwd(), "res")
+if sys.platform == 'win32':
+    util.COMMON_DIR = os.path.join(os.getcwd(), "res")
 
 # Set up crash reporting
 excepthook_original = sys.excepthook
diff --git a/src/config/version.py b/src/config/version.py
index 8ee2014..80d2437 100644
--- a/src/config/version.py
+++ b/src/config/version.py
@@ -79,7 +79,7 @@ def get_git_version():
     # Read in the version that's currently in RELEASE-VERSION.
     release_version = read_release_version()
 
-    if hasattr(sys, 'frozen'):
+    if hasattr(sys, 'frozen') or sys.platform != 'win32':
         return release_version
 
     # First try to get the current version using “git describe”.
diff --git a/src/fa/game_process.py b/src/fa/game_process.py
index 9052f31..61d2c63 100644
--- a/src/fa/game_process.py
+++ b/src/fa/game_process.py
@@ -1,9 +1,11 @@
 import os
+import sys
 
 from PyQt4 import QtCore, QtGui
 import config
 import re
 
+import util
 import logging
 logger = logging.getLogger(__name__)
 
@@ -41,8 +43,14 @@ class GameProcess(QtCore.QProcess):
 
             executable = os.path.join(config.Settings.get('game/bin/path'),
                                       "ForgedAlliance.exe")
-            command = '"' + executable + '" ' + " ".join(arguments)
-
+            if sys.platform == 'win32':
+                command = '"' + executable + '" ' + " ".join(arguments)
+            else:
+                command = util.wine_cmd_prefix + " " + util.wine_exe + ' "' + executable + '" ' + " ".join(arguments)
+                if util.wine_prefix:
+                    wine_env = QtCore.QProcessEnvironment.systemEnvironment()
+                    wine_env.insert("WINEPREFIX", util.wine_prefix)
+                    QtCore.QProcess.setProcessEnvironment(self, wine_env)
             logger.info("Running FA with info: " + str(info))
             logger.info("Running FA via command: " + command)
             logger.info("Running FA via executable: " + executable)
diff --git a/src/util/__init__.py b/src/util/__init__.py
index 21989b0..f4fc217 100644
--- a/src/util/__init__.py
+++ b/src/util/__init__.py
@@ -1,12 +1,17 @@
 import sys
-
 import os
+import subprocess
+import getpass
 from ctypes import *
+
+from PyQt4.QtGui import QDesktopServices
+
 from config import Settings
+from PyQt4.QtGui import QDesktopServices
 
 # Developer mode flag
 def developer():
-    return sys.executable.endswith("python.exe")
+    return sys.executable.contains("python")
 
 from config import VERSION as VERSION_STRING
 
@@ -14,8 +19,11 @@ LOGFILE_MAX_SIZE = 256 * 1024  #256kb should be enough for anyone
 
 UNITS_PREVIEW_ROOT = "{}/faf/unitsDB/icons/big/".format(Settings.get('content/host'))
 
-#These are paths relative to the executable or main.py script
+# On Windows the res dir is relative to the executable or main.py script
 COMMON_DIR = os.path.join(os.getcwd(), "res")
+if sys.platform != 'win32' and not os.path.exists(COMMON_DIR):
+    #On Linux the res dir is installed as /usr/share/fafclient
+    COMMON_DIR = os.path.join("/usr", "share", "fafclient")
 
 # These directories are in Appdata (e.g. C:\ProgramData on some Win7 versions)
 if 'ALLUSERSPROFILE' in os.environ:
@@ -52,33 +60,42 @@ REPO_DIR = os.path.join(APPDATA_DIR, "repo")
 if not os.path.exists(REPO_DIR):
     os.makedirs(REPO_DIR)
 
+# Public settings object
+# Stolen from Config because reasons
+from config import _settings
+settings = _settings
+
+# initialize wine settings for non Windows platforms
+if sys.platform != 'win32':
+    wine_exe = settings.value("wine/exe", "wine", type=str)
+    wine_cmd_prefix = settings.value("wine/cmd_prefix", "", type=str)
+    if settings.contains("wine/prefix"):
+        wine_prefix = str(settings.value("wine/prefix", type=str))
+    else:
+        wine_prefix = os.path.join(os.path.expanduser("~"), ".wine")
+
 LOCALFOLDER = os.path.join(os.path.expandvars("%LOCALAPPDATA%"), "Gas Powered Games",
                            "Supreme Commander Forged Alliance")
 if not os.path.exists(LOCALFOLDER):
     LOCALFOLDER = os.path.join(os.path.expandvars("%USERPROFILE%"), "Local Settings", "Application Data",
                                "Gas Powered Games", "Supreme Commander Forged Alliance")
+if not os.path.exists(LOCALFOLDER) and sys.platform != 'win32':
+    LOCALFOLDER = os.path.join(wine_prefix, "drive_c", "users", getpass.getuser(), "Local Settings", "Application Data",
+                               "Gas Powered Games", "Supreme Commander Forged Alliance")
+
 PREFSFILENAME = os.path.join(LOCALFOLDER, "game.prefs")
+if not os.path.exists(PREFSFILENAME):
+    PREFSFILENAME = os.path.join(LOCALFOLDER, "Game.prefs")
 
 DOWNLOADED_RES_PIX = {}
 DOWNLOADING_RES_PIX = {}
 
-# This should be "My Documents" for most users. However, users with accents in their names can't even use these folders in Supcom
-# so we are nice and create a new home for them in the APPDATA_DIR
+PERSONAL_DIR = QDesktopServices.storageLocation(QDesktopServices.DocumentsLocation)
 try:
-    os.environ['USERNAME'].decode('ascii')  # Try to see if the user has a wacky username
-
-    import ctypes
-    from ctypes.wintypes import MAX_PATH
-
-    dll = ctypes.windll.shell32
-    buf = ctypes.create_unicode_buffer(MAX_PATH + 1)
-    if dll.SHGetSpecialFolderPathW(None, buf, 0x0005, False):
-        PERSONAL_DIR = (buf.value)
-    else:
-        raise StandardError
+    getpass.getuser().decode('ascii')  # Try to see if the user has a wacky username
 except:
     PERSONAL_DIR = os.path.join(APPDATA_DIR, "user")
-
+    
 #Ensure Application data directories exist
 if not os.path.isdir(APPDATA_DIR):
     os.makedirs(APPDATA_DIR)
@@ -149,11 +166,6 @@ __theme = None
 __themedir = None
 
 
-# Public settings object
-# Stolen from Config because reasons
-from config import _settings
-settings = _settings
-
 def clean_slate(path):
     if os.path.exists(path):
         logger.info("Wiping " + path)
@@ -560,23 +572,17 @@ def md5(file_name):
 
 def uniqueID(user, session):
     ''' This is used to uniquely identify a user's machine to prevent smurfing. '''
+    env = os.environ
+    env['PATH'] += ":" + os.getcwd() # the Windows setup places executables in the root/CWD
+    env['PATH'] += ":" + os.path.join(os.getcwd(), "lib") # the default download location for travis/Appveyor
     try:
-        if os.path.isfile("uid.dll"):
-            mydll = cdll.LoadLibrary("uid.dll")
-        else:
-            mydll = cdll.LoadLibrary(os.path.join("lib", "uid.dll"))
-
-        mydll.uid.restype = c_char_p
-        baseString = (mydll.uid(session, os.path.join(LOG_DIR, "uid.log")) )
-        DllCanUnloadNow()
-
-        return baseString
-
-    except:
-        QtGui.QMessageBox.warning(None, "C++ 2010 Runtime Missing",
-                                  "You are missing the Microsoft Visual C++ 2010 Runtime.<br><br>Get it from here: <a href='https://www.microsoft.com/en-us/download/details.aspx?id=5555'>https://www.microsoft.com/en-us/download/details.aspx?id=5555</a>")
-        logger.warning("UniqueID Failure, user warned", exc_info=sys.exc_info())
-        QtGui.QApplication.quit()
+        # on error, the uid exe returns 1 which will result in a CalledProcessError exception
+        return subprocess.check_output(["uid", session], env=env, stderr=subprocess.STDOUT)
+    except OSError as err:
+        logger.error("UniqueID error finding the executable: {}".format(err))
+    except subprocess.CalledProcessError as exc:
+        logger.error("UniqueID executable error: {}".format(exc.output))
+    return None
 
 
 import datetime
diff --git a/tests/unit_tests/client/test_updating.py b/tests/unit_tests/client/test_updating.py
index 05b4ca4..ebf086a 100644
--- a/tests/unit_tests/client/test_updating.py
+++ b/tests/unit_tests/client/test_updating.py
@@ -6,7 +6,6 @@ import config
 def test_client_sends_current_version(qtbot, mocker):
     import client
     c = client.instance
-    mocker.patch('util.uniqueID', side_effect='some_unique_id')
     mocker.patch.object(c, 'send')
     mocker.patch.object(c, 'connected')
     mocker.patch.object(c, 'socket')
