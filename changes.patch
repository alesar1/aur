diff --git a/setup.py b/setup.py
index 8cf2380..41f252e 100644
--- a/setup.py
+++ b/setup.py
@@ -1,120 +1,146 @@
 import os
 import sys
 
-import sip
-from pathlib import Path
-
-sip.setapi('QString', 2)
-sip.setapi('QVariant', 2)
-sip.setapi('QStringList', 2)
-sip.setapi('QList', 2)
-sip.setapi('QProcess', 2)
-
-import PyQt4.uic
-from cx_Freeze import setup, Executable
-
-sys.path.insert(0, "src")
-sys.path.insert(0, "lib")
-
 company_name = 'FAF Community'
 product_name = 'Forged Alliance Forever'
-
-import config.version as version
-import PyQt4.uic
-git_version = version.get_git_version()
-msi_version = version.msi_version(git_version)
-appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
-version.write_release_version(appveyor_build_version)
-
-print('Git version:', git_version,
-      'Release version:', appveyor_build_version,
-      'Build version:', msi_version)
-
-# Ugly hack to fix broken PyQt4
-try:
-    silly_file = Path(PyQt4.__path__[0]) / "uic" / "port_v3" / "proxy_base.py"
-    print("Removing {}".format(silly_file))
-    silly_file.unlink()
-except OSError:
-    pass
-
-
-# Dependencies are automatically detected, but it might need fine tuning.
-build_exe_options = {
-    'include_files': ['res',
-                      'RELEASE-VERSION',
-                      ('lib/uid.dll', 'uid.dll'),
-                      ('lib/qt.conf', 'qt.conf'),
-                      ('lib/xdelta3.exe', 'xdelta3.exe'),
-                      ('lib/lua51.dll', 'lua51.dll')],
-    'icon': 'res/faf.ico',
-    'include_msvcr': False,
-    'optimize': 2,
-    'packages': ['cffi', 'pycparser', 'PyQt4', 'PyQt4.uic',
-                 'PyQt4.QtGui', 'PyQt4.QtNetwork', 'win32com', 'win32com.client'],
-    'silent': True,
-    'excludes': ['numpy', 'scipy', 'matplotlib', 'tcl', 'Tkinter']
-}
-
-shortcut_table = [
-    ('DesktopShortcut',           # Shortcut
-     'DesktopFolder',             # Directory_
-     'FA Forever',                # Name
-     'TARGETDIR',                 # Component_
-     '[TARGETDIR]FAForever.exe',  # Target
-     None,                        # Arguments
-     None,                        # Description
-     None,                        # Hotkey
-     None,                        # Icon
-     None,                        # IconIndex
-     None,                        # ShowCmd
-     'TARGETDIR'                  # WkDir
-     )
-]
-
-target_dir = '[ProgramFilesFolder][ProductName]'
-upgrade_code = '{ADE2A55B-834C-4D8D-A071-7A91A3A266B7}'
-
-if False:  # Beta build
-    product_name += " Beta"
-    upgrade_code = '{2A336240-1D51-4726-B36f-78B998DD3740}'
-
-bdist_msi_options = {
-    'upgrade_code': upgrade_code,
-    'initial_target_dir': target_dir,
-    'add_to_path': False,
-    'data': {'Shortcut': shortcut_table},
-}
-
-# GUI applications require a different base on Windows (the default is for a
-# console application).
-base = None
-if sys.platform == 'win32':
-    base = 'Win32GUI'
-
-exe = Executable(
-    'src/__main__.py',
-    base=base,
-    targetName='FAForever.exe',
-    icon='res/faf.ico',
-    includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
-            "PyQt4.uic.widget-plugins"]
-)
-
-setup(
-    name=product_name,
-    version=msi_version,
-    description='Forged Alliance Forever - Lobby Client',
-    long_description='FA Forever is a community project that allows you to play \
+description='Forged Alliance Forever - Lobby Client'
+long_description='FA Forever is a community project that allows you to play \
 Supreme Commander and Supreme Commander: Forged Alliance online \
 with people across the globe. Provides new game play modes, including cooperative play, \
-ranked ladder play, and featured mods.',
-    author='FA Forever Community',
-    maintainer='Sheeo',
-    url='http://www.faforever.com',
-    license='GNU General Public License, Version 3',
-    options={'build_exe': build_exe_options,
-             'bdist_msi': bdist_msi_options},
-    executables=[exe],
-    requires=['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
-)
+ranked ladder play, and featured mods.'
+author='FA Forever Community'
+maintainer='Sheeo'
+url='http://www.faforever.com'
+license='GNU General Public License, Version 3'
+
+if sys.platform == 'win32':
+    import sip
+    from pathlib import Path
+
+    sip.setapi('QString', 2)
+    sip.setapi('QVariant', 2)
+    sip.setapi('QStringList', 2)
+    sip.setapi('QList', 2)
+    sip.setapi('QProcess', 2)
+
+    import PyQt4.uic
+    from cx_Freeze import setup, Executable
+
+    sys.path.insert(0, "src")
+    sys.path.insert(0, "lib")
+
+    import config.version as version
+    import PyQt4.uic
+    git_version = version.get_git_version()
+    msi_version = version.msi_version(git_version)
+    appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
+    version.write_release_version(appveyor_build_version)
+
+    print('Git version:', git_version,
+          'Release version:', appveyor_build_version,
+          'Build version:', msi_version)
+
+    # Ugly hack to fix broken PyQt4
+    try:
+        silly_file = Path(PyQt4.__path__[0]) / "uic" / "port_v3" / "proxy_base.py"
+        print("Removing {}".format(silly_file))
+        silly_file.unlink()
+    except OSError:
+        pass
+
+
+    # Dependencies are automatically detected, but it might need fine tuning.
+    build_exe_options = {
+        'include_files': ['res',
+                          'RELEASE-VERSION',
+                          ('lib/uid.dll', 'uid.dll'),
+                          ('lib/qt.conf', 'qt.conf'),
+                          ('lib/xdelta3.exe', 'xdelta3.exe'),
+                          ('lib/lua51.dll', 'lua51.dll')],
+        'icon': 'res/faf.ico',
+        'include_msvcr': False,
+        'optimize': 2,
+        'packages': ['cffi', 'pycparser', 'PyQt4', 'PyQt4.uic',
+                     'PyQt4.QtGui', 'PyQt4.QtNetwork', 'win32com', 'win32com.client'],
+        'silent': True,
+        'excludes': ['numpy', 'scipy', 'matplotlib', 'tcl', 'Tkinter']
+    }
+
+    shortcut_table = [
+        ('DesktopShortcut',           # Shortcut
+         'DesktopFolder',             # Directory_
+         'FA Forever',                # Name
+         'TARGETDIR',                 # Component_
+         '[TARGETDIR]FAForever.exe',  # Target
+         None,                        # Arguments
+         None,                        # Description
+         None,                        # Hotkey
+         None,                        # Icon
+         None,                        # IconIndex
+         None,                        # ShowCmd
+         'TARGETDIR'                  # WkDir
+         )
+    ]
+
+    target_dir = '[ProgramFilesFolder][ProductName]'
+    upgrade_code = '{ADE2A55B-834C-4D8D-A071-7A91A3A266B7}'
+
+    if False:  # Beta build
+        product_name += " Beta"
+        upgrade_code = '{2A336240-1D51-4726-B36f-78B998DD3740}'
+
+    bdist_msi_options = {
+        'upgrade_code': upgrade_code,
+        'initial_target_dir': target_dir,
+        'add_to_path': False,
+        'data': {'Shortcut': shortcut_table},
+    }
+
+    # GUI applications require a different base on Windows (the default is for a
+    # console application).
+    base = None
+    if sys.platform == 'win32':
+        base = 'Win32GUI'
+
+    exe = Executable(
+        'src/__main__.py',
+        base=base,
+        targetName='FAForever.exe' if sys.platform == 'win32' else 'FAForever',
+        icon='res/faf.ico',
+        includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
+                "PyQt4.uic.widget-plugins"]
+    )
+
+    setup(
+        name=product_name,
+        version=msi_version,
+        description=description,
+        long_description=long_description,
+        author=author,
+        maintainer=maintainer,
+        url=url,
+        license=license,
+        options={'build_exe': build_exe_options,
+                 'bdist_msi': bdist_msi_options},
+        executables=[exe],
+        requires=['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
+    )
+else:
+    from distutils.core import setup
+    from setuptools import find_packages
+    product_name = 'fafclient'
+    packages=find_packages()
+    print(packages)
+    setup(
+        name=product_name,
+        version=os.getenv('FAFCLIENT_VERSION'),
+        description=description,
+        long_description=long_description,
+        author=author,
+        maintainer=maintainer,
+        url=url,
+        license=license,
+        packages=packages,
+        #package_dir={'fafclient':'src'}
+    )
+  
diff --git a/src/config/version.py b/src/config/version.py
index 8ee2014..01425fc 100644
--- a/src/config/version.py
+++ b/src/config/version.py
@@ -40,7 +40,7 @@ def call_git_describe():
         return line.strip()
     except Exception as e:
         print("Error grabbing git version: {}".format(e))
-        return "0.0.0-dev"
+        return None
 
 def is_development_version(version):
     return "-" in version and not is_prerelease_version(version)
diff --git a/src/fa/game_process.py b/src/fa/game_process.py
index 331a785..250d284 100644
--- a/src/fa/game_process.py
+++ b/src/fa/game_process.py
@@ -40,7 +40,17 @@ class GameProcess(QtCore.QProcess):
 
             executable = os.path.join(config.Settings.get('game/bin/path'),
                                       "ForgedAlliance.exe")
-            command = '"' + executable + '" ' + " ".join(arguments)
+            import util
+            if util.WINDOWS:
+                command = '"' + executable + '" ' + " ".join(arguments)
+            else:
+                command = util.wine_exe + ' "' + executable + '" ' + " ".join(arguments)
+                if util.wine_use_optirun:
+                    command = "optirun " + command
+                if util.wine_prefix:
+                    wine_env = QtCore.QProcessEnvironment.systemEnvironment()
+                    wine_env.insert("WINEPREFIX", util.wine_prefix)
+                    QtCore.QProcess.setProcessEnvironment(self, wine_env)
 
             logger.info("Running FA with info: " + str(info))
             logger.info("Running FA via command: " + command)
diff --git a/src/fa/updater.py b/src/fa/updater.py
index e7226f7..6aeb4fa 100644
--- a/src/fa/updater.py
+++ b/src/fa/updater.py
@@ -396,7 +396,7 @@ class Updater(QtCore.QObject):
                 dst_file = os.path.join(dst_dir, file_)
                 if not os.path.exists(dst_file):
                     shutil.copy(src_file, dst_dir)
-                os.chmod(dst_file, stat.S_IWRITE)   # make all files we were considering writable, because we may need to patch them
+                os.chmod(dst_file, stat.S_IWRITE | stat.S_IREAD)   # make all files we were considering writable, because we may need to patch them
 
     def doUpdate(self):
         """ The core function that does most of the actual update work."""
diff --git a/src/util/__init__.py b/src/util/__init__.py
index 39d8ebb..f57f3d9 100644
--- a/src/util/__init__.py
+++ b/src/util/__init__.py
@@ -7,6 +7,24 @@ from ctypes import *
 def developer():
     return sys.executable.endswith("python.exe")
 
+# Public settings object
+# Stolen from Config because reasons
+from config import _settings
+settings = _settings
+
+import platform
+if platform.system() == "Windows":
+    WINDOWS = True
+else:
+    WINDOWS = False
+    wine_exe = settings.value("wine/exe", "wine")
+    if settings.contains("wine/prefix"):
+        wine_prefix = settings.value("wine/prefix")
+    else:
+        wine_prefix = os.path.join(os.path.expanduser("~"), ".wine")
+    settings_file = settings.fileName()
+    wine_use_optirun = settings.value("wine/use_optirun", False, type=bool)
+
 from config import VERSION as VERSION_STRING
 
 LOGFILE_MAX_SIZE = 256 * 1024  #256kb should be enough for anyone
@@ -16,6 +34,8 @@ UNITS_PREVIEW_ROOT = "http://content.faforever.com/faf/unitsDB/icons/big/"
 
 #These are paths relative to the executable or main.py script
 COMMON_DIR = os.path.join(os.getcwd(), "res")
+if not os.path.exists(COMMON_DIR) and not WINDOWS:
+  COMMON_DIR = os.path.join("/usr", "share", "fafclient")
 
 # These directories are in Appdata (e.g. C:\ProgramData on some Win7 versions)
 if 'ALLUSERSPROFILE' in os.environ:
@@ -58,12 +78,21 @@ REPO_DIR = os.path.join(APPDATA_DIR, "repo")
 if not os.path.exists(REPO_DIR):
     os.makedirs(REPO_DIR)
 
-LOCALFOLDER = os.path.join(os.path.expandvars("%LOCALAPPDATA%"), "Gas Powered Games",
-                           "Supreme Commander Forged Alliance")
-if not os.path.exists(LOCALFOLDER):
-    LOCALFOLDER = os.path.join(os.path.expandvars("%USERPROFILE%"), "Local Settings", "Application Data",
-                               "Gas Powered Games", "Supreme Commander Forged Alliance")
+if WINDOWS:
+    LOCALFOLDER = os.path.join(os.path.expandvars("%LOCALAPPDATA%"), "Gas Powered Games",
+                               "Supreme Commander Forged Alliance")
+    if not os.path.exists(LOCALFOLDER):
+        LOCALFOLDER = os.path.join(os.path.expandvars("%USERPROFILE%"), "Local Settings", "Application Data",
+                                   "Gas Powered Games", "Supreme Commander Forged Alliance")
+else:
+    import getpass
+    LOCALFOLDER = os.path.join(wine_prefix, 'drive_c', 'users', getpass.getuser(), "Local Settings", "Application Data",
+                                   "Gas Powered Games", "Supreme Commander Forged Alliance")
+
 PREFSFILENAME = os.path.join(LOCALFOLDER, "game.prefs")
+if not os.path.exists(PREFSFILENAME):
+    PREFSFILENAME = os.path.join(LOCALFOLDER, "Game.prefs") #fix wrong case on some Linux machines
+
 
 DOWNLOADED_RES_PIX = {}
 DOWNLOADING_RES_PIX = {}
@@ -161,11 +190,6 @@ __theme = None
 __themedir = None
 
 
-# Public settings object
-# Stolen from Config because reasons
-from config import _settings
-settings = _settings
-
 def clean_slate(path):
     if os.path.exists(path):
         logger.info("Wiping " + path)
