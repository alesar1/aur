diff --git a/setup.py b/setup.py
index 8cf2380..41f252e 100644
--- a/setup.py
+++ b/setup.py
@@ -1,120 +1,146 @@
 import os
 import sys
 
-import sip
-from pathlib import Path
-
-sip.setapi('QString', 2)
-sip.setapi('QVariant', 2)
-sip.setapi('QStringList', 2)
-sip.setapi('QList', 2)
-sip.setapi('QProcess', 2)
-
-import PyQt4.uic
-from cx_Freeze import setup, Executable
-
-sys.path.insert(0, "src")
-sys.path.insert(0, "lib")
-
 company_name = 'FAF Community'
 product_name = 'Forged Alliance Forever'
-
-import config.version as version
-import PyQt4.uic
-git_version = version.get_git_version()
-msi_version = version.msi_version(git_version)
-appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
-version.write_release_version(appveyor_build_version)
-
-print('Git version:', git_version,
-      'Release version:', appveyor_build_version,
-      'Build version:', msi_version)
-
-# Ugly hack to fix broken PyQt4
-try:
-    silly_file = Path(PyQt4.__path__[0]) / "uic" / "port_v3" / "proxy_base.py"
-    print("Removing {}".format(silly_file))
-    silly_file.unlink()
-except OSError:
-    pass
-
-
-# Dependencies are automatically detected, but it might need fine tuning.
-build_exe_options = {
-    'include_files': ['res',
-                      'RELEASE-VERSION',
-                      ('lib/uid.dll', 'uid.dll'),
-                      ('lib/qt.conf', 'qt.conf'),
-                      ('lib/xdelta3.exe', 'xdelta3.exe'),
-                      ('lib/lua51.dll', 'lua51.dll')],
-    'icon': 'res/faf.ico',
-    'include_msvcr': False,
-    'optimize': 2,
-    'packages': ['cffi', 'pycparser', 'PyQt4', 'PyQt4.uic',
-                 'PyQt4.QtGui', 'PyQt4.QtNetwork', 'win32com', 'win32com.client'],
-    'silent': True,
-    'excludes': ['numpy', 'scipy', 'matplotlib', 'tcl', 'Tkinter']
-}
-
-shortcut_table = [
-    ('DesktopShortcut',           # Shortcut
-     'DesktopFolder',             # Directory_
-     'FA Forever',                # Name
-     'TARGETDIR',                 # Component_
-     '[TARGETDIR]FAForever.exe',  # Target
-     None,                        # Arguments
-     None,                        # Description
-     None,                        # Hotkey
-     None,                        # Icon
-     None,                        # IconIndex
-     None,                        # ShowCmd
-     'TARGETDIR'                  # WkDir
-     )
-]
-
-target_dir = '[ProgramFilesFolder][ProductName]'
-upgrade_code = '{ADE2A55B-834C-4D8D-A071-7A91A3A266B7}'
-
-if False:  # Beta build
-    product_name += " Beta"
-    upgrade_code = '{2A336240-1D51-4726-B36f-78B998DD3740}'
-
-bdist_msi_options = {
-    'upgrade_code': upgrade_code,
-    'initial_target_dir': target_dir,
-    'add_to_path': False,
-    'data': {'Shortcut': shortcut_table},
-}
-
-# GUI applications require a different base on Windows (the default is for a
-# console application).
-base = None
-if sys.platform == 'win32':
-    base = 'Win32GUI'
-
-exe = Executable(
-    'src/__main__.py',
-    base=base,
-    targetName='FAForever.exe',
-    icon='res/faf.ico',
-    includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
-            "PyQt4.uic.widget-plugins"]
-)
-
-setup(
-    name=product_name,
-    version=msi_version,
-    description='Forged Alliance Forever - Lobby Client',
-    long_description='FA Forever is a community project that allows you to play \
+description='Forged Alliance Forever - Lobby Client'
+long_description='FA Forever is a community project that allows you to play \
 Supreme Commander and Supreme Commander: Forged Alliance online \
 with people across the globe. Provides new game play modes, including cooperative play, \
-ranked ladder play, and featured mods.',
-    author='FA Forever Community',
-    maintainer='Sheeo',
-    url='http://www.faforever.com',
-    license='GNU General Public License, Version 3',
-    options={'build_exe': build_exe_options,
-             'bdist_msi': bdist_msi_options},
-    executables=[exe],
-    requires=['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
-)
+ranked ladder play, and featured mods.'
+author='FA Forever Community'
+maintainer='Sheeo'
+url='http://www.faforever.com'
+license='GNU General Public License, Version 3'
+
+if sys.platform == 'win32':
+    import sip
+    from pathlib import Path
+
+    sip.setapi('QString', 2)
+    sip.setapi('QVariant', 2)
+    sip.setapi('QStringList', 2)
+    sip.setapi('QList', 2)
+    sip.setapi('QProcess', 2)
+
+    import PyQt4.uic
+    from cx_Freeze import setup, Executable
+
+    sys.path.insert(0, "src")
+    sys.path.insert(0, "lib")
+
+    import config.version as version
+    import PyQt4.uic
+    git_version = version.get_git_version()
+    msi_version = version.msi_version(git_version)
+    appveyor_build_version = os.getenv('APPVEYOR_BUILD_VERSION')
+    version.write_release_version(appveyor_build_version)
+
+    print('Git version:', git_version,
+          'Release version:', appveyor_build_version,
+          'Build version:', msi_version)
+
+    # Ugly hack to fix broken PyQt4
+    try:
+        silly_file = Path(PyQt4.__path__[0]) / "uic" / "port_v3" / "proxy_base.py"
+        print("Removing {}".format(silly_file))
+        silly_file.unlink()
+    except OSError:
+        pass
+
+
+    # Dependencies are automatically detected, but it might need fine tuning.
+    build_exe_options = {
+        'include_files': ['res',
+                          'RELEASE-VERSION',
+                          ('lib/uid.dll', 'uid.dll'),
+                          ('lib/qt.conf', 'qt.conf'),
+                          ('lib/xdelta3.exe', 'xdelta3.exe'),
+                          ('lib/lua51.dll', 'lua51.dll')],
+        'icon': 'res/faf.ico',
+        'include_msvcr': False,
+        'optimize': 2,
+        'packages': ['cffi', 'pycparser', 'PyQt4', 'PyQt4.uic',
+                     'PyQt4.QtGui', 'PyQt4.QtNetwork', 'win32com', 'win32com.client'],
+        'silent': True,
+        'excludes': ['numpy', 'scipy', 'matplotlib', 'tcl', 'Tkinter']
+    }
+
+    shortcut_table = [
+        ('DesktopShortcut',           # Shortcut
+         'DesktopFolder',             # Directory_
+         'FA Forever',                # Name
+         'TARGETDIR',                 # Component_
+         '[TARGETDIR]FAForever.exe',  # Target
+         None,                        # Arguments
+         None,                        # Description
+         None,                        # Hotkey
+         None,                        # Icon
+         None,                        # IconIndex
+         None,                        # ShowCmd
+         'TARGETDIR'                  # WkDir
+         )
+    ]
+
+    target_dir = '[ProgramFilesFolder][ProductName]'
+    upgrade_code = '{ADE2A55B-834C-4D8D-A071-7A91A3A266B7}'
+
+    if False:  # Beta build
+        product_name += " Beta"
+        upgrade_code = '{2A336240-1D51-4726-B36f-78B998DD3740}'
+
+    bdist_msi_options = {
+        'upgrade_code': upgrade_code,
+        'initial_target_dir': target_dir,
+        'add_to_path': False,
+        'data': {'Shortcut': shortcut_table},
+    }
+
+    # GUI applications require a different base on Windows (the default is for a
+    # console application).
+    base = None
+    if sys.platform == 'win32':
+        base = 'Win32GUI'
+
+    exe = Executable(
+        'src/__main__.py',
+        base=base,
+        targetName='FAForever.exe' if sys.platform == 'win32' else 'FAForever',
+        icon='res/faf.ico',
+        includes=[os.path.join(os.path.dirname(PyQt4.uic.__file__), "widget-plugins"),
+                "PyQt4.uic.widget-plugins"]
+    )
+
+    setup(
+        name=product_name,
+        version=msi_version,
+        description=description,
+        long_description=long_description,
+        author=author,
+        maintainer=maintainer,
+        url=url,
+        license=license,
+        options={'build_exe': build_exe_options,
+                 'bdist_msi': bdist_msi_options},
+        executables=[exe],
+        requires=['bsdiff4', 'sip', 'PyQt4', 'cx_Freeze', 'cffi', 'py', 'faftools'],
+    )
+else:
+    from distutils.core import setup
+    from setuptools import find_packages
+    product_name = 'fafclient'
+    packages=find_packages()
+    print(packages)
+    setup(
+        name=product_name,
+        version=os.getenv('FAFCLIENT_VERSION'),
+        description=description,
+        long_description=long_description,
+        author=author,
+        maintainer=maintainer,
+        url=url,
+        license=license,
+        packages=packages,
+        #package_dir={'fafclient':'src'}
+    )
+  
diff --git a/src/__main__.py b/src/__main__.py
index 7cc6586..1e40dd4 100644
--- a/src/__main__.py
+++ b/src/__main__.py
@@ -26,6 +26,7 @@ from PyQt4 import QtGui, uic
 path = os.path.join(os.path.dirname(sys.argv[0]), "PyQt4.uic.widget-plugins")
 uic.widgetPluginPath.append(path)
 
+
 # Are we running from a frozen interpreter?
 if getattr(sys, 'frozen', False):
     os.chdir(os.path.dirname(sys.executable))
@@ -37,8 +38,6 @@ else:
     # We need to set the working directory correctly.
 
 import util
-util.COMMON_DIR = os.path.join(os.getcwd(), "res")
-
 import config
 import platform
 
@@ -52,7 +51,9 @@ def excepthook(exc_type, exc_value, traceback_object):
     sys.excepthook = excepthook_original
 
     logger.error("Uncaught exception", exc_info=(exc_type, exc_value, traceback_object))
-    dialog = util.CrashDialog((exc_type, exc_value, traceback_object))
+    from util.crash import CrashDialog
+
+    dialog = CrashDialog((exc_type, exc_value, traceback_object))
     answer = dialog.exec_()
 
     if answer == QtGui.QDialog.Rejected:
diff --git a/src/chat/_chatwidget.py b/src/chat/_chatwidget.py
index 99dae35..9cef9e6 100644
--- a/src/chat/_chatwidget.py
+++ b/src/chat/_chatwidget.py
@@ -8,7 +8,7 @@ logger = logging.getLogger(__name__)
 from PyQt4 import QtGui, QtCore
 from PyQt4.QtNetwork import QNetworkAccessManager, QNetworkRequest
 
-from config import Settings
+from config import Settings, VERSION
 import util
 import fa
 
@@ -251,7 +251,7 @@ class ChatWidget(FormClass, BaseClass, SimpleIRCClient):
         self.autoJoin(self.crucialChannels)
 
     def on_version(self, c, e):
-        self.connection.privmsg(e.source(), "Forged Alliance Forever " + util.VERSION_STRING)
+        self.connection.privmsg(e.source(), "Forged Alliance Forever " + VERSION)
 
     def on_motd(self, c, e):
         self.log_event(e)
diff --git a/src/client/_clientwindow.py b/src/client/_clientwindow.py
index 8e933eb..863c630 100644
--- a/src/client/_clientwindow.py
+++ b/src/client/_clientwindow.py
@@ -7,7 +7,7 @@ from PyQt4.QtNetwork import QAbstractSocket
 import config
 import connectivity
 from base import Client
-from config import Settings
+from config import Settings, VERSION
 import chat
 from client.player import Player
 from client.players import Players
@@ -212,7 +212,7 @@ class ClientWindow(FormClass, BaseClass):
         self.setStyleSheet(util.readstylesheet("client/client.css"))
         self.whatNewsView.setHtml("<body style='background-color: #000;'></body>")
 
-        self.setWindowTitle("FA Forever " + util.VERSION_STRING)
+        self.setWindowTitle("FA Forever " + VERSION)
 
         # Frameless
         self.setWindowFlags(
@@ -749,7 +749,7 @@ class ClientWindow(FormClass, BaseClass):
     @QtCore.pyqtSlot()
     def linkAbout(self):
         dialog = util.loadUi("client/about.ui")
-        dialog.version_label.setText("Version: {}".format(util.VERSION_STRING))
+        dialog.version_label.setText("Version: {}".format(VERSION))
         dialog.exec_()
 
     def saveWindow(self):
diff --git a/src/config/version.py b/src/config/version.py
index 8ee2014..da6a1d9 100644
--- a/src/config/version.py
+++ b/src/config/version.py
@@ -40,7 +40,7 @@ def call_git_describe():
         return line.strip()
     except Exception as e:
         print("Error grabbing git version: {}".format(e))
-        return "0.0.0-dev"
+        return None
 
 def is_development_version(version):
     return "-" in version and not is_prerelease_version(version)
@@ -51,7 +51,9 @@ def is_prerelease_version(version):
 
 def read_release_version():
     try:
-        f = open("RELEASE-VERSION", "r")
+        import util
+        import os.path
+        f = open(os.path.join(util.COMMON_DIR,"RELEASE-VERSION"), "r")
 
         try:
             version = f.readlines()[0]
diff --git a/src/fa/game_process.py b/src/fa/game_process.py
index 9052f31..6260763 100644
--- a/src/fa/game_process.py
+++ b/src/fa/game_process.py
@@ -41,7 +41,15 @@ class GameProcess(QtCore.QProcess):
 
             executable = os.path.join(config.Settings.get('game/bin/path'),
                                       "ForgedAlliance.exe")
-            command = '"' + executable + '" ' + " ".join(arguments)
+            import util
+            if util.WINDOWS:
+                command = '"' + executable + '" ' + " ".join(arguments)
+            else:
+                command = util.wine_cmd_prefix + " " + util.wine_exe + ' "' + executable + '" ' + " ".join(arguments)
+                if util.wine_prefix:
+                    wine_env = QtCore.QProcessEnvironment.systemEnvironment()
+                    wine_env.insert("WINEPREFIX", util.wine_prefix)
+                    QtCore.QProcess.setProcessEnvironment(self, wine_env)
 
             logger.info("Running FA with info: " + str(info))
             logger.info("Running FA via command: " + command)
diff --git a/src/fa/maps.py b/src/fa/maps.py
index 72606f6..b7f7f88 100644
--- a/src/fa/maps.py
+++ b/src/fa/maps.py
@@ -191,13 +191,18 @@ def folderForMap(mapname):
     Returns the folder where the application could find the map
     '''
     if isBase(mapname):
-        return os.path.join(getBaseMapsFolder(), mapname)
-    
-    if os.path.isdir(getUserMapsFolder()):
-        for infile in os.listdir(getUserMapsFolder()) :
-            if infile.lower() == mapname.lower(): 
-                return os.path.join(getUserMapsFolder(), mapname)
+        mapsfolder = getBaseMapsFolder()
+    else:
+        mapsfolder = getUserMapsFolder()
 
+    if not os.path.isdir(mapsfolder):
+        return None
+
+    for infile in os.listdir(mapsfolder):
+        if infile.lower() == mapname.lower():
+            result = os.path.join(mapsfolder, infile)
+            if os.path.isdir(result):
+                return result
     return None
 
 def getBaseMapsFolder():
@@ -250,18 +255,13 @@ def __exportPreviewFromMap(mapname, positions=None):
     largeExists = False
     ddsExists = False
     previews = {"cache":None, "tozip":list()}
-    
-    if os.path.isdir(mapname):
-        mapdir = mapname
-    elif os.path.isdir(os.path.join(getUserMapsFolder(), mapname)):
-        mapdir = os.path.join(getUserMapsFolder(), mapname)
-    elif os.path.isdir(os.path.join(getBaseMapsFolder(), mapname)):
-        mapdir = os.path.join(getBaseMapsFolder(), mapname)
-    else:
+
+    mapdir = folderForMap(mapname)
+    if not mapdir:
         logger.debug("Can't find mapname in file system: " + mapname)
         return previews
         
-    mapname = os.path.basename(mapdir).lower()
+    mapname = os.path.basename(mapdir)
     mapfilename = os.path.join(mapdir, mapname.split(".")[0]+".scmap")
     
     mode = os.stat(mapdir)[0]
diff --git a/src/util/__init__.py b/src/util/__init__.py
index 39d8ebb..6b6ed4c 100644
--- a/src/util/__init__.py
+++ b/src/util/__init__.py
@@ -1,22 +1,42 @@
 import sys
 
 import os
-from ctypes import *
 
 # Developer mode flag
 def developer():
-    return sys.executable.endswith("python.exe")
+    return "python" in sys.executable
 
-from config import VERSION as VERSION_STRING
+import platform
+if platform.system() == "Windows":
+    WINDOWS = True
+else:
+    WINDOWS = False
+
+#This data path is relative to the executable or main.py script
+COMMON_DIR = os.path.join(os.getcwd(), "res")
+if not os.path.exists(COMMON_DIR) and not WINDOWS:
+    # support a separation of the res folder into /usr/share/fafclient
+    COMMON_DIR = os.path.join("/usr", "share", "fafclient")
+
+# Public settings object
+# Stolen from Config because reasons
+from config import _settings
+settings = _settings
+
+# initialize wine settings for non Windows platforms
+if not WINDOWS:
+    wine_exe = settings.value("wine/exe", "wine", type=str)
+    wine_cmd_prefix = settings.value("wine/cmd_prefix", "", type=str)
+    if settings.contains("wine/prefix"):
+        wine_prefix = str(settings.value("wine/prefix", type=str))
+    else:
+        wine_prefix = os.path.join(os.path.expanduser("~"), ".wine")
 
 LOGFILE_MAX_SIZE = 256 * 1024  #256kb should be enough for anyone
 
 
 UNITS_PREVIEW_ROOT = "http://content.faforever.com/faf/unitsDB/icons/big/"
 
-#These are paths relative to the executable or main.py script
-COMMON_DIR = os.path.join(os.getcwd(), "res")
-
 # These directories are in Appdata (e.g. C:\ProgramData on some Win7 versions)
 if 'ALLUSERSPROFILE' in os.environ:
     APPDATA_DIR = os.path.join(os.environ['ALLUSERSPROFILE'], "FAForever")
@@ -58,32 +78,46 @@ REPO_DIR = os.path.join(APPDATA_DIR, "repo")
 if not os.path.exists(REPO_DIR):
     os.makedirs(REPO_DIR)
 
-LOCALFOLDER = os.path.join(os.path.expandvars("%LOCALAPPDATA%"), "Gas Powered Games",
-                           "Supreme Commander Forged Alliance")
-if not os.path.exists(LOCALFOLDER):
-    LOCALFOLDER = os.path.join(os.path.expandvars("%USERPROFILE%"), "Local Settings", "Application Data",
-                               "Gas Powered Games", "Supreme Commander Forged Alliance")
+if WINDOWS:
+    LOCALFOLDER = os.path.join(os.path.expandvars("%LOCALAPPDATA%"), "Gas Powered Games",
+                               "Supreme Commander Forged Alliance")
+    if not os.path.exists(LOCALFOLDER):
+        LOCALFOLDER = os.path.join(os.path.expandvars("%USERPROFILE%"), "Local Settings", "Application Data",
+                                   "Gas Powered Games", "Supreme Commander Forged Alliance")
+else:
+    import getpass
+    LOCALFOLDER = os.path.join(wine_prefix, 'drive_c', 'users', getpass.getuser(), "Local Settings", "Application Data",
+                                   "Gas Powered Games", "Supreme Commander Forged Alliance")
+
 PREFSFILENAME = os.path.join(LOCALFOLDER, "game.prefs")
+if not os.path.exists(PREFSFILENAME):
+    PREFSFILENAME = os.path.join(LOCALFOLDER, "Game.prefs") #fix wrong case on some Linux machines
+
 
 DOWNLOADED_RES_PIX = {}
 DOWNLOADING_RES_PIX = {}
 
 # This should be "My Documents" for most users. However, users with accents in their names can't even use these folders in Supcom
 # so we are nice and create a new home for them in the APPDATA_DIR
-try:
-    os.environ['USERNAME'].decode('ascii')  # Try to see if the user has a wacky username
+if WINDOWS:
+    try:
+        os.environ['USERNAME'].decode('ascii')  # Try to see if the user has a wacky username
 
-    import ctypes
-    from ctypes.wintypes import MAX_PATH
+        import ctypes
+        from ctypes.wintypes import MAX_PATH
 
-    dll = ctypes.windll.shell32
-    buf = ctypes.create_unicode_buffer(MAX_PATH + 1)
-    if dll.SHGetSpecialFolderPathW(None, buf, 0x0005, False):
-        PERSONAL_DIR = (buf.value)
-    else:
-        raise StandardError
-except:
-    PERSONAL_DIR = os.path.join(APPDATA_DIR, "user")
+        dll = ctypes.windll.shell32
+        buf = ctypes.create_unicode_buffer(MAX_PATH + 1)
+        if dll.SHGetSpecialFolderPathW(None, buf, 0x0005, False):
+            PERSONAL_DIR = (buf.value)
+        else:
+            raise StandardError
+    except:
+        # wine points the "My Documents" folder to the users home directory on linux
+        PERSONAL_DIR = os.path.join(APPDATA_DIR, "user")
+else:
+    from os.path import expanduser
+    PERSONAL_DIR = expanduser("~")
 
 #Ensure Application data directories exist
 if not os.path.isdir(APPDATA_DIR):
@@ -161,11 +195,6 @@ __theme = None
 __themedir = None
 
 
-# Public settings object
-# Stolen from Config because reasons
-from config import _settings
-settings = _settings
-
 def clean_slate(path):
     if os.path.exists(path):
         logger.info("Wiping " + path)
@@ -200,7 +229,8 @@ def setTheme(theme, restart=True):
         test_dir = os.path.join(THEME_DIR, theme)
         if os.path.isdir(test_dir):
             version_file = os.path.join(THEME_DIR, theme, "version")
-            if os.path.isfile(version_file) and (VERSION_STRING == open(version_file).read()):
+            from config import VERSION
+            if os.path.isfile(version_file) and (VERSION == open(version_file).read()):
                 logger.info("Using theme: " + theme + " in directory " + test_dir)
                 __themedir = test_dir
                 __theme = theme
@@ -605,5 +635,3 @@ def datetostr(d):
 def now():
     return _dateDummy.now()
 
-from crash import CrashDialog
-
diff --git a/src/util/crash.py b/src/util/crash.py
index 47e232d..a675b12 100644
--- a/src/util/crash.py
+++ b/src/util/crash.py
@@ -2,9 +2,9 @@
 import config
 import traceback
 import util
-from config import Settings
+from config import Settings, VERSION
 
-from . import APPDATA_DIR, PERSONAL_DIR, VERSION_STRING, LOG_FILE_FAF, \
+from . import APPDATA_DIR, PERSONAL_DIR, LOG_FILE_FAF, \
     readlines
 
 from PyQt4 import QtGui, QtCore
@@ -46,7 +46,7 @@ class CrashDialog(QtGui.QDialog):
         description = u""
         try:
             description += (u"\n**FAF Username:** " + CRASH_REPORT_USER)
-            description += (u"\n**FAF Version:** " + VERSION_STRING)
+            description += (u"\n**FAF Version:** " + VERSION)
             description += (u"\n**FAF Environment:** " + config.environment)
             description += (u"\n**FAF Directory:** " + APPDATA_DIR)
             description += (u"\n**FA Path:** " + str(util.settings.value("ForgedAlliance/app/path", None, type=str)))
