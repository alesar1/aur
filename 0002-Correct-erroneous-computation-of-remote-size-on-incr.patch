From deee4526fe95277436fa14ee69d04712a2e5a082 Mon Sep 17 00:00:00 2001
From: "Eric S. Raymond" <esr@thyrsus.com>
Date: Thu, 10 Jun 2021 07:02:25 -0400
Subject: [PATCH 2/2] Correct erroneous computation of remote size on
 incremental mirroring.

---
 tool/repotool.go | 41 +++++++++++++++++++++++++++--------------
 1 file changed, 27 insertions(+), 14 deletions(-)

diff --git a/tool/repotool.go b/tool/repotool.go
index 9145f9d4..fb40eef4 100644
--- a/tool/repotool.go
+++ b/tool/repotool.go
@@ -477,7 +477,8 @@ func mirror(args []string) {
 	}
 	username := os.Getenv("RUSERNAME")
 	password := os.Getenv("RPASSWORD")
-	// Gets commit length of a repo from its URL
+	// Gets commit length of a Subversion repo from its URL. Can be run
+	// on a local mirror directory.
 	reposize := func(operand string) int {
 		if !strings.HasPrefix(operand, "svn://") && !strings.HasPrefix(operand, "file://") {
 			if operand[0] != '/' {
@@ -539,28 +540,40 @@ func mirror(args []string) {
 			baton.Write([]byte{'\n'}) // Kludge, FIXME
 		}
 		baton.endProgress()
+		// Stash the remote URL in the mirror directory
+		// so that when mirroring incrementally we can query its size.
+		if ioutil.WriteFile(filepath.Join(locald, "REMOTE-URL"), []byte(operand), 0644) != nil {
+			log.Fatal("couldn't stash remote repository URL in REMOTE-URL")
+		}
 	} else if isdir(filepath.Join(operand, "locks")) {
 		if operand[0] == os.PathSeparator {
 			locald = operand
 		} else {
 			locald = filepath.Join(pwd, operand)
 		}
-		baton := newBaton(!quiet, func(s string) {})
-		remotesize := reposize(operand)
-		localsize := reposize(fmt.Sprintf("file://%s", locald))
-		baton.startProgress("Mirroring", uint64(remotesize-localsize))
 		cmd := fmt.Sprintf("svnsync synchronize -q --steal-lock file://%s", locald)
-		ind := 0
-		runMonitoredProcessOrDie(cmd, "mirroring", func(line string) {
-			if strings.Contains(line, "Committed revision") {
-				ind++
-				baton.percentProgress(uint64(ind))
+		if remote, err := ioutil.ReadFile(filepath.Join(locald, "REMOTE-URL")); err != nil {
+			// Without the stashed remote size we can't progress-meter
+			runShellProcessOrDie(cmd, "mirroring")
+		} else {
+			// Have remote size, we can progress-meter,
+			// this makes long resyncs more bearable.
+			baton := newBaton(!quiet, func(s string) {})
+			remotesize := reposize(string(remote))
+			localsize := reposize(locald)
+			baton.startProgress("Mirroring", uint64(remotesize-localsize))
+			ind := 0
+			runMonitoredProcessOrDie(cmd, "mirroring", func(line string) {
+				if strings.Contains(line, "Committed revision") {
+					ind++
+					baton.percentProgress(uint64(ind))
+				}
+			})
+			if !quiet {
+				baton.Write([]byte{'\n'}) // Kludge, FIXME
 			}
-		})
-		if !quiet {
-			baton.Write([]byte{'\n'}) // Kludge, FIXME
+			baton.endProgress()
 		}
-		baton.endProgress()
 	} else if strings.HasPrefix(operand, "rsync://") {
 		if mirrordir == "" {
 			locald = filepath.Join(pwd, filepath.Base(operand)+"-mirror")
-- 
2.32.0

