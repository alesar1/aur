--- ROCclr-rocm-4.5.0/device/rocm/rocblit.cpp	2021-11-25 22:38:12.837707706 +0100
+++ ROCclr-rocm-4.5.0/device/rocm/rocblit.cpp	2021-11-25 22:40:00.699796341 +0100
@@ -460,7 +460,7 @@
               std::this_thread::get_id(), (wait_events.size() != 0) ? wait_events[0].handle : 0,
               active.handle);
       hsa_status_t status = hsa_amd_memory_async_copy_rect(&dstMem, &offset,
-          &srcMem, &offset, &dim, agent, direction, wait_events.size(), &wait_events[0], active);
+          &srcMem, &offset, &dim, agent, direction, wait_events.size(), wait_events.data(), active);
       if (status != HSA_STATUS_SUCCESS) {
         gpu().Barriers().ResetCurrentSignal();
         LogPrintfError("DMA buffer failed with code %d", status);
@@ -484,7 +484,7 @@
           hsa_status_t status = hsa_amd_memory_async_copy(
               (reinterpret_cast<address>(dst) + dstOffset), dstAgent,
               (reinterpret_cast<const_address>(src) + srcOffset), srcAgent,
-              size[0], wait_events.size(), &wait_events[0], active);
+              size[0], wait_events.size(), wait_events.data(), active);
           if (status != HSA_STATUS_SUCCESS) {
             gpu().Barriers().ResetCurrentSignal();
             LogPrintfError("DMA buffer failed with code %d", status);
@@ -671,7 +671,7 @@
           active.handle);
 
   status = hsa_amd_memory_async_copy(dst, dstAgent, src, srcAgent,
-      size[0], wait_events.size(), &wait_events[0], active);
+      size[0], wait_events.size(), wait_events.data(), active);
   if (status == HSA_STATUS_SUCCESS) {
     gpu().addSystemScope();
   } else {
