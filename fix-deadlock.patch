Only in KDocker: .git
Only in KDocker: .gitattributes
Only in KDocker: .gitignore
diff --unified --recursive --text KDocker-5.3/src/application.cpp KDocker/src/application.cpp
--- KDocker-5.3/src/application.cpp	2020-03-10 10:04:31.000000000 -0400
+++ KDocker/src/application.cpp	2022-04-04 17:06:38.897419076 -0400
@@ -18,19 +18,40 @@
  */
 
 #include "application.h"
+#include <sys/socket.h>
+#include <unistd.h>
 
+int Application::m_closeSignalFd[2];
 
 Application::Application(const QString &appId, int &argc, char **argv) : QtSingleApplication(appId, argc, argv) {
     m_kdocker = 0;
+
+    // Translate UNIX signals to Qt signals (See https://doc.qt.io/qt-5/unix-signals.html)
+    if (::socketpair(AF_UNIX, SOCK_STREAM, 0, m_closeSignalFd))
+       qFatal("Couldn't create signal handling socketpair");
+
+    m_closeSignalSocketNotifier = new QSocketNotifier(m_closeSignalFd[1], QSocketNotifier::Read, this);
+    connect(m_closeSignalSocketNotifier, SIGNAL(activated(QSocketDescriptor)), this, SLOT(handleCloseSignal()));
 }
 
 void Application::setKDockerInstance(KDocker *kdocker) {
     m_kdocker = kdocker;
 }
 
-void Application::close() {
+void Application::notifyCloseSignal() {
+    char tmp = 1;
+    ::write(m_closeSignalFd[0], &tmp, sizeof(tmp));
+}
+
+void Application::handleCloseSignal() {
+    m_closeSignalSocketNotifier->setEnabled(false);
+    char tmp;
+    ::read(m_closeSignalFd[1], &tmp, sizeof(tmp));
+
     if (m_kdocker) {
         m_kdocker->undockAll();
     }
     quit();
+
+    m_closeSignalSocketNotifier->setEnabled(true);
 }
diff --unified --recursive --text KDocker-5.3/src/application.h KDocker/src/application.h
--- KDocker-5.3/src/application.h	2020-03-10 10:04:31.000000000 -0400
+++ KDocker/src/application.h	2022-04-04 17:06:38.897419076 -0400
@@ -21,6 +21,7 @@
 #define	_APPLICATION_H
 
 #include <QtSingleApplication>
+#include <QSocketNotifier>
 
 #include "kdocker.h"
 
@@ -32,10 +33,16 @@
     Application(const QString &appId, int &argc, char **argv);
 
     void setKDockerInstance(KDocker *kdocker);
-    void close();
+    void notifyCloseSignal();
+
+public slots:
+    void handleCloseSignal();
 
 private:
     KDocker *m_kdocker;
+
+    static int m_closeSignalFd[2];
+    QSocketNotifier *m_closeSignalSocketNotifier;
 };
 
 #endif	/* _APPLICATION_H */
diff --unified --recursive --text KDocker-5.3/src/main.cpp KDocker/src/main.cpp
--- KDocker-5.3/src/main.cpp	2020-03-10 10:04:31.000000000 -0400
+++ KDocker/src/main.cpp	2022-04-04 17:06:38.897419076 -0400
@@ -33,7 +33,7 @@
 static void sighandler(int sig) {
     Q_UNUSED(sig);
 
-    dynamic_cast<Application*> (qApp)->close();
+    dynamic_cast<Application*> (qApp)->notifyCloseSignal();
 }
 
 int main(int argc, char *argv[]) {
