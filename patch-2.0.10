diff --git a/config.pri b/config.pri
index 48273f9e..28d46105 100644
--- a/config.pri
+++ b/config.pri
@@ -327,23 +327,21 @@ contains(PRESET, linux_package) {
            }
         }
 
         system (ls /usr/lib*/libqwtplot3d-qt4.so) {
          LIBS+=-lqwtplot3d-qt4
         } else {
          LIBS+=-lqwtplot3d
         }
     }
 
-        INCLUDEPATH = "$(HOME)/usr/include" $$INCLUDEPATH
-        QMAKE_LIBDIR = "$(HOME)/usr/lib" $$QMAKE_LIBDIR
-
+        INCLUDEPATH = "/usr/include/classdesc" $$INCLUDEPATH
 
 	LIBS         += -lz -lGLU 
 
 	INCLUDEPATH  += /usr/include/muParser
 	LIBS         += -lgsl -lgslcblas
 	LIBS         += -lmuparser
 
   # disable this warning because StringList has a user defined constructor, but hasn't bother to declare an assignment operator
   QMAKE_CXXFLAGS+="-Wno-deprecated-copy"
 
diff --git a/libscidavis/src/ApplicationWindow.cpp b/libscidavis/src/ApplicationWindow.cpp
index ccb84a07..4b60716b 100644
--- a/libscidavis/src/ApplicationWindow.cpp
+++ b/libscidavis/src/ApplicationWindow.cpp
@@ -2648,21 +2648,21 @@ TableStatistics *ApplicationWindow::newTableStatistics(Table *base, int type, QL
 	connect(base, SIGNAL(modifiedData(Table*,const QString&)), s, SLOT(update(Table*,const QString&)));
 	connect(base, SIGNAL(changedColHeader(const QString&, const QString&)), s, SLOT(renameCol(const QString&, const QString&)));
 	connect(base, SIGNAL(removedCol(const QString&)), s, SLOT(removeCol(const QString&)));
 	connect(base->d_future_table, SIGNAL(aspectAboutToBeRemoved(const AbstractAspect *)), 
 			this, SLOT(removeDependentTableStatistics(const AbstractAspect *)));
 	return s;
 }
 
 void ApplicationWindow::removeDependentTableStatistics(const AbstractAspect *aspect)
 {
-	future::Table *future_table = qobject_cast<future::Table *>(const_cast<AbstractAspect *>(aspect));
+	::future::Table *future_table = qobject_cast<::future::Table *>(const_cast<AbstractAspect *>(aspect));
 	if (!future_table) return;
 	QList<MyWidget*> windows = windowsList();
 	foreach(MyWidget *win, windows)
 	{
 		TableStatistics *table_stat = qobject_cast<TableStatistics *>(win);
 		if (!table_stat) continue;
 		Table *table = qobject_cast<Table *>(future_table->view());
 		if (!table) continue;
 		if (table_stat->base() == table)
 			d_project->removeChild(table_stat->d_future_table);
@@ -13977,44 +13977,44 @@ void ApplicationWindow::selectPlotType(int type)
 	if (ml) {
 		Graph *g = ml->activeGraph();
 		if(g->curves() > 0)
 			g->setCurveType(g->curves()-1, (Graph::CurveType)type);
 	}
 }
 
 void ApplicationWindow::handleAspectAdded(const AbstractAspect *parent, int index)
 {
 	AbstractAspect * aspect = parent->child(index);
-	future::Matrix * matrix = qobject_cast<future::Matrix *>(aspect);
+	::future::Matrix * matrix = qobject_cast<::future::Matrix *>(aspect);
 	if (matrix)
 	{
 		initMatrix(static_cast<Matrix *>(matrix->view()));
 		return;
 	}
-	future::Table * table = qobject_cast<future::Table *>(aspect);
+	::future::Table * table = qobject_cast<::future::Table *>(aspect);
 	if (table)
 	{
 		initTable(static_cast<Table *>(table->view()));
 		return;
 	}
 }
 
 void ApplicationWindow::handleAspectAboutToBeRemoved(const AbstractAspect *parent, int index)
 {
 	AbstractAspect * aspect = parent->child(index);
-	future::Matrix * matrix = qobject_cast<future::Matrix *>(aspect);
+	::future::Matrix * matrix = qobject_cast<::future::Matrix *>(aspect);
 	if (matrix)
 	{
 		closeWindow(static_cast<Matrix *>(matrix->view()));
 		return;
 	}
-	future::Table * table = qobject_cast<future::Table *>(aspect);
+	::future::Table * table = qobject_cast<::future::Table *>(aspect);
 	if (table)
 	{
 		closeWindow(static_cast<Table *>(table->view()));
 		return;
 	}
 }
 
 void ApplicationWindow::showHistory()
 {
 	if (!d_project->undoStack()) return;
@@ -14035,16 +14035,16 @@ void ApplicationWindow::showHistory()
 
 	dialog.setWindowTitle(tr("Undo/Redo History"));
 	if (dialog.exec() == QDialog::Accepted)
 		return;
 
 	d_project->undoStack()->setIndex(index);
 }
 
 QStringList ApplicationWindow::tableWindows()
 {
-	QList<AbstractAspect *> tables = d_project->descendantsThatInherit("future::Table");
+	QList<AbstractAspect *> tables = d_project->descendantsThatInherit("::future::Table");
 	QStringList result;
 	foreach(AbstractAspect *aspect, tables)
           result.append(aspect->name().c_str());
 	return result;
 }
diff --git a/libscidavis/src/future/core/Project.h b/libscidavis/src/future/core/Project.h
index 985e8c37..d0ef2e68 100644
--- a/libscidavis/src/future/core/Project.h
+++ b/libscidavis/src/future/core/Project.h
@@ -36,21 +36,21 @@
 class QString;
 class ProjectWindow;
 class QAction;
 class AbstractScriptingEngine;
 
 //! Represents a SciDAVis project.
 /**
  * Project manages an undo stack and is responsible for creating ProjectWindow instances
  * as views on itself.
  */
-class Project : public future::Folder
+class Project : public ::future::Folder
 {
 	Q_OBJECT
 
 	public:
 		//! MDI subwindow visibility setting
 		enum MdiWindowVisibility
 		{
 			folderOnly,
 			folderAndSubfolders,
 			allMdiWindows
@@ -66,21 +66,21 @@ class Project : public future::Folder
 		virtual Project *project() { return this; }
 		virtual QUndoStack *undoStack() const;
 		virtual QString path() const { return ""; }
 #ifndef LEGACY_CODE_0_2_x
 		virtual ProjectWindow *view();
 #else
 		virtual void *view();
 #endif
 		virtual QMenu *createContextMenu() const;
 		//@}
-		virtual QMenu *createFolderContextMenu(const future::Folder * folder) const;
+		virtual QMenu *createFolderContextMenu(const ::future::Folder * folder) const;
 
 		AbstractScriptingEngine * scriptingEngine() const;
 
 		void setMdiWindowVisibility(MdiWindowVisibility visibility);
 		MdiWindowVisibility mdiWindowVisibility() const;
 		void setFileName(const QString & file_name);
 		QString fileName() const;
 	
 		static ConfigPageWidget * makeConfigPage();
 		static QString configPageLabel();
diff --git a/scidavis/scidavis.pro b/scidavis/scidavis.pro
index 2e642cab..abfbef17 100644
--- a/scidavis/scidavis.pro
+++ b/scidavis/scidavis.pro
@@ -10,21 +10,21 @@ POST_TARGETDEPS=../libscidavis/libscidavis.a
 
 include(../config.pri)
 include( basic.pri )
 python {
   PYTHONBIN = $$(PYTHON)
   isEmpty( PYTHONBIN ) {
     PYTHONBIN = python3
   }
   unix: {
         LIBS+=$$system($$PYTHONBIN findBoostPythonLib.py)
-        LIBS+=$$system($$PYTHONBIN-config --ldflags)
+        LIBS+=$$system($$PYTHONBIN-config --libs --embed)
       }
   message($$LIBS)
            
   compiledScidavisrc.target = scidavisrc.pyc
   compiledScidavisrc.depends = scidavisrc.py
   compiledScidavisrc.commands = $$PYTHONBIN -m py_compile scidavisrc.py
   compiledScidavisUtil.target = scidavisUtil.pyc
   compiledScidavisUtil.depends = scidavisUtil.py
   compiledScidavisUtil.commands = $$PYTHONBIN -m py_compile scidavisUtil.py
   QMAKE_EXTRA_TARGETS += compiledScidavisrc compiledScidavisUtil
