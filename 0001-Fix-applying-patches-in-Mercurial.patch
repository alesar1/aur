From d85eee55643954bd902611488a1325e6163f4dde Mon Sep 17 00:00:00 2001
From: Christian Hammond <christian@beanbaginc.com>
Date: Mon, 30 May 2022 01:31:18 -0700
Subject: [PATCH] Fix applying patches in Mercurial.

A change in RBTools 3.1 resulted in a duplicate `with_errors=` argument
passed to `execute()` in `apply_patch()`. `MercurialClient._execute()`
was explicitly setting this and also allowing any arbitrary `**kwargs`
to be passed in. This was missed due to lack of unit testing.

This changes `_execute()` to take in `with_errors` as an argument with
the default we want to set. It also adds unit testing for
`apply_patch()` to ensure this code path does not regress.
---
 rbtools/clients/mercurial.py            | 11 +++-
 rbtools/clients/tests/test_mercurial.py | 82 ++++++++++++++++++++++++-
 2 files changed, 89 insertions(+), 4 deletions(-)

diff --git a/rbtools/clients/mercurial.py b/rbtools/clients/mercurial.py
index 84a51d8..e8f6ca2 100644
--- a/rbtools/clients/mercurial.py
+++ b/rbtools/clients/mercurial.py
@@ -1176,13 +1176,20 @@ class MercurialClient(SCMClient):
 
         return None
 
-    def _execute(self, cmd, *args, **kwargs):
+    def _execute(self, cmd, with_errors=False, *args, **kwargs):
         """Execute an hg command.
 
         Args:
             cmd (list of unicode):
                 A command line to execute.
 
+            with_errors (bool, optional):
+                Whether to combine the output and error streams of the command
+                together into a single return value.
+
+                Unlike in :py:`rbtools.utils.process.execute`, this defaults
+                to ``False``.
+
             *args (list):
                 Addditional arguments to pass to
                 :py:func:`rbtools.utils.process.execute`.
@@ -1210,7 +1217,7 @@ class MercurialClient(SCMClient):
             'extensions.rbtoolsnormalize=%s' % self._hgext_path
         ]
 
-        return execute(cmd, with_errors=False, *args, **kwargs)
+        return execute(cmd, with_errors=with_errors, *args, **kwargs)
 
     def has_pending_changes(self):
         """Check if there are changes waiting to be committed.
diff --git a/rbtools/clients/tests/test_mercurial.py b/rbtools/clients/tests/test_mercurial.py
index 0b86809..37231d3 100644
--- a/rbtools/clients/tests/test_mercurial.py
+++ b/rbtools/clients/tests/test_mercurial.py
@@ -12,9 +12,10 @@ from hashlib import md5
 from random import randint
 from textwrap import dedent
 
-from kgb import SpyAgency
+import kgb
 from six.moves import range
 
+import rbtools.helpers
 from rbtools.clients import RepositoryInfo
 from rbtools.clients.errors import CreateCommitError, MergeError
 from rbtools.clients.mercurial import MercurialClient, MercurialRefType
@@ -25,6 +26,10 @@ from rbtools.utils.filesystem import is_exe_in_path, load_config
 from rbtools.utils.process import execute
 
 
+hgext_path = os.path.abspath(os.path.join(rbtools.helpers.__file__, '..',
+                                          'hgext.py'))
+
+
 class MercurialTestCase(SCMClientTestCase):
     """Base class for all Mercurial unit tests."""
 
@@ -95,7 +100,7 @@ class MercurialTestCase(SCMClientTestCase):
             self.run_hg(['tag', tag])
 
 
-class MercurialClientTests(SpyAgency, MercurialTestCase):
+class MercurialClientTests(kgb.SpyAgency, MercurialTestCase):
     """Unit tests for MercurialClient."""
 
     TESTSERVER = 'http://127.0.0.1:8080'
@@ -1388,6 +1393,79 @@ class MercurialClientTests(SpyAgency, MercurialTestCase):
                               message='commit message',
                               author=self.AUTHOR)
 
+    def test_apply_patch(self):
+        """Testing MercurialClient.apply_patch"""
+        client = self.client
+
+        self.spy_on(execute,
+                    op=kgb.SpyOpReturn((0, b'test')))
+
+        result = client.apply_patch(patch_file='test.diff')
+
+        self.assertSpyCalledWith(
+            execute,
+            [
+                'hg', 'patch', '--no-commit', 'test.diff',
+                '--config', 'extensions.rbtoolsnormalize=%s' % hgext_path,
+            ],
+            with_errors=True,
+            return_error_code=True,
+            results_unicode=False)
+
+        self.assertTrue(result.applied)
+        self.assertFalse(result.has_conflicts)
+        self.assertEqual(result.conflicting_files, [])
+        self.assertEqual(result.patch_output, b'test')
+
+    def test_apply_patch_with_p(self):
+        """Testing MercurialClient.apply_patch with p="""
+        client = self.client
+
+        self.spy_on(execute,
+                    op=kgb.SpyOpReturn((0, b'test')))
+
+        result = client.apply_patch(patch_file='test.diff',
+                                    p='1')
+
+        self.assertSpyCalledWith(
+            execute,
+            [
+                'hg', 'patch', '--no-commit', '-p', '1', 'test.diff',
+                '--config', 'extensions.rbtoolsnormalize=%s' % hgext_path,
+            ],
+            with_errors=True,
+            return_error_code=True,
+            results_unicode=False)
+
+        self.assertTrue(result.applied)
+        self.assertFalse(result.has_conflicts)
+        self.assertEqual(result.conflicting_files, [])
+        self.assertEqual(result.patch_output, b'test')
+
+    def test_apply_patch_with_error(self):
+        """Testing MercurialClient.apply_patch with error"""
+        client = self.client
+
+        self.spy_on(execute,
+                    op=kgb.SpyOpReturn((1, b'bad')))
+
+        result = client.apply_patch(patch_file='test.diff')
+
+        self.assertSpyCalledWith(
+            execute,
+            [
+                'hg', 'patch', '--no-commit', 'test.diff',
+                '--config', 'extensions.rbtoolsnormalize=%s' % hgext_path,
+            ],
+            with_errors=True,
+            return_error_code=True,
+            results_unicode=False)
+
+        self.assertFalse(result.applied)
+        self.assertFalse(result.has_conflicts)
+        self.assertEqual(result.conflicting_files, [])
+        self.assertEqual(result.patch_output, b'bad')
+
     def _hg_get_tip(self):
         """Return the revision at the tip of the branch.
 
-- 
2.32.1 (Apple Git-133)

