unchanged:
--- a/src/shapes/ply/ply_parser.hpp
+++ b/src/shapes/ply/ply_parser.hpp
@@ -31,6 +31,10 @@
 #define ADT_WORKAROUND 1
 #endif
 
+#if defined(linux) && __GNUC__ > 5
+#define ADT_WORKAROUND 1
+#endif
+
 #if MTS_USE_BOOST_TR1
 #include <boost/tr1/functional.hpp>
 #include <boost/tr1/memory.hpp>
only in patch2:
unchanged:
--- a/src/bsdfs/irawan.h
+++ b/src/bsdfs/irawan.h
@@ -311,10 +313,10 @@ template <typename Iterator> struct YarnGrammar : qi::grammar<Iterator, Yarn(),
 
 		spec = ((lit("{") >> Float_ >> lit(",") >> Float_ >> lit(",") >> Float_ >> lit("}")) 
 					[ ph::bind(&Spectrum::fromLinearRGB, _val, _1, _2, _3, Spectrum::EReflectance) ])
-		     | (identifier [ _val = ph::bind(&Properties::getSpectrum, ph::ref(props), _1)]);
+             | (identifier [ _val = ph::bind(static_cast<Spectrum(Properties::*)(const std::string&)const>(&Properties::getSpectrum), ph::ref(props), _1)]);
 
 		flt = (Float_ [ _val = _1 ])
-		    | (identifier [ _val = ph::bind(&Properties::getFloat, ph::ref(props), _1)]);
+            | (identifier [ _val = ph::bind(static_cast<Float(Properties::*)(const std::string&)const>(&Properties::getFloat), ph::ref(props), _1)]);
 
 		start = lit("yarn")
 			>> lit("{")
@@ -364,7 +366,7 @@ template <typename Iterator> struct WeavePatternGrammar : qi::grammar<Iterator,
 			>> *(qi::alnum | char_('_')) ];
 
 		flt = (Float_ [ _val = _1 ])
-		      | (identifier [ _val = ph::bind(&Properties::getFloat, ph::ref(props), _1)]);
+              | (identifier [ _val = ph::bind(static_cast<Float(Properties::*)(const std::string&)const>(&Properties::getFloat), ph::ref(props), _1)]);
 
 		start = lit("weave") >> lit("{") >> (
 			  lit("name")               >> lit("=") >> name   [ ph::bind(&WeavePattern::name,               _val) = _1  ]
