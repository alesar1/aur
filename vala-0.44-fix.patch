--- a/src/vapis/libalpm.vapi
+++ b/src/vapis/libalpm.vapi
@@ -38,9 +38,9 @@
	}
	public int capabilities();

-	public unowned Package? find_satisfier(Alpm.List<Package> pkgs, string depstring);
+	public unowned Package? find_satisfier(Alpm.List<unowned Package> pkgs, string depstring);

-	public unowned Package? pkg_find(Alpm.List<Package> haystack, string needle);
+	public unowned Package? pkg_find(Alpm.List<unowned Package> haystack, string needle);

	public int pkg_vercmp(string a, string b);

@@ -48,7 +48,7 @@
	 * If a member exists in several databases, only the first database is used.
	 * IgnorePkg is also handled.
	 */
-	public Alpm.List<unowned Package?> find_group_pkgs(Alpm.List<DB> dbs, string name);
+	public Alpm.List<unowned Package?> find_group_pkgs(Alpm.List<unowned DB> dbs, string name);

	/** Returns the string corresponding to an error number. */
	public unowned string strerror(Errno err);
@@ -252,7 +252,7 @@
		public string? fetch_pkgurl(string url);

		[CCode (cname = "alpm_find_dbs_satisfier")]
-		public unowned Package? find_dbs_satisfier(Alpm.List<DB> dbs, string depstring);
+		public unowned Package? find_dbs_satisfier(Alpm.List<unowned DB> dbs, string depstring);

		/** Returns the current error code from the handle. */
		[CCode (cname = "alpm_errno")]
@@ -380,7 +380,7 @@

		public unowned Package? get_pkg(string name);
		public unowned Group? get_group(string name);
-		public Alpm.List<unowned Package> search(Alpm.List<string> needles);
+		public Alpm.List<unowned Package> search(Alpm.List<unowned string> needles);

		public int check_pgp_signature(out SigList siglist);
	}
@@ -550,7 +550,7 @@
		public Alpm.List<string> compute_optionalfor();

		[CCode (cname = "alpm_sync_newversion")]
-		public unowned Package? sync_newversion(Alpm.List<DB> dbs);
+		public unowned Package? sync_newversion(Alpm.List<unowned DB> dbs);

		public int check_pgp_signature(out SigList siglist);
	}