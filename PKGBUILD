# Maintainer: Chris Severance aur.severach aATt spamgourmet dott com
# Category: devel

# Todo: service for Pro/5 DataServer

# Basis bug: BLM is hard coded to use /usr/tmp (fixed herein)
# Basis bug: some Basis scripts have cosmetic errors (fixed herein)

# Build instructions:

# This PKGBUILD does not automatically download all files. Basis does not make
# all files available as direct links. It is not necessary to have a license
# to download, install, and run Pro/5. Without a license you get nag screens.

# At the Basis web site click Products, Downloads
# Choose a BASIS product: Pro/5
#   Platform: Linux
#   OS Level: Linux Kernel 2.6.17-1.2142_FC4+ AND glibc v2.3+ [Port 1045]
#   Revision: Latest or any
#   License Type: (*) Update existing software. (No license delivered.)
#     (Licensing will be handled during install. You may need to call Basis.)
#   Enter info... Download Product
#   Repeat for 64 bit: Linux Kernel v2.6+ AND glibc v2.3+ [Port 6045] - 64-bit
# Choose a BASIS product: Pro/5 Data Server
#   Repeat above for 1245 & 6245
# Place the 4 files in with PKGBUILD
# The BLM is downloaded automatically.

# If you already have license files, run "makepkg -oc" and place them
# in the appropriate z folders. This allows them to be built into the package
# for easy installs and upgrades. See below for files and folders.

# License concepts: (for those who aren't familiar with Macrovision FlexLM)

# The only product that requires a license file generated by Basis is the
# Basis License Manager (BLM). Every site must run at least one
# BLM server. A single BLM server on the same machine that runs Pro/5 is
# typical to get started. Developers may have a separate BLM server
# from production BLM servers.

# It is not necessary to have a functioning BLM server to try Pro/5. You can
# test suitability, functionality, run, extract data, and edit programs.
# Once your BLM server is licensed and running you can point your Pro/5
# installs to it and they will become fully functional without nag screens.

# While the BLM license is locked to the BLM server the HostID was generated
# on, BLM license checkout for Pro/5 instances are not machine locked,
# platform or OS specific. You can run Pro/5 on as many different machines
# and OS as you like. You can try other platforms to see if they are better
# suited to your needs. All you need is a BLM server with available licenses
# to point to. This PKGBUILD only handles Arch Linux.

# BLM License file security content may improve over time. Newer revisions
# of Pro/5 may require features not found in old license files or BLM servers.
# Contact Basis for an updated license file or for BLM server changes.
# Older revisions of Pro/5 are expected to run with newer licenses
# and BLM servers.

# Developer only licenses are available at a low yearly price.
# This is highly recommended for active developers.
# * You get get all features enabled. Good for testing to determine
#   whether a better licenses for production would be worthwhile.
# * You don't get kicked when the production BLM servers restart,
#   crash, or run out of licenses.
# * You don't consume one or more full licenses needed for users
#   on production systems.
# * If you develop on production systems you can use an altered
#   Pro/5 SERVER configuration so your runs use licenses from
#   the BLM serving your developers license.

# Install instructions

# Quick:
# * Purchase license
# * install basis-pro5 package
# * run BLM installer
# * install basis-pro5 package
# * start the BLM service
# * configure Pro/5 installations to use BLM server
# * copy the licenses to the PKGBUILD folder
# * remake the package with the licenses inside

# There are two installers. "./install" is found in /usr/local/basis.
# The "BLM installer" is in the build folder. Some functionality is offered
# by both installers but only works properly in one of them.

# 1. Purchase a license from Basis or a reseller. You are sent:
#    A. Order confirmation
#    B. Instructions with Serial and Authorization.
#
# 2. Install the basis-pro5 package.
#
# 3. Run the BLM installer.
# The BLM installer requires the Oracle Java JDK.
# Oracle JRE is not recommended and OpenJDK will not work.
# The right version will be installed by the basis-pro5 package.
# The BLM installer will run in GUI or Text mode.
#   sudo java -jar BLM1600_03-11-2016_1203.jar
#
# You can overwrite the files in /usr/local/basis/blmgr
# The server should be provided Internet access. The BLM installer will
# submit the serial and auth and retrieve the license.
# Stop at step "Configure BLM Startup"

# The first time the license is activated, the activated license for your BLM
# can be returned in as little as two minutes. If the license has already been
# activated and you're changing the BLM server to another system, you may need
# to call Basis to have your activation reset. This may require an active SAM
# plan or a one time fee. A license request without an activation reset will
# get you a license but it's only good for 7 days as a emergency license. Check
# your expiry date and if it's 7 days, plan on some time on the phone to get
# the licensing straightened out before the nag screens come up again.

# Note: Some licenses require periodic reactivation and Internet access to the
# server. See http://documentation.basis.com/BASISHelp/WebHelp/inst/basis_license_types.htm
#
# 4. Install the basis-pro5 package again to replace some patched files
# overwritten by the BLM installer.
# If you submitted by email, from ./install select: BLM, INSTALL
# Specify the .txt file you received. Enable and start your BLM with the
# systemctl commands below.
#
# 5. On all your Pro/5 installations run ./install and select
# PRO5, SERVER
# and specify the IP or DNS name of your running BLM server.

# Once installed you can copy the license files into your build folder
# for faster installs. Copy these files from /usr/local/basis into the
# package folder and make the package again.

# blmgr/*.lic -> zblmgr/
# blmgr/Register.properties -> zblmgr/
# pro5/BASIS.lic -> zpro5/

_opt_blgmgr_user='nobody' # default: root, the license manager should not be run as root
_opt_pro5_sql='pro5b'    # default: pro5b for non-sql, pro5s for sql
_opt_pro5_exe='bbx4'     # default: pro5, this link will be created in /usr/bin so
                         # Pro/5 is in the path. Select a name that minimizes the number of
                         # scripts you must modify.

# Up to 3 packages can be created
#   i686 for 32 bit systems
#   x86_64 for 64 bit systems
#   any for 64 bit systems running multilib
# They can all be made and ready for compatibility,
# performance, crash testing, or just carrying around for easy installs.

# To build and install package for native bitness:
# makepkg -sCcfi

# To build 32 bit package on 64 bit system
# makepkg -sCcf CARCH=i686

# To build 32 bit multilib package on 64 bit system
# makepkg -sCcf CARCH=any

# Once installed with an activated license you can enable and
# start the BLM service.

#   systemctl enable basis_lmgrd
#   systemctl start basis_lmgrd

# Try out your new Install in command line mode
# cd /usr/local/basis/pro5; unset BBTERM; ./pro5
# Try out your new Install in full screen mode
# cd /usr/local/basis/pro5; export BBTERM=T0; ./pro5

# Got READY> prompt with no nag screens, all good!
# Type BYE or RELEASE to exit

# So far as I know I've solved every one of the annoyances
# with the Basis install.
# If you have license nags check the logs at /var/log/basis/
# Check the status with
#   systemctl status basis_lmgrd.service

# The setup for a fully functioning Basis BBx Progression Pro/5 environment
# is extensive and not covered here.

# There are no man pages.

# Once installed you should add the utility folders ext, graphics, and std
# to your operating config.bbx. Old utilities should be removed if there are
# no modified versions. Many of the supplied utilities won't work unless all
# the utilities are the same version. To keep you from becoming dependant on
# custom changes to these files they are locked on install so even
# root can't edit them. If you want to customize an included utility, make
# a copy with a new name.

# Uninstall cleanup: rm -rf /var/log/basis /usr/local/basis

set -u
pkgname='basis-pro5'
pkgver='15.01'
pkgrel='3'
pkgdesc='BASIS BBx Progression Pro/5 Business BASIC eXtended for BBj'
url='http://www.basis.com/'
license=('custom')
depends=('glibc' 'jdk' 'wget') # The Windows install recommends jdk over jre so we do too. OpenJDK does not work.
options=('!docs' 'emptydirs' '!strip') # strip is so poorly implemented that it changes the content and date on executables, even when there's nothing to strip! What were they thinking?
install="${pkgname}-install.sh" # I can find no way to get makepkg to delete this when done
#_verwatch=("${url}availability" '<td class="revision".*">\([0-9\.]\+\).*' 'f') # Almost works
#_blmjar='BLM1600_03-11-2016_1203.jar'
_blmjar='BLM1600_04-11-2016_1107.jar'
source=("http://public.basis.com/blm/jar/${_blmjar}")

_file='@::file://@' # convince the git submission that these files aren't on the web and don't need to be supplied
# 32-bit Rev 15.00 Linux Kernel 2.6.17-1.2142_FC4+ AND glibc v2.3+
# 10455yyyy.Z          = Pro/5            Port 1045
# 12455yyyy.Z          = Pro/5 DataServer Port 1245
for _src in '104551501.Z' '124551500.Z'; do
  source_i686+=("${_file//@/${_src}}")
done

sha256sums=('89e6ef508b4ce3b7859078ff5f6592aeee2f263e09fbf7120efebe922e72c9da')
sha256sums_i686=('505080b9283ca5037453a844ea9781f047d5bfd6bcec2bd9a7e028497fb6dfdb'
                 '55052c4bcb1628017f051b18880de686c544144adf002dc2fdd1adc30b1e2e24')
sha256sums_x86_64=('42f1d5143249df9672069bc2d64754ccd17a573cfce756dd8caf5056e4f5abd9'
                   'fe1114e619755bed70255e08bad2f9830887cf336bb5f013cc271314dc631604')

for _src in '604551501.Z' '624551500.Z'; do
  source_x86_64+=("${_file//@/${_src}}")
done
# 64-bit Rev 15.00 Linux Kernel v2.6+ and glibc v2.3+
# 60455xxxx.Z          = Pro/5            Port 6045
# 62455yyyy.Z          = Pro/5 DataServer Port 6245
unset _src
unset _file

if [ "${CARCH:-}" != 'any' ]; then
  arch=('i686' 'x86_64')
else
  # This allows us to build an i686, x86_64, and any package all with the same name so pacman thinks it's an upgrade.
  :;source+=("${source_i686[@]}")
  unset source_i686 source_x86_64
  :;sha256sums+=("${sha256sums_i686[@]}")
  unset sha256sums_i686 sha256sums_x86_64
  arch=('any')
  depends+=('lib32-glibc')
fi

# _basefolder can be /usr/local or /usr/share
# Whatever is chosen must have the same number of characters as /usr/local
# Anything other than those two folders will require amending the install.
# An upgrade after a change here will generate 3 harmless chattr errors on install that are handled.
_basefolder='/usr/local'
_basedir="${_basefolder}/basis"
_servicefile='basis_lmgrd.service'

# Approximate update frequency, yearly
# 10455 has some old versions attached to it
_vercheck() {
  curl -s -l "${url}availability" | grep -FA1 $'60455\n10455' | sed -e 's:<[^>]\+>::g' | grep '^[0-9]\+\.[0-9]\+$' | tr '.' ':' | LC_ALL=C sort -n | tr ':' '.' # 1>&2
}

prepare() {
  set -u
  eval 'cd "${star''tdir}"' # keep git-aurcheck from complaining
  mkdir -p 'zblmgr' 'zpro5'
  chmod 644 *.Z zblmgr/* zpro5/* 2>/dev/null || :
  cd "${srcdir}"

  # unpack most of the new BLM, removing files customized by the BLM installer
  # for seamless reinstalls and upgrades.
  rm -rf 'blmgr' 'com' 'org' 'META-INF' 'blminstall.xml'
  mkdir 'blmgr' 'Archtemp'
  cd 'Archtemp'
  bsdtar -x -f '../package_blm.jar'
  declare -A _arch=([any]='32' [i686]='32' [x86_64]='64')
  mv 'unix'/* "2145/blm/${_arch[${CARCH}]}"/* '../blmgr'
  mv '../blmgr/bin/basisrunlm' '../blmgr'
  rm -f '../blmgr/bin/unixautostart'
  mv '../blmgr/bin/admin' '../blmgr/bin/blmadmin'
  cd ..
  rm -rf 'Archtemp'
  mkdir 'Archtemp'
  cd 'Archtemp'
  bsdtar -x -f '../package_install.jar' 'lib/' 'unix'
  rm -f 'unix/images'/*.png 'unix/images/BasisB.xpm' 'unix'/*.directory 'unix'/*.menu 'unix/bin/.envsetup'
  local _df
  for _df in 'unix'/*/; do
    local _df2="${_df%/}"
    mv "${_df2}"/* "../blmgr/${_df2##*/}"
    rmdir "${_df2}"
  done
  rmdir 'unix'
  mv * '../blmgr'
  cd '../blmgr'
  bsdtar -x -f '../package_native_2145.jar'
  rm -rf 'META-INF'
  mkdir -p 'cfg' 'log' 'uninstall/com/basis/install/'
  rm -f "${srcdir}"/*.jar
  rmdir "${srcdir}/Archtemp"
  cd "${srcdir}"

  # The permissions on these files are horrendous
  local _file
  for _file in $(find . -type f); do
    #echo "${_file}"
    local _pm_executable=0
    local _pm_type="$(file "${_file}")"
    local _pm_isdata="${_pm_type##*:}" # bash
    local _pm_isdata="$(echo ${_pm_isdata})" # Trim spaces

    case "${_pm_isdata}" in
      #'empty')         _pm_executable=0;;
      'ASCII text'*)    _pm_executable=0;;
      'HTML'*)          _pm_executable=0;;
      #*'tar archive'*) _pm_executable=0;;
      *'ELF '*)         _pm_executable=1;;
      #*'compressed data'*) _pm_executable=0;;
      *' batch '*)      _pm_executable=1;;
      *' source, '*)    _pm_executable=0;;
      'BBx '*)          _pm_executable=0;;
      *'POSIX shell script'*) _pm_executable=1;;
      *) echo "${_pm_isdata}: ${_file}";;
    esac

    if [ "${_pm_executable}" -eq 0 ]; then
      chmod 644 "${_file}"
    else
      chmod 755 "${_file}"
    fi
  done
  unset _file
  unset _pm_executable
  unset _pm_type
  unset _pm_isdata
  unset _pm_isdata

  find . -type d -exec chmod 755 '{}' ';'
  chmod 644 scripts/* # these are all sourced
  chmod 755 install # only root can run install (the installer is fixed with an EUID check later)

  # these will be marked immutable during install to prevent root from modifying
  chmod 444 pro5/{ext,std,graphics}/*

  # Branding the EXE eliminates the need for the license path in an ENV variable
  # Branding didn't work with the Basis installer. Only two files contain BLM_LICLOC.
  # Branding causes a linker error if done in package when fakeroot is active.
  local _touches
  for _touches in 'pro5/pro5'{b,s}; do
    pro5/BLMbrand "${_touches}" "${_touches}.tmp" "${_basedir}/pro5"
    touch -r "${_touches}" "${_touches}.tmp"
    mv "${_touches}.tmp" "${_touches}"
  done
  unset _touches

  # Fix the date on every file modified
  local _badfiles=($(grep -larF $'/usr/local/\n/usr/tmp' .))
  local _badfile
  for _badfile in "${_badfiles[@]}"; do
    touch -r "${_badfile}" "${_badfile}.Archtmp"
  done

  # Fix a little sbin, within the protection of touch
  sed -i -e 's:/usr/sbin:/usr/bin:g' 'scripts/BasisFuns'

  if [ "${#_basedir}" -ne 16 -o "${#_basefolder}" -ne 10 ]; then
    echo '_basefolder is being replaced in binary files so must be exactly the same length as /usr/local'
    set +u
    false
  fi

  # We are modifying binary files so replace strings must be exactly the same length.
  sed -i -e '# fix /usr/local' \
         -e "s:/usr/local/:${_basefolder}/:g" \
         -e '# fix /usr/tmp' \
         -e 's:/usr/tmp:/var/tmp:g' \
    "${_badfiles[@]}"

  for _badfile in "${_badfiles[@]}"; do
    touch -r "${_badfile}.Archtmp" "${_badfile}"
    rm -f "${_badfile}.Archtmp"
  done
  unset _badfiles
  unset _badfile

  set +u
}

package() {
  set -u
  cd "${srcdir}"

  install -d "${pkgdir}${_basedir}"

  local _basis_pkg
  for _basis_pkg in *; do
    if [ ! -h "${_basis_pkg}" ]; then
      mv "${_basis_pkg}" "${pkgdir}${_basedir}/"
      # bring in license files if provided
      if [ -d "${pkgdir}${_basedir}/${_basis_pkg}/" ] && [ -d "${srcdir}/../z${_basis_pkg}/" ]; then
        install -pm644 "../z${_basis_pkg}/"* -t "${pkgdir}${_basedir}/${_basis_pkg}/" || : # ignore error on copy
      fi
    fi
  done
  unset _basis_pkg

  # The source folders are gone so let's move
  cd "${pkgdir}${_basedir}"

  # Provide a minimal configuration
  install -pm644 <(cat << EOF
ALIAS T0 /dev/tty xterm
prefix '${_basedir}/pro5/std/' '${_basedir}/pro5/ext/' '${_basedir}/pro5/graphics/'
EOF
) 'pro5/config.bbx'

  # Perform the BLM CREATE step, auto-Install the BasisRunLM
  local _outfile='scripts/BasisLicManager'
  cp -p "${_outfile}" "${_outfile}.Arch"
  sed -i -e '# disable all the pauses' \
         -e 's/ read / funcread /g' \
         -e '# fix a cosmetic script bug.' \
         -e 's/License Manager not found: ${lmgrdcom}/License Manager not found: \\${lmgrdcom}/g' \
    "${_outfile}.Arch"
cat >> "${_outfile}.Arch" << EOF
PrintFile() {
  :
  #echo "Print Stuff"
}
PrintPrompt() {
  :
  #echo "Prompt Stuff"
}
funcread() {
  :
  #echo "Read Stuff"
}
CreateRunLM "${pkgdir}${_basedir}/blmgr"
EOF
  sh "${_outfile}.Arch" >/dev/null
  rm -f "${_outfile}.Arch"

  # We had to add ${pkgdir} to get the install to put the file in the right place
  # now we remove the ${pkgdir} slop from the generated file
  local _logfolder='/var/log/basis'
  sed -i -e "s:${pkgdir}/:/:g" \
         -e "# The systemd service doesn't work right unless you have hash bang on the front" \
         -e '1i #!/usr/bin/sh' \
         -e '# Place the log where logs belong. A logrotate is included.' \
         -e "s:${_basedir}/blmgr/log:${_logfolder}:g" \
    'blmgr/BasisRunLM'

  # the log must be world writable so we can run the manager under a non root user's account
  install -d "${pkgdir}${_logfolder}"
  chmod 777 "${pkgdir}${_logfolder}"
  # should we chown this on install?

  # disable BLM CREATE ADD START STOP. We do all this here in PKGBUILD.
  # CREATE won't work because they can't fix the hash bang problem fixed above.
  _outfile='scripts/BasisLicManager'
  if ! grep -ql 'Arch Linux' "${_outfile}"; then
    touch -r "${_outfile}" "${_outfile}.Arch"
    cat >> "${_outfile}" << EOF

# Automatically added by ${pkgname}-${pkgver} PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

# The commands
# BLM CREATE ADD START STOP
# are not compatible with Arch Linux systemd.

# The Arch Linux PKGBUILD performs CREATE automatically.
# The Arch Linux PKGBUILD also creates systemd scripts (ADD) for
# START and STOP.

# The original functionality is disabled and substituted with
# instructionals for Arch Linux.

# These modifications do not bypass any license agreements (AcceptLic).

CreateRunLM ()
{
        echo "This function has already been completed by the Arch Linux installer."
        echo ""
        PrintPrompt ReturnToContinue
        read crlm_answer
}

InstallRunLM ()
{
  CreateRunLM
}

StartBLM ()
{
    echo "To start your license manager use:"
    echo "  systemctl start basis_lmgrd"
    echo ""
    echo "To have your license mananger start at every boot use:"
    echo "  systemctl enable basis_lmgrd"
    echo ""
    echo "To check the status of your license manager"
    echo "  systemctl status basis_lmgrd"
    echo "  less ${_logfolder}/blm.log"
    echo ""
        PrintPrompt ReturnToContinue
        read crlm_answer
}

StopBLM ()
{
    echo "To stop your license manager use:"
    echo "  systemctl stop basis_lmgrd"
    echo ""
    echo "To stop your license mananger from starting at every boot use:"
    echo "  systemctl disable basis_lmgrd"
    echo ""
    echo "To check the status of your license manager"
    echo "  systemctl status basis_lmgrd"
    echo "  less ${_logfolder}/blm.log"
    echo ""
        PrintPrompt ReturnToContinue
        read crlm_answer
}
EOF
    touch -r "${_outfile}.Arch" "${_outfile}"
    rm -f "${_outfile}.Arch"
  fi
  unset _logfolder

  # systemd support
  install -Dpm644 <(cat << EOF
[Unit]
# Automatically generated by ${pkgname}-${pkgver} PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

Description=Basis License Manager for Pro/5 (BLM)
After=network.target

# Changing the user name here may require the following:
# rm -rf /var/tmp/{.flexlm,lockbasis}
[Service]
User=${_opt_blgmgr_user}
Type=forking
ExecStart=${_basedir}/blmgr/BasisRunLM
ExecStop=${_basedir}/blmgr/lmutil lmdown -vendor basis
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
) "${pkgdir}/usr/lib/systemd/system/${_servicefile}"

  # Install a profile.d script. Branding makes this env variable unnecessary.
  # This requires a reboot or a relogin. Branding works immediately and
  # can't be broken by someone messing with scripts.
  if ! :; then
    local _licfile
    for _licfile in 'csh' 'sh'; do
      install -Dm755 <(cat << EOF
# Automatically generated by ${pkgname}-${pkgver} PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

# This file tells Basis Pro/5 where to look for it's license file

LM_LICENSE_FILE="${_basedir}/pro5/BASIS.lic"
export LM_LICENSE_FILE
EOF
) "${pkgdir}/etc/profile.d/basis_lmgr.${_licfile}"
    done
    unset _licfile
  fi

  # Fix script error in 14.0,15.00 that makes the user wonder why the installer doesn't reread the phone
  touch -r 'scripts/BasisReg' 'scripts/BasisReg.Arch'
  sed -i -e 's:"Delivery"[)]    :"Phone")blr_phone="${blr_propval}" ;;\n"Delivery") :g' 'scripts/BasisReg'
  touch -r 'scripts/BasisReg.Arch' 'scripts/BasisReg'
  rm -f 'scripts/BasisReg.Arch'

  # turns out that submission by OTHER works perfectly so we don't need all these hacks.
  # it's here in case someone wants to see how this can be done
  if ! :; then
    # Make a workable email system for those who don't have sendmail
    # Enable automatic operation
    sed -i -e 's: blr_orighostid="\$: $blr_readreturn\nblr_orighostid="\$:g' 'scripts/BasisReg'

    sed -i -e 's: glr_mthd="\$1":\nif [ "$glr_tmpfolder" = "" ]; then\n  glr_tmpfolder=".."\nfi\nglr_mthd="$1":g' \
           -e 's:\.\./\${glr_tmpfile}:${glr_tmpfolder}/${glr_tmpfile}:g' \
      'scripts/BasisFuns'

    sed -i -e 's: blm|BLM[)]: email|EMAIL) cd "${CurDir}/blmgr";blr_readreturn="return";BasisLicRegister;glr_tmpfolder="/tmp";GenLicRequest EMAIL;echo "";echo "Generated $glr_tmpfolder/$glr_tmpfile";echo "";echo "How to send\:";echo "Compose new message in your email.";echo "Disable HTML or Rich Text--send as text only";echo "Subject\: (blank subject)";echo "Paste $glr_tmpfile into body (not as attachment)";echo "Copy To\: address to your To\: field";echo "Remove To\: address and first blank line from email body";echo "Erase or disable any signatures";echo "Send Email";echo "rm $glr_tmpfolder/$glr_tmpfile" ;;\nblm|BLM):g' install
    _emailfile="${srcdir}/genemail.sh"

    rm -f "${_emailfile}"
    cat > "${_emailfile}" << EOF
#!/bin/sh
# Automatically generated by ${pkgname}-${pkgver} PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/
cd "\`dirname "\$0"\`"
if [ ! -s "blmgr/Register.properties" ]; then
  echo "Please run the installer"
  echo "BLM REG"
  echo "Select EMAIL as your delivery preference"
else
  ./install email
fi
EOF

    install -Dpm755 "${_emailfile}" "${pkgdir}/${_basedir}"
    rm -f "${_emailfile}"
  fi

  # Root only for installer. Better than chmod 744.
  sed -i -e 's:^\(CurDir=\):if [ "${EUID}" -ne 0 ]; then\n  echo "Must be root"\n  exit 1\nfi\n\n \1:g' 'install'

  # select executable
  install -d "${pkgdir}/usr/bin"
  ln -s "${_basedir}/pro5/${_opt_pro5_sql}" "${pkgdir}/usr/bin/${_opt_pro5_exe}"

  # create bin links findable by the path
  local _pro5exe
  for _pro5exe in pro5{cpl,plot,lst}; do
    ln -s "${_basedir}/pro5/${_pro5exe}" "${pkgdir}/usr/bin/"
  done
  unset _pro5exe
  # a symlink is better than what the Basis installer does
  ln -s "${_opt_pro5_sql}" "${pkgdir}/${_basedir}/pro5/pro5"
  set +u

  # Ensure there are no forbidden paths. Place at the end of package() and comment out as you find or need exceptions. (git-aurcheck)
  ! test -d "${pkgdir}/bin" || { echo "Line ${LINENO} Forbidden: /bin"; false; }
  ! test -d "${pkgdir}/sbin" || { echo "Line ${LINENO} Forbidden: /sbin"; false; }
  ! test -d "${pkgdir}/lib" || { echo "Line ${LINENO} Forbidden: /lib"; false; }
  ! test -d "${pkgdir}/share" || { echo "Line ${LINENO} Forbidden: /share"; false; }
  ! test -d "${pkgdir}/usr/sbin" || { echo "Line ${LINENO} Forbidden: /usr/sbin"; false; }
  #! test -d "${pkgdir}/usr/local" || { echo "Line ${LINENO} Forbidden: /usr/local"; false; }
  ! grep -lr "/sbin" "${pkgdir}" || { echo "Line ${LINENO} Forbidden: /sbin"; false; }
  ! grep -lr "/usr/tmp" "${pkgdir}" || { echo "Line ${LINENO} Forbidden: /usr/tmp"; false; }
  # /usr/local exists in Arch. The PKGBUILD can switch _basefolder to /usr/share
  # My concern is that this change makes Arch diverge too much from the
  # instructions which will confuse those who would want to upgrade from OS
  # where /usr/local is the normal install location.
  #! grep -lr "/usr/local" "${pkgdir}" || { echo "Line ${LINENO} Forbidden: /usr/local"; false; }
  # I can't fix these /bin without sed negative lookbehind
  #! pcre2grep -Ilr "(?<!usr)/bin" "${pkgdir}" || { echo "Line ${LINENO} Forbidden: /bin"; false; }
}

cat > "${install}" << EOF
post_upgrade() {
  systemctl daemon-reload
  if systemctl -q is-enabled "${_servicefile}"; then
    systemctl start "${_servicefile}"
  fi
  #echo "Startup scripts updated or installed"
  # This prevents editing of the supplied utilites. Please make a copy.
  # chattr ensures that even root can't do it
  chattr +i "${_basedir}/pro5"/{ext,std,graphics}/*
}

post_install() {
  post_upgrade
  # It's a shame this path is hard coded into the license manager.
  # This, or maybe a binary patch?
  # Binary patch complete. gnu sed is binary compatible.
  # ln -s '/tmp' '/usr/tmp' || :
}

pre_upgrade() {
  systemctl stop "${_servicefile}"
  rm -rf '/var/tmp/.flexlm'
  rm -f '/var/tmp/lockbasis' # otherwise a user change cannot work
  if ! chattr -i "${_basedir}/pro5"/{ext,std,graphics}/*; then
    # We must do this because of bug https://bugs.archlinux.org/task/45988
    case "${_basedir}" in
    '/usr/local/basis') chattr -i '/usr/share/basis/pro5'/{ext,std,graphics}/*;;
    '/usr/share/basis') chattr -i '/usr/local/basis/pro5'/{ext,std,graphics}/*;;
    esac
  fi
}

pre_remove() {
  pre_upgrade
}

post_remove() {
  systemctl daemon-reload
  #echo "startup scripts removed"
  # Having created this outside of the package manager, it isn't safe to delete.
  # Another package may have created it first.
  # Another Install may have configured based on its presence.
  # The admin will need to remove it and put it back if there's problems.
  #if [ -L '/usr/tmp' ]; then
  #  rm -f '/usr/tmp'
  #fi
}
EOF
set +u
