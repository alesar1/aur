# Maintainer: Andrew Shark <ashark linuxcomp.ru>

pkgname=supermicro-update-manager
pkgver=2.4.0
pkgrel=1
pkgdesc="manage the firmware and configuration for Supermicro motherboards"
arch=(x86_64)
url="https://www.supermicro.com/en/solutions/management-software/supermicro-update-manager"
license=('custom: EULA')
backup=(etc/sumrc)
_rel_date=20191206
source=("sum_${pkgver}_Linux_x86_64_${_rel_date}.tar.gz::https://www.supermicro.com/SwDownload/SwSelect_Free.aspx")
sha256sums=("d0d7203913334e02d4ea1c8493834c5a0e7236040380447e22697b816dc614c7")

# To get these crazy value for curl, in Chromium go to the site, download software. Open web console -> Network tab -> filter method:POST you can see and copy it.
DLAGENTS=("https::/usr/bin/curl \
-d __EVENTTARGET=ctl00%24CPCenter%24MyGridView&__EVENTARGUMENT=Action%241&ctl00_TreeView_BackToSMCI_ExpandState=n&ctl00_TreeView_BackToSMCI_SelectedNode=&ctl00_TreeView_BackToSMCI_PopulateLog=&__VIEWSTATE=%2FwEPDwULLTE4ODkyNjU0NDcPFgIeDVNvcnRFeHByVmFsdWUFBnN3TmFtZRYCZg9kFgICAw9kFgwCBw9kFggCBw8PFgQeBVdpZHRoGwAAAAAAwIJAAQAAAB4EXyFTQgKAAmQWAgIDDw8WAh4EVGV4dAUDU1VNZGQCCQ88KwANAQAPFgQeC18hRGF0YUJvdW5kZx4LXyFJdGVtQ291bnQCA2QWAmYPZBYIAgEPZBYQZg8PFgIfAwUfU3VwZXJtaWNybyBVcGRhdGUgTWFuYWdlciAoU1VNKWRkAgEPDxYCHwMFEEJTRCB4NjQsIEJTRCB4ODZkZAICDw8WAh8DBQZ0YXIuZ3pkZAIDDw8WAh8DBQgxMi0xNi0xOWRkAgQPDxYCHwMFBTIuNC4wZGQCBQ8PFgIfAwWfAlN1cGVybWljcm8mIzE3NDsgVXBkYXRlIE1hbmFnZXIgcmVtb3RlbHkgdXBkYXRlcyB0aGUgQklPUyBhbmQgQk1DL0lQTUkgZmlybXdhcmUsIGFzIHdlbGwgYXMsIHN5c3RlbSBzZXR0aW5ncyBvZiBTdXBlcm1pY3JvIFg5IChSb21sZXkpLCBYMTAsIGFuZCBYMTEgZ2VuZXJhdGlvbiBiYXNlZCBtYWNoaW5lIHRocm91Z2ggaW4tYmFuZCBhbmQgT09CIChPdXQtT2YtQmFuZCkgY29tbXVuaWNhdGlvbiBjaGFubmVscywgaS5lLiwgY29tbXVuaWNhdGlvbiB0aHJvdWdoIHRoZSBCTUMvSVBNSSBpbnRlcmZhY2UuZGQCBg9kFgJmDw8WAh8DBQtBY2NlcHQgRVVMQWRkAgcPDxYCHwMFAzI2OWRkAgIPZBYQZg8PFgIfAwUfU3VwZXJtaWNybyBVcGRhdGUgTWFuYWdlciAoU1VNKWRkAgEPDxYCHwMFFExpbnV4IHg2NCwgTGludXggeDg2ZGQCAg8PFgIfAwUGdGFyLmd6ZGQCAw8PFgIfAwUIMTItMTYtMTlkZAIEDw8WAh8DBQUyLjQuMGRkAgUPDxYCHwMFnwJTdXBlcm1pY3JvJiMxNzQ7IFVwZGF0ZSBNYW5hZ2VyIHJlbW90ZWx5IHVwZGF0ZXMgdGhlIEJJT1MgYW5kIEJNQy9JUE1JIGZpcm13YXJlLCBhcyB3ZWxsIGFzLCBzeXN0ZW0gc2V0dGluZ3Mgb2YgU3VwZXJtaWNybyBYOSAoUm9tbGV5KSwgWDEwLCBhbmQgWDExIGdlbmVyYXRpb24gYmFzZWQgbWFjaGluZSB0aHJvdWdoIGluLWJhbmQgYW5kIE9PQiAoT3V0LU9mLUJhbmQpIGNvbW11bmljYXRpb24gY2hhbm5lbHMsIGkuZS4sIGNvbW11bmljYXRpb24gdGhyb3VnaCB0aGUgQk1DL0lQTUkgaW50ZXJmYWNlLmRkAgYPZBYCZg8PFgIfAwUhRG93bmxvYWQgRmlsZSBwZXIgRVVMQSBhY2NlcHRhbmNlZGQCBw8PFgIfAwUDMjcwZGQCAw9kFhBmDw8WAh8DBR9TdXBlcm1pY3JvIFVwZGF0ZSBNYW5hZ2VyIChTVU0pZGQCAQ8PFgIfAwUYV2luZG93cyB4NjQsIFdpbmRvd3MgeDg2ZGQCAg8PFgIfAwUDemlwZGQCAw8PFgIfAwUIMTItMTYtMTlkZAIEDw8WAh8DBQUyLjQuMGRkAgUPDxYCHwMFnwJTdXBlcm1pY3JvJiMxNzQ7IFVwZGF0ZSBNYW5hZ2VyIHJlbW90ZWx5IHVwZGF0ZXMgdGhlIEJJT1MgYW5kIEJNQy9JUE1JIGZpcm13YXJlLCBhcyB3ZWxsIGFzLCBzeXN0ZW0gc2V0dGluZ3Mgb2YgU3VwZXJtaWNybyBYOSAoUm9tbGV5KSwgWDEwLCBhbmQgWDExIGdlbmVyYXRpb24gYmFzZWQgbWFjaGluZSB0aHJvdWdoIGluLWJhbmQgYW5kIE9PQiAoT3V0LU9mLUJhbmQpIGNvbW11bmljYXRpb24gY2hhbm5lbHMsIGkuZS4sIGNvbW11bmljYXRpb24gdGhyb3VnaCB0aGUgQk1DL0lQTUkgaW50ZXJmYWNlLmRkAgYPZBYCZg8PFgIfAwULQWNjZXB0IEVVTEFkZAIHDw8WAh8DBQMyNzJkZAIEDw8WAh4HVmlzaWJsZWhkZAINDw8WAh8DZWRkAg8PZBYCAgEPDxYGHwEbAAAAAADAgkABAAAAHwMFgD48Yj48Zm9udCBjb2xvcj0nYnJvd24nPkVuZCBVc2VyIExpY2Vuc2UgQWdyZWVtZW50IChFVUxBKTwvZm9udD48L2I%2BPGJyPjxicj5JTVBPUlRBTlQgLSBSRUFEIENBUkVGVUxMWSBCRUZPUkUgSU5TVEFMTElORzo8YnI%2BPGJyPlRISVMgRU5ELVVTRVIgTElDRU5TRSBBR1JFRU1FTlQgaXMgYSBsZWdhbCBjb250cmFjdCBiZXR3ZWVuIFNVUEVSIE1JQ1JPIENPTVBVVEVSLCBJTkMuICgiU1VQRVJNSUNSTyIpIGFuZCB0aGUgaW5kaXZpZHVhbCBvciBlbnRpdHkgd2hpY2ggZG93bmxvYWRzLCBpbnN0YWxscyBvciBvdGhlcndpc2UgdXNlcyB0aGUgYXR0YWNoZWQgU1VQRVJNSUNSTyBzb2Z0d2FyZSBwcm9kdWN0ICgidGhlIFNvZnR3YXJlICIpLjxicj48YnI%2BQlkgQ0xJQ0tJTkcgT04gVEhFICJBQ0NFUFQiIEJVVFRPTiBBVCBUSEUgRU5EIE9GIFRISVMgQUdSRUVNRU5ULCBXSElDSCBXSUxMIElOU1RBTEwgVEhFIEFUVEFDSEVEIFNPRlRXQVJFLCBPUiBCWSBPVEhFUldJU0UgSU5TVEFMTElORyBPUiBVU0lORyBUSEUgU09GVFdBUkUsIFRIRSBJTkRJVklEVUFMIE9SIEVOVElUWSBXSElDSCBJTlNUQUxMUyBPUiBVU0VTIFRIRSBTT0ZUV0FSRSAoIkxJQ0VOU0VFIikgQUdSRUVTIFRPIEJFIEJPVU5EIEJZIFRIRSBURVJNUyBPRiBUSElTIEFHUkVFTUVOVC4gIElGIFlPVSBETyBOT1QgQUdSRUUgVE8gQUxMIE9GIFRIRSBURVJNUyBPRiBUSElTIEFHUkVFTUVOVCwgQ0xJQ0sgVEhFICJDQU5DRUwiIEJVVFRPTiBBTkQgVEhFIElOU1RBTExBVElPTiBQUk9DRVNTIFdJTEwgTk9UIENPTlRJTlVFLjxicj48YnI%2BPGI%2BMS48L2I%2BIExpY2Vuc2U6IFRoaXMgQWdyZWVtZW50IGdyYW50cyB5b3UsIHRoZSBMaWNlbnNlZSwgYSBsaW1pdGVkLCBub24tZXhjbHVzaXZlLCBnbG9iYWwsIG5vbi10cmFuc2ZlcmFibGUgbGljZW5zZSB0byBkb3dubG9hZCB0aGUgU29mdHdhcmUsIGluc3RhbGwgb24gU1VQRVJNSUNSTydzIHByb2R1Y3RzLCBhbmQgZGlzdHJpYnV0ZSB0aGUgU29mdHdhcmUgaW4gY29tYmluYXRpb24gd2l0aCBTVVBFUk1JQ1JPJ3MgcHJvZHVjdHMgKCJMaWNlbnNlIikuPGJyPjxicj48Yj4yLjwvYj4gR2VuZXJhbCBQdWJsaWMgTGljZW5zZS9MZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZS4gQ2VydGFpbiBjb21wb25lbnRzIG9mIHRoZSBTb2Z0d2FyZSBtYXkgYmUgc3ViamVjdCB0byB0aGUgR05VIEdQTCBvciBMR1BMIHRlcm1zIGFuZCBjb25kaXRpb25zIGF2YWlsYWJsZSBmb3Igdmlld2luZyBhdCBodHRwOi8vd3d3LmdudS5vcmcvY29weWxlZnQvZ3BsLmh0bWwgYW5kIGh0dHA6Ly93d3cuZ251Lm9yZy9jb3B5bGVmdC9sZXNzZXIuaHRtbCBvciBhcyBvdGhlcndpc2UgZGVzaWduYXRlZC4gVG8gdGhlIGV4dGVudCB5b3UgcmVjZWl2ZSBTb2Z0d2FyZSB1bmRlciB0aGlzIExpY2Vuc2Ugd2hpY2ggY29udGFpbnMgY29tcG9uZW50cyBzdWJqZWN0IHRvIHRoZSBHUEwgb3IgTEdQTCB0ZXJtcywgeW91IGFncmVlIHRvIGJlIGJvdW5kIGJ5IGFsbCB0aGUgdGVybXMgYW5kIHJlc3RyaWN0aW9ucyB0aGVyZWluIGluY2x1ZGluZyBrZWVwaW5nIGFsbCBjb3B5cmlnaHQgbm90aWNlcyBpbiB0YWN0IGZvciB0aGUgZHVyYXRpb24gb2YgeW91ciB1c2Ugb2YgdGhlIFNvZnR3YXJlIGFuZCBtb2RpZnlpbmcgYW5kL29yIHJlZGlzdHJpYnV0aW5nIHN1Y2ggY29tcG9uZW50cyBvbmx5IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgdGVybXMgb2YgdGhlIEdOVSBHUEwgb3IgTEdQTCB0ZXJtcy48YnI%2BPGJyPjxiPjMuPC9iPiBSZXN0cmljdGlvbnM6IFRoZSBMaWNlbnNlZSBtYXkgTk9UIHN1YmxpY2Vuc2UsIGFzc2lnbiwgcmVwcm9kdWNlIG9yIGRpc3RyaWJ1dGUgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSB0byBvdGhlcnMgZXhjZXB0IGFzIG90aGVyd2lzZSBwcm92aWRlZCBoZXJlaW4uIFRoZSBTb2Z0d2FyZSBjb250YWlucyB0cmFkZSBzZWNyZXRzLiBUaGUgTGljZW5zZWUgbWF5IE5PVCBkZWNvbXBpbGUsIHJldmVyc2UgZW5naW5lZXIsIGRpc2Fzc2VtYmxlLCBvciBvdGhlcndpc2UgcmVkdWNlIHRoZSBTb2Z0d2FyZSB0byBhIGh1bWFuIHJlYWRhYmxlIGZvcm0uIFRIRSBMSUNFTlNFRSBNQVkgTk9UIE1PRElGWSwgQURBUFQsIFRSQU5TTEFURSwgUkVOVCwgTEVBU0UsIExPQU4sIFJFU0VMTCBGT1IgUFJPRklULCBESVNUUklCVVRFLCBPUiBPVEhFUldJU0UgQVNTSUdOIE9SIFRSQU5TRkVSIFRIRSBTT0ZUV0FSRSwgT1IgQ1JFQVRFIERFUklWQVRJVkUgV09SS1MgQkFTRUQgVVBPTiBUSEUgU09GVFdBUkUgT1IgQU5ZIFBBUlQgVEhFUkVPRiwgRVhDRVBUIEFTIEVYUFJFU1NMWSBBR1JFRUQgVE8gSU4gV1JJVElORyBCWSBTVVBFUk1JQ1JPLjxicj48YnI%2BPGI%2BNC48L2I%2BIENvcHlyaWdodCBQcm90ZWN0aW9uOiBFeGNlcHQgdG8gdGhlIGV4dGVudCB0aGUgU29mdHdhcmUgd2FzIGxpY2Vuc2VkIHRvIFNVUEVSTUlDUk8gYnkgaXRzIGxpY2Vuc29yLCB0aGUgU29mdHdhcmUgYW5kIGFsbCByZWxhdGVkIGRvY3VtZW50YXRpb24gYXJlIG93bmVkIGJ5IFNVUEVSTUlDUk8gYW5kIGFyZSBwcm90ZWN0ZWQgYnkgVW5pdGVkIFN0YXRlcycgY29weXJpZ2h0IGxhd3MgYW5kIGludGVybmF0aW9uYWwgdHJlYXR5IHByb3Zpc2lvbnMuIEFueSBjb3B5aW5nIG9yIHJlZGlzdHJpYnV0aW9uLCBleGNlcHQgYXMgZXhwcmVzc2x5IHBlcm1pdHRlZCBieSB0aGlzIEFncmVlbWVudCBpcyBhIHZpb2xhdGlvbiBvZiB0aGUgbGF3LiBZb3UgbWF5IG5vdCByZW1vdmUgb3IgYWx0ZXIgYW55IGNvcHlyaWdodCwgdHJhZGUgc2VjcmV0LCBwYXRlbnQsIHRyYWRlbWFyaywgdHJhZGUgbmFtZSwgbG9nbywgcHJvZHVjdCBkZXNpZ25hdGlvbiBvciBvdGhlciBwcm9wcmlldGFyeSBhbmQvb3Igb3RoZXIgbGVnYWwgbm90aWNlcyBjb250YWluZWQgaW4gb3Igb24gdGhlIFNvZnR3YXJlLiBUaGVzZSBsZWdhbCBub3RpY2VzIG11c3QgYmUgcmV0YWluZWQgb24gYW55IGNvcGllcyBvZiB0aGUgU29mdHdhcmUuIEV4Y2VwdCBhcyBvdGhlcndpc2UgZXhwcmVzc2x5IHByb3ZpZGVkLCB0aGlzIExpY2Vuc2UgZ3JhbnRzIG5vIGV4cHJlc3Mgb3IgaW1wbGllZCByaWdodHMgdW5kZXIgdGhlIHJlc3BlY3RpdmUgcGF0ZW50cywgY29weXJpZ2h0cywgdHJhZGVtYXJrcyBvciBvdGhlciBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzIG9mIFNVUEVSTUlDUk8gb3IgaXRzIGxpY2Vuc29ycy48YnI%2BPGJyPjxiPjUuPC9iPiBUZXJtaW5hdGlvbjogVGhpcyBMaWNlbnNlIGlzIGVmZmVjdGl2ZSB1bnRpbCB0ZXJtaW5hdGVkLiBUaGlzIExpY2Vuc2Ugd2lsbCB0ZXJtaW5hdGUgaW1tZWRpYXRlbHkgd2l0aG91dCBub3RpY2UgZnJvbSBTVVBFUk1JQ1JPIGlmIHRoZSBMaWNlbnNlZSBmYWlscyB0byBjb21wbHkgd2l0aCBhbnkgb2YgaXRzIHByb3Zpc2lvbnMuIFVwb24gdGVybWluYXRpb24gdGhlIExpY2Vuc2VlIG11c3QgZGVzdHJveSB0aGUgU29mdHdhcmUgYW5kIGFsbCBjb3BpZXMgdGhlcmVvZiwgYW5kIHRoZSBMaWNlbnNlZSBtYXkgdGVybWluYXRlIHRoaXMgTGljZW5zZSBhdCBhbnkgdGltZSBieSBkb2luZyBzby48YnI%2BPGJyPjxiPjYuPC9iPiBObyBXYXJyYW50eTogVEhFIFNPRlRXQVJFIElTIERFTElWRVJFRCBUTyBMSUNFTlNFRSAiQVMtSVMiLiBTVVBFUk1JQ1JPIEFORCBJVFMgU1VQUExJRVJTIEFORCBSRVNFTExFUlMgTUFLRSBOTyBXQVJSQU5UWSBBUyBUTyBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRIRSBTT0ZUV0FSRSBPRiBBTlkgS0lORC4gU1VQRVJNSUNSTyBBTkQgSVRTIFNVUFBMSUVSUyBBTkQgUkVTRUxMRVJTIERPIE5PVCBXQVJSQU5UIFRIQVQgVEhFIFNPRlRXQVJFIElTIEZSRUUgT0YgREVGRUNUUywgTUVSQ0hBTlRBQkxFLCBGSVQgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIE9SIE5PTi1JTkZSSU5HSU5HIE9GIFRISVJEIFBBUlRZIFJJR0hUUywgQU5EIERJU0NMQUlNIEFORCBFWENMVURFIEFMTCBXQVJSQU5USUVTLCBFWFBSRVNTIE9SIElNUExJRUQsIFdJVEggUkVTUEVDVCBUTyBUSEUgU09GVFdBUkUsIElUUyBVU0UsIFBFUkZPUk1BTkNFIE9SIEFQUExJQ0FUSU9OLCBUSEUgRElTS0VUVEUgT1IgT1RIRVIgVEFOR0lCTEUgTUVESUEgT04gV0hJQ0ggVEhFIFNPRlRXQVJFIElTIERFTElWRVJFRCwgT1IgQU5ZIElORk9STUFUSU9OIFBST1ZJREVEIFJFR0FSRElORyBUSEUgU09GVFdBUkUuPGJyPjxicj48Yj43LjwvYj4gTGltaXRhdGlvbiBvZiBMaWFiaWxpdHk6IElOIE5PIEVWRU5UIFdJTEwgU1VQRVJNSUNSTyBPUiBJVFMgTElDRU5TT1JTIEJFIExJQUJMRSBUTyBMSUNFTlNFRSBGT1IgQU5ZIERBTUFHRVMgSU5DTFVESU5HIEFOWSBMT1NUIFBST0ZJVFMsIExPU1QgU0FWSU5HUyBPUiBPVEhFUiBJTkNJREVOVEFMIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUywgRVZFTiBJRiBTVVBFUk1JQ1JPIE9SIElUUyBMSUNFTlNPUlMgSEFTIEJFRU4gQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0VTLCBPUiBGT1IgQU5ZIENMQUlNIEJZIEFOWSBPVEhFUiBQQVJUWS4gSU4gTk8gRVZFTlQgV0lMTCBUSEUgTElBQklMSVRZIE9GIFNVUEVSTUlDUk8gT1IgSVRTIExJQ0VOU09SUywgV0hFVEhFUiBJTiBDT05UUkFDVCwgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UpLCBTVFJJQ1QgTElBQklMSVRZIE9SIE9USEVSV0lTRSwgRVhDRUVEIFRIRSBBTU9VTlQgUEFJRCBCWSBZT1UgVU5ERVIgVEhJUyBMSUNFTlNFLjxicj48YnI%2BPGI%2BOC48L2I%2BIEdlbmVyYWw6IENhbGlmb3JuaWEgbGF3LCBleGNlcHQgYXMgdG8gY29weXJpZ2h0IG1hdHRlcnMsIHdoaWNoIGFyZSBjb3ZlcmVkIGJ5IEZlZGVyYWwgbGF3LCBhbmQgaXRzIHByaW5jaXBhbHMgb2YgY29uZmxpY3Qgb2YgbGF3cywgc2hhbGwgZ292ZXJuIHRoaXMgQWdyZWVtZW50LiBUaGlzIEFncmVlbWVudCB3aWxsIG5vdCBiZSBnb3Zlcm5lZCBieSB0aGUgY29uZmxpY3Qgb2YgbGF3IHJ1bGVzIG9mIGFueSBqdXJpc2RpY3Rpb24gb3IgdGhlIFVuaXRlZCBOYXRpb25zIENvbnZlbnRpb24gb2YgQ29udHJhY3RzIGZvciB0aGUgU2FsZSBvZiBHb29kcy4gVGhlIHBhcnRpZXMgaGVyZWJ5IGNvbnNlbnQgdG8gdGhlIGV4Y2x1c2l2ZSBwZXJzb25hbCBqdXJpc2RpY3Rpb24gb2YgYW5kIHZlbnVlIGluIGEgY291cnQgb2YgY29tcGV0ZW50IGp1cmlzZGljdGlvbiBsb2NhdGVkIGluIFNhbnRhIENsYXJhIENvdW50eSBpcyB0aGUgU3RhdGUgb2YgQ2FsaWZvcm5pYS4gQW55IGNhdXNlIG9mIGFjdGlvbiBvciBjbGFpbSB3aXRoIHJlc3BlY3QgdG8gdGhlIFNvZnR3YXJlIHByb3ZpZGVkIHVuZGVyIHRoaXMgQWdyZWVtZW50IG11c3QgYmUgY29tbWVuY2VkIHdpdGhpbiBvbmUgKDEpIHllYXIgYWZ0ZXIgdGhlIGNsYWltIG9yIGNhdXNlIG9mIGFjdGlvbiBhcmlzZXMgb3Igc3VjaCBjbGFpbSBvciBjYXVzZSBvZiBhY3Rpb24gaXMgYmFycmVkLiBTaG91bGQgYW55IHByb3Zpc2lvbiBvZiB0aGlzIEFncmVlbWVudCBiZSBkZWNsYXJlZCB1bmVuZm9yY2VhYmxlIGJ5IGEgY291cnQgb2YgY29tcGV0ZW50IGp1cmlzZGljdGlvbiwgdGhlbiBzdWNoIHByb3Zpc2lvbiBzaGFsbCBiZSBkZWVtZWQgc2V2ZXJhYmxlIGZyb20gdGhpcyBBZ3JlZW1lbnQgYW5kIGNoYW5nZWQgYW5kIGludGVycHJldGVkIHNvIGFzIHRvIGJlc3QgYWNjb21wbGlzaCB0aGUgb2JqZWN0aXZlcyBvZiB0aGUgb3JpZ2luYWwgcHJvdmlzaW9uIHRvIHRoZSBmdWxsZXN0IGV4dGVudCBhbGxvd2VkIGJ5IGxhdy4gU3VjaCBhbiBldmVudCBzaGFsbCBub3QgYWZmZWN0IHRoZSByZW1haW5kZXIgaGVyZW9mIGFuZCB0aGUgcmVtYWluaW5nIHByb3Zpc2lvbnMgc2hhbGwgcmVtYWluIGluIGZ1bGwgZm9yY2UgYW5kIGVmZmVjdC4gU1VQRVJNSUNSTyByZXNlcnZlcyBhbGwgcmlnaHRzIGluIHRoZSBTb2Z0d2FyZSBub3Qgc3BlY2lmaWNhbGx5IGdyYW50ZWQgaW4gdGhpcyBBZ3JlZW1lbnQuIFRoZSBMaWNlbnNlZSBhZ3JlZXMgdG8gaW5kZW1uaWZ5LCBkZWZlbmQgYW5kIGhvbGQgU1VQRVJNSUNSTyBoYXJtbGVzcyBmcm9tIGFueSBhbmQgYWxsIGV4cGVuc2VzLCBqdWRnbWVudHMsIHBlbmFsdGllcywgb3Igb3RoZXIgbGlhYmlsaXRpZXMgYnkgcmVhc29uIG9mIGl0cyBmYWlsdXJlIHRvIGNvbXBseSB3aXRoIGFueSBwcm92aXNpb25zIHVuZGVyIHRoaXMgQWdyZWVtZW50Ljxicj48YnI%2BPGI%2BOS48L2I%2BIEV4cG9ydCBSZWd1bGF0aW9ucy4gQWxsIFNvZnR3YXJlIGFuZCB0ZWNobmljYWwgZGF0YSBkZWxpdmVyZWQgdW5kZXIgdGhpcyBMaWNlbnNlIGFyZSBzdWJqZWN0IHRvIFUuUy4gZXhwb3J0IGNvbnRyb2wgbGF3cyBhbmQgbWF5IGJlIHN1YmplY3QgdG8gZXhwb3J0IG9yIGltcG9ydCByZWd1bGF0aW9ucyBpbiBvdGhlciBjb3VudHJpZXMuIFlvdSBtYXkgbm90IHVzZSBvciBvdGhlcndpc2UgZXhwb3J0IG9yIHJlLWV4cG9ydCB0aGUgU29mdHdhcmUgZXhjZXB0IGFzIGF1dGhvcml6ZWQgYnkgVS5TLiBsYXcgYW5kIHRoZSBsYXdzIG9mIHRoZSBqdXJpc2RpY3Rpb24gaW4gd2hpY2ggdGhlIFNvZnR3YXJlIHdhcyBvYnRhaW5lZC4gWW91IGFncmVlIHRvIGNvbXBseSBzdHJpY3RseSB3aXRoIGFsbCBzdWNoIGxhd3MgYW5kIHJlZ3VsYXRpb25zIGFuZCBhY2tub3dsZWRnZSB0aGF0IHRoZSBTb2Z0d2FyZSBtYXkgbm90IGJlIGV4cG9ydGVkIG9yIHJlLWV4cG9ydGVkIChpKSBpbnRvIChvciB0byBhIG5hdGlvbmFsIG9yIHJlc2lkZW50IG9mKSBhbnkgVS5TLiBlbWJhcmdvZWQgY291bnRyeSBvciAoaWkpIHRvIGFueW9uZSBvbiB0aGUgVS5TLiBUcmVhc3VyeSBEZXBhcnRtZW50J3MgbGlzdCBvZiBTcGVjaWFsbHkgRGVzaWduYXRlZCBOYXRpb25hbHMgb3IgdGhlIFUuUy4gQ29tbWVyY2UgRGVwYXJ0bWVudCdzIFRhYmxlIG9mIERlbmlhbCBPcmRlcnMgKGVhY2gsIGEgIkxpc3QiKS4gQnkgdXNpbmcgdGhlIFNvZnR3YXJlLCB5b3UgcmVwcmVzZW50IGFuZCB3YXJyYW50eSB0aGF0IHlvdSBhcmUgbm90IGxvY2F0ZWQgaW4sIHVuZGVyIHRoZSBjb250cm9sIG9mLCBvciBhIG5hdGlvbmFsIG9yIHJlc2lkZW50IG9mIGFueSBzdWNoIGNvdW50cnkgb3Igb24gYW55IHN1Y2ggTGlzdC48YnI%2BPGJyPjxiPjEwLjwvYj4gQWNrbm93bGVkZ21lbnQgYW5kIEV4Y2x1c2l2aXR5LiBMSUNFTlNFRSBBQ0tOT1dMRURHRVMgVEhBVCBJVCBIQVMgUkVBRCBUSElTIEFHUkVFTUVOVCwgVU5ERVJTVEFORCBJVCwgQU5EIEFHUkVFIFRPIEJFIEJPVU5EIEJZIElUUyBURVJNUyBBTkQgQ09ORElUSU9OUy4gTElDRU5TRUUgRlVSVEhFUiBBR1JFRVMgVEhBVCBJVCBJUyBUSEUgQ09NUExFVEUgQU5EIEVYQ0xVU0lWRSBTVEFURU1FTlQgT0YgVEhFIEFHUkVFTUVOVCBCRVRXRUVOIFVTIFdISUNIIFNVUEVSQ0VERVMgQU5ZIFBST1BPU0FMIE9SIFBSSU9SIEFHUkVFTUVOVCwgT1JBTCBPUiBXUklUVEVOLCBBTkQgQU5ZIE9USEVSIENPTU1VTklDQVRJT05TIEJFVFdFRU4gVEhFIFBBUlRJRVMgUkVMQVRJTkcgVE8gVEhFIFNVQkpFQ1QgTUFUVEVSIE9GIFRISVMgQUdSRUVNRU5ULiBObyBwcm92aXNpb24gYXBwZWFyaW5nIG9uIGFueSBmb3JtIG9yaWdpbmF0ZWQgYnkgTGljZW5zZWUgc2hhbGwgYmUgYXBwbGljYWJsZSBvciBoYXZlIGFueSBmb3JjZSBvciBlZmZlY3QgdW5sZXNzIHN1Y2ggcHJvdmlzaW9uIGlzIGV4cHJlc3NseSBhY2NlcHRlZCBpbiB3cml0aW5nIGJ5IGFuIG9mZmljZXIgb2YgU1VQRVJNSUNSTy4gVGhpcyBBZ3JlZW1lbnQgY2Fubm90IGJlIG1vZGlmaWVkIGJ5IHB1cmNoYXNlIG9yZGVycyBvciBvdGhlciBmb3JtcywgYWR2ZXJ0aXNlbWVudHMsIG9yIG9yYWwgb3Igd3JpdHRlbiByZXByZXNlbnRhdGlvbnMgb2YgcmVwcmVzZW50YXRpdmVzIG9mIExpY2Vuc2VlIG9yIFNVUEVSTUlDUk8sIG9yIGFueW9uZSBlbHNlLCB1bmxlc3MgYSB3cml0dGVuIGFtZW5kbWVudCBoYXMgYmVlbiBzaWduZWQgYnkgYSBTVVBFUk1JQ1JPIG9mZmljZXIuHwICgAJkZAILD2QWAgIBDzwrAAkBAA8WAh4NTmV2ZXJFeHBhbmRlZGdkZAIND2QWAgIBDzwrAAkBAA8WAh8HZ2RkAg8PZBYCAgEPPCsACQEADxYCHwdnZGQCEQ8PFgIfBmdkFgICAQ88KwAJAgAPFgYfB2QeDFNlbGVjdGVkTm9kZWQeCUxhc3RJbmRleAIBZAgUKwACZBQrAAIWBB4LTmF2aWdhdGVVcmwFH2h0dHBzOi8vd3d3LnN1cGVybWljcm8uQ09NL1NNUy8eCEV4cGFuZGVkZ2RkAhMPZBYCAgEPPCsACQEADxYCHwdnZGQYAgUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFGWN0bDAwJFRyZWVWaWV3X0JhY2tUb1NNQ0kFGWN0bDAwJENQQ2VudGVyJE15R3JpZFZpZXcPPCsACgEIAgFke3sIrNuaP%2BEOJXb3v2yHhEL7laI%3D&__VIEWSTATEGENERATOR=51AA6286&__SCROLLPOSITIONX=0&__SCROLLPOSITIONY=0&__EVENTVALIDATION=%2FwEWCwK5rriwBgLrteqdCwKEh7PuBQKz2ZK8DgLrn5ifAgKK1ZSnAgLDn8SaBwLDotPPDwLa2dqdDALa2e7mBQLa2bLUD6bLh5D3IWhJCbxI5aoFUh2hq4ho&ctl00%24CPCenter%24Hidden_EmailAddress=&ctl00%24CPCenter%24Hidden_RequestType=0&ctl00%24CPCenter%24Hidden_Category=SUM \
--compressed -o %o"
)

package() {
	cd sum_"$pkgver"_Linux_x86_64
	
	install -D sumrc.sample "$pkgdir/etc/sumrc"
	sed -i '1{s|.*|# To use this config invoke supermicro-update-manager with --rc_path=/etc/sumrc.|}' "$pkgdir/etc/sumrc"
	sed -i '2{s|.*|# Alternatively, copy this file as .sumrc to your home directory or use needed parameters directly via command line.|}' "$pkgdir/etc/sumrc"
	
	# sum_bios.ko only needed if InBand SMI E7h support is not implemented in BIOS. I have not seen such systems, but if you have, please contact me and I will edit pkgbuild.
	# ExternalData folder contains SMCIPID.txt, tui.fnt, VENID.txt. I do not know when they are used, so did not packaged them.
	
	install -D SUM_UserGuide.pdf "$pkgdir/usr/share/doc/supermicro-update-manager/SUM_UserGuide.pdf"
	install -Dm755 sum "$pkgdir/usr/bin/supermicro-update-manager" # rename executable file to not conflict with gnu sum.
}
