# Maintainer: Moses Narrow <moe_narrow@use.startmail.com>
# Maintainer: Rudi [KittyCash] <rudi@skycoinmail.com>
projectname=skycoin
pkgname=skywire
pkgname1=skywire
githuborg=SkycoinProject
pkgdesc="TESTNET Skywire: Building a New Internet. Skycoin.com"
pkgver='autogenerated'
pkggopath="github.com/${githuborg}/${pkgname1}"
pkgrel=2
arch=('any')
url="https://${pkggopath}"
license=()
makedepends=(git go gcc)
provides=('skywire')
conflicts=('skywire-mainnet')
source=("git+${url}.git#branch=${BRANCH:-master}"
"https://raw.githubusercontent.com/0pcom/skycoin_archlinux_packages/master/key"
"skywire-scripts.tar.gz"
"skywire-systemd.tar.gz")
sha256sums=('SKIP'
            '41c0a4a42ae64479b008392053f4a947618acd6bb9c3ed2672dafdb2453caa14'
            'ba2d150094f3cc9c182c051532bc2848b0d8f32276dced6a4a15201bb67db665'
            '4b49b82e04abe3d51073e339fc133a52926cfc8d905d5fd6b823c0762f32451b')
#tar -czvf skywire-scripts.tar.gz skywire-scripts
#tar -czvf skywire-systemd.tar.gz skywire-systemd
export GOOS=linux
export GOPATH=${srcdir}
export CGO_ENABLED=0

case "$CARCH" in
x86)      export GOARCH="386" GO386="387" ;;
x86_64)   export GOARCH="amd64" ;;
arm*)     export GOARCH="arm" ;;
armel)    export GOARCH="arm" GOARM="5" ;;
armhf)    export GOARCH="arm" GOARM="6" ;;
armv7)    export GOARCH="arm" GOARM="7" ;;
armv8)    export GOARCH="arm64" ;;
aarch64)  export GOARCH="arm64" ;;
mips)     export GOARCH="mips" ;;
mips64)   export GOARCH="mips64" ;;
mips64el) export GOARCH="mips64le" ;;
mipsel)   export GOARCH="mipsle" ;;
*)        return 1 ;;
	esac

pkgver() {
	cd ${srcdir}/${pkgname1}
	local date=$(git log -1 --format="%cd" --date=short | sed s/-//g)
	local count=$(git rev-list --count HEAD)
	local commit=$(git rev-parse --short HEAD)
	echo "${date}.${count}_${commit}"
}

prepare() {
	gpg --import key
	#verify PKGBUILD signature
	gpg --verify ../PKGBUILD.sig ../PKGBUILD
	# https://wiki.archlinux.org/index.php/Go_package_guidelines
	mkdir -p ${srcdir}/go/src/github.com/${githuborg}/ ${srcdir}/go/bin
	ln -rTsf ${srcdir}/${pkgname1} ${srcdir}/go/src/github.com/${githuborg}/${pkgname1}
	cd ${srcdir}/go/src/github.com/${githuborg}/${pkgname1}/cmd
	git checkout master
	git submodule --quiet update --init --recursive
}

build() {
	export GOPATH=${srcdir}/go
	export GOBIN=${GOPATH}/bin
	export PATH=${GOPATH}/bin:${PATH}
	cd ${srcdir}/go/src/github.com/${githuborg}/${pkgname1}/cmd
	go install \
	-gcflags "all=-trimpath=${GOPATH}" \
	-asmflags "all=-trimpath=${GOPATH}" \
	-ldflags "-extldflags ${LDFLAGS}" \
	-v ./...
}

package() {
	options=(!strip staticlibs)
	#create directory trees
	mkdir -p ${pkgdir}/usr/bin
	mkdir -p ${pkgdir}/usr/lib/${projectname}/go/bin
	mkdir -p ${pkgdir}/usr/lib/${projectname}/${pkgname1}/
	#restate go envs
	export GOPATH=${pkgdir}/usr/lib/${projectname}/go
	export GOBIN=${pkgdir}/usr/lib/${projectname}/go/bin
	#install binaries & symlink to /usr/bin
	msg2 'installing binaries'
	skybins=${srcdir}/go/bin
	#collect the binaries & install
	skywirebins=$(ls $srcdir/go/bin/)
	for i in ${skywirebins}; do
		install -Dm755 ${srcdir}/go/bin/${i} ${pkgdir}/usr/lib/${projectname}/go/bin/${i}
		ln -rTsf ${pkgdir}/usr/lib/${projectname}/go/bin/${i} ${pkgdir}/usr/bin/${pkgname1}-${i}
		chmod 755 ${pkgdir}/usr/lib/${projectname}/go/bin/${i}
	done
	mv ${pkgdir}/usr/bin/${pkgname1}-${pkgname1}-manager ${pkgdir}/usr/bin/${pkgname1}-manager
	mv ${pkgdir}/usr/bin/${pkgname1}-${pkgname1}-node ${pkgdir}/usr/bin/${pkgname1}-node
	#install the web dir
	cp -r ${srcdir}/${pkgname1}/static ${pkgdir}/usr/lib/${projectname}/${pkgname1}/
	mkdir -p ${pkgdir}/usr/share/doc/${projectname}/${pkgname1}
	#install the docs
	cp -r ${srcdir}/${pkgname1}/docs/api ${pkgdir}/usr/share/doc/${projectname}/${pkgname1}-manager
	#install the scripts
	skywirescripts=$(ls $srcdir/$pkgname1-scripts/)
	for i in ${skywirescripts}; do
		install -Dm755 ${srcdir}/${pkgname1}-scripts/${i} ${pkgdir}/usr/lib/${projectname}/go/bin/${i}
		ln -rTsf ${pkgdir}/usr/lib/${projectname}/go/bin/${i} ${pkgdir}/usr/bin/${i}
		chmod 755 ${pkgdir}/usr/lib/${projectname}/go/bin/${i}
	done
	#install the system.d services
	install -Dm644 ${srcdir}/${pkgname1}-systemd/${pkgname1}-manager.service ${pkgdir}/usr/lib/systemd/system/${pkgname1}-manager.service
	install -Dm644 ${srcdir}/${pkgname1}-systemd/${pkgname1}-node.service ${pkgdir}/usr/lib/systemd/system/${pkgname1}-node.service
}
