From 771ef9ede88c6845e1f30d7fff7c4a698f972ae8 Mon Sep 17 00:00:00 2001
From: Matt Bierner <matb@microsoft.com>
Date: Thu, 17 Aug 2017 15:12:22 -0700
Subject: [PATCH] Show invalid version string if ts version cannot be
 determined

---
 extensions/typescript/src/utils/api.ts             | 55 +++++++++++-----------
 extensions/typescript/src/utils/versionProvider.ts |  4 +-
 2 files changed, 30 insertions(+), 29 deletions(-)

diff --git a/extensions/typescript/src/utils/api.ts b/extensions/typescript/src/utils/api.ts
index 87749afc8e..4fa9f1d5cb 100644
--- a/extensions/typescript/src/utils/api.ts
+++ b/extensions/typescript/src/utils/api.ts
@@ -4,64 +4,65 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as semver from 'semver';
+import * as nls from 'vscode-nls';
+const localize = nls.loadMessageBundle();
 
 export default class API {
-	public static readonly defaultVersion = new API('1.0.0');
+	public static readonly defaultVersion = new API('1.0.0', '1.0.0');
 
-	private readonly _version: string;
+	public static fromVersionString(versionString: string): API {
+		let version = semver.valid(versionString);
+		if (!version) {
+			return new API(localize('invalidVersion', 'invalid version'), '1.0.0');
+		}
 
-	constructor(
-		private readonly _versionString: string
-	) {
-		this._version = semver.valid(_versionString);
-		if (!this._version) {
-			this._version = '1.0.0';
-		} else {
-			// Cut of any prerelease tag since we sometimes consume those
-			// on purpose.
-			let index = _versionString.indexOf('-');
-			if (index >= 0) {
-				this._version = this._version.substr(0, index);
-			}
+		// Cut of any prerelease tag since we sometimes consume those on purpose.
+		const index = versionString.indexOf('-');
+		if (index >= 0) {
+			version = version.substr(0, index);
 		}
+		return new API(versionString, version);
 	}
 
-	public get versionString(): string {
-		return this._versionString;
-	}
+	private constructor(
+		public readonly versionString: string,
+		private readonly version: string
+	) { }
+
 
 	public has203Features(): boolean {
-		return semver.gte(this._version, '2.0.3');
+		return semver.gte(this.version, '2.0.3');
 	}
 
 	public has206Features(): boolean {
-		return semver.gte(this._version, '2.0.6');
+		return semver.gte(this.version, '2.0.6');
 	}
 
 	public has208Features(): boolean {
-		return semver.gte(this._version, '2.0.8');
+		return semver.gte(this.version, '2.0.8');
 	}
 
 	public has213Features(): boolean {
-		return semver.gte(this._version, '2.1.3');
+		return semver.gte(this.version, '2.1.3');
 	}
 
 	public has220Features(): boolean {
-		return semver.gte(this._version, '2.2.0');
+		return semver.gte(this.version, '2.2.0');
 	}
 
 	public has222Features(): boolean {
-		return semver.gte(this._version, '2.2.2');
+		return semver.gte(this.version, '2.2.2');
 	}
 
 	public has230Features(): boolean {
-		return semver.gte(this._version, '2.3.0');
+		return semver.gte(this.version, '2.3.0');
 	}
 
 	public has234Features(): boolean {
-		return semver.gte(this._version, '2.3.4');
+		return semver.gte(this.version, '2.3.4');
 	}
+
 	public has240Features(): boolean {
-		return semver.gte(this._version, '2.4.0');
+		return semver.gte(this.version, '2.4.0');
 	}
 }
\ No newline at end of file
diff --git a/extensions/typescript/src/utils/versionProvider.ts b/extensions/typescript/src/utils/versionProvider.ts
index 57edf0d511..a0a61db387 100644
--- a/extensions/typescript/src/utils/versionProvider.ts
+++ b/extensions/typescript/src/utils/versionProvider.ts
@@ -41,7 +41,7 @@ export class TypeScriptVersion {
 		// Allow TS developers to provide custom version
 		const tsdkVersion = workspace.getConfiguration().get<string | undefined>('typescript.tsdk_version', undefined);
 		if (tsdkVersion) {
-			return new API(tsdkVersion);
+			return API.fromVersionString(tsdkVersion);
 		}
 
 		return undefined;
@@ -78,7 +78,7 @@ export class TypeScriptVersion {
 		if (!desc || !desc.version) {
 			return undefined;
 		}
-		return desc.version ? new API(desc.version) : undefined;
+		return desc.version ? API.fromVersionString(desc.version) : undefined;
 	}
 }
 
-- 
2.14.1

