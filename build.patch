# make an own build.xml because the sources do not contain all build files
Index: chatty-0.8.2/build.xml
===================================================================
--- chatty-0.8.2.orig/build.xml	2016-04-26 22:53:02.932618803 +0200
+++ chatty-0.8.2/build.xml	2016-04-26 22:53:39.409388013 +0200
@@ -1,79 +1,29 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- You may freely edit this file. See commented blocks below for -->
-<!-- some examples of how to customize the build. -->
-<!-- (If you delete it and reopen the project it will be recreated.) -->
-<!-- By default, only the Clean and Build commands use this build script. -->
-<!-- Commands such as Run, Debug, and Test only use this build script if -->
-<!-- the Compile on Save feature is turned off for the project. -->
-<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
-<!-- in the project's Project Properties dialog box.-->
-<project name="Chatty" default="default" basedir=".">
-    <description>Builds, tests, and runs the project Chatty.</description>
-    <import file="nbproject/build-impl.xml"/>
-    <!--
-
-    There exist several targets which are by default empty and which can be 
-    used for execution of your tasks. These targets are usually executed 
-    before and after some main targets. They are: 
-
-      -pre-init:                 called before initialization of project properties
-      -post-init:                called after initialization of project properties
-      -pre-compile:              called before javac compilation
-      -post-compile:             called after javac compilation
-      -pre-compile-single:       called before javac compilation of single file
-      -post-compile-single:      called after javac compilation of single file
-      -pre-compile-test:         called before javac compilation of JUnit tests
-      -post-compile-test:        called after javac compilation of JUnit tests
-      -pre-compile-test-single:  called before javac compilation of single JUnit test
-      -post-compile-test-single: called after javac compilation of single JUunit test
-      -pre-jar:                  called before JAR building
-      -post-jar:                 called after JAR building
-      -post-clean:               called after cleaning build products
-
-    (Targets beginning with '-' are not intended to be called on their own.)
-
-    Example of inserting an obfuscator after compilation could look like this:
-
-        <target name="-post-compile">
-            <obfuscate>
-                <fileset dir="${build.classes.dir}"/>
-            </obfuscate>
-        </target>
-
-    For list of available properties check the imported 
-    nbproject/build-impl.xml file. 
-
-
-    Another way to customize the build is by overriding existing main targets.
-    The targets of interest are: 
-
-      -init-macrodef-javac:     defines macro for javac compilation
-      -init-macrodef-junit:     defines macro for junit execution
-      -init-macrodef-debug:     defines macro for class debugging
-      -init-macrodef-java:      defines macro for class execution
-      -do-jar-with-manifest:    JAR building (if you are using a manifest)
-      -do-jar-without-manifest: JAR building (if you are not using a manifest)
-      run:                      execution of project 
-      -javadoc-build:           Javadoc generation
-      test-report:              JUnit report generation
-
-    An example of overriding the target for project execution could look like this:
-
-        <target name="run" depends="Chatty-impl.jar">
-            <exec dir="bin" executable="launcher.exe">
-                <arg file="${dist.jar}"/>
-            </exec>
-        </target>
-
-    Notice that the overridden target depends on the jar target and not only on 
-    the compile target as the regular run target does. Again, for a list of available 
-    properties which you can use, check the target you are overriding in the
-    nbproject/build-impl.xml file. 
-
-    -->
-	<target name="-post-jar">
-		<copy todir="${dist.dir}/sounds/">
-			<fileset dir="assets/sounds" />
-		</copy>
-	</target>
+<project name="chatty" default="jar">
+  <target name="clean">
+    <delete dir="bin"/>
+    <delete dir="dist"/>
+    <delete dir="assets/lib/dlls"/>
+  </target>
+
+  <target name="compile" depends="clean">
+     <mkdir dir="bin"/>
+     <javac srcdir="src/chatty" encoding="utf-8" destdir="bin">
+        <classpath>
+           <fileset dir="assets/lib">
+              <include name="**/*.jar" />
+           </fileset>
+        </classpath>
+     </javac>
+     <copy  todir="bin">
+       <fileset dir="src" excludes="**/*.java"/>
+     </copy>
+  </target>
+
+  <target name="jar" depends="compile">
+     <mkdir dir="dist"/>
+     <jar manifest="manifest.mf" destfile="dist/chatty.jar">
+        <fileset dir="bin" />
+        <zipgroupfileset dir="assets/lib" />
+     </jar>
+  </target>
 </project>
