From 464391e216400874a46679b6f978e0c36a040e5c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Wei=C3=9Fschuh?= <thomas@t-8ch.de>
Date: Tue, 8 Jun 2021 00:24:00 +0200
Subject: [PATCH 1/3] ao_pipewire: whitespace fixes

---
 audio/out/ao_pipewire.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/audio/out/ao_pipewire.c b/audio/out/ao_pipewire.c
index 79965cdc68b..b0102bee8ea 100644
--- a/audio/out/ao_pipewire.c
+++ b/audio/out/ao_pipewire.c
@@ -121,9 +121,9 @@ static void on_param_changed(void *userdata, uint32_t id, const struct spa_pod *
 {
     struct ao *ao = userdata;
     struct priv *p = ao->priv;
-	const struct spa_pod *params[1];
-	uint8_t buffer[1024];
-	struct spa_pod_builder b = SPA_POD_BUILDER_INIT(buffer, sizeof(buffer));
+    const struct spa_pod *params[1];
+    uint8_t buffer[1024];
+    struct spa_pod_builder b = SPA_POD_BUILDER_INIT(buffer, sizeof(buffer));
 
     if (param == NULL || id != SPA_PARAM_Format)
         return;

From af10f39b030a0d5c985c8f7d04bf7f7ea2904d5e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Wei=C3=9Fschuh?= <thomas@t-8ch.de>
Date: Tue, 8 Jun 2021 00:24:06 +0200
Subject: [PATCH 2/3] ao_pipewire: add more application properties

---
 audio/out/ao_pipewire.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/audio/out/ao_pipewire.c b/audio/out/ao_pipewire.c
index b0102bee8ea..9f2a66ad845 100644
--- a/audio/out/ao_pipewire.c
+++ b/audio/out/ao_pipewire.c
@@ -8,6 +8,7 @@
 #include "ao.h"
 #include "audio/format.h"
 #include "config.h"
+#include "generated/version.h"
 #include "internal.h"
 #include "osdep/timer.h"
 
@@ -222,7 +223,10 @@ static int init(struct ao *ao)
                         PW_KEY_MEDIA_TYPE, "Audio",
                         PW_KEY_MEDIA_CATEGORY, "Playback",
                         PW_KEY_MEDIA_ROLE, "Music",
-                        PW_KEY_NODE_NAME, "mpv",
+                        PW_KEY_NODE_NAME, ao->client_name,
+                        PW_KEY_APP_NAME, ao->client_name,
+                        PW_KEY_APP_ID, ao->client_name,
+                        PW_KEY_APP_ICON_NAME, ao->client_name,
                         PW_KEY_NODE_LATENCY, latency_str,
                         NULL),
                     &stream_events,

From 3df9d344f0c05df90b421bbde3616be8f84d9f35 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Thomas=20Wei=C3=9Fschuh?= <thomas@t-8ch.de>
Date: Tue, 8 Jun 2021 00:24:11 +0200
Subject: [PATCH 3/3] ap_pipewire: implement audio controls

---
 audio/out/ao_pipewire.c | 95 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 95 insertions(+)

diff --git a/audio/out/ao_pipewire.c b/audio/out/ao_pipewire.c
index 9f2a66ad845..a5c4322eebe 100644
--- a/audio/out/ao_pipewire.c
+++ b/audio/out/ao_pipewire.c
@@ -1,6 +1,8 @@
 
 #include <pipewire/pipewire.h>
 #include <spa/param/audio/format-utils.h>
+#include <spa/param/props.h>
+#include <math.h>
 
 #include "common/msg.h"
 #include "options/m_config.h"
@@ -33,6 +35,8 @@ struct priv {
     struct pw_stream *stream;
 
     struct ao_pipewire_opts *opts;
+    bool muted;
+    float volume[2];
 };
 
 static enum spa_audio_format af_fmt_to_pw(enum af_format format)
@@ -151,11 +155,44 @@ static void on_state_changed(void *userdata, enum pw_stream_state old, enum pw_s
     }
 }
 
+static float spa_volume_to_mp_volume(float vol)
+{
+        return cbrt(vol) * 100;
+}
+
+static float mp_volume_to_spa_volume(float vol)
+{
+        vol /= 100;
+        return vol * vol * vol;
+}
+
+static void on_control_info(void *userdata, uint32_t id,
+        const struct pw_stream_control *control)
+{
+    struct ao *ao = userdata;
+    struct priv *p = ao->priv;
+
+    switch (id) {
+        case SPA_PROP_mute:
+            if (control->n_values == 1)
+                p->muted = control->values[0] >= 0.5;
+            break;
+        case SPA_PROP_channelVolumes:
+            if (control->n_values == 2) {
+                p->volume[0] = control->values[0];
+                p->volume[1] = control->values[1];
+            }
+            break;
+    }
+}
+
+
 static const struct pw_stream_events stream_events = {
     .version = PW_VERSION_STREAM_EVENTS,
     .param_changed = on_param_changed,
     .process = on_process,
     .state_changed = on_state_changed,
+    .control_info = on_control_info,
 };
 
 static void uninit(struct ao *ao)
@@ -269,6 +306,62 @@ static void start(struct ao *ao)
     pw_thread_loop_unlock(p->loop);
 }
 
+#define CONTROL_RET(r) (!r ? CONTROL_OK : CONTROL_ERROR)
+
+static int control(struct ao *ao, enum aocontrol cmd, void *arg)
+{
+    struct priv *p = ao->priv;
+
+    switch (cmd) {
+        case AOCONTROL_GET_VOLUME: {
+                struct ao_control_vol *vol = arg;
+                vol->left = spa_volume_to_mp_volume(p->volume[0]);
+                vol->right = spa_volume_to_mp_volume(p->volume[1]);
+                return CONTROL_OK;
+        }
+        case AOCONTROL_GET_MUTE: {
+                bool *muted = arg;
+                *muted = p->muted;
+                return CONTROL_OK;
+        }
+        case AOCONTROL_SET_VOLUME:
+        case AOCONTROL_SET_MUTE:
+        case AOCONTROL_UPDATE_STREAM_TITLE: {
+            int ret;
+
+            pw_thread_loop_lock(p->loop);
+            switch (cmd) {
+                case AOCONTROL_SET_VOLUME: {
+                    struct ao_control_vol *vol = arg;
+                    float left = mp_volume_to_spa_volume(vol->left), right = mp_volume_to_spa_volume(vol->right);
+                    ret = CONTROL_RET(pw_stream_set_control(p->stream, SPA_PROP_channelVolumes, 2, &left, &right));
+                    break;
+               }
+                case AOCONTROL_SET_MUTE: {
+                    bool *muted = arg;
+                    float value = *muted ? 1.f : 0.f;
+                    ret = CONTROL_RET(pw_stream_set_control(p->stream, SPA_PROP_mute, 1, &value));
+                    break;
+                }
+                case AOCONTROL_UPDATE_STREAM_TITLE: {
+                    char *title = arg;
+                    struct spa_dict_item items[1];
+                    items[0] = SPA_DICT_ITEM_INIT(PW_KEY_MEDIA_NAME, title);
+                    ret = CONTROL_RET(pw_stream_update_properties(p->stream, &SPA_DICT_INIT(items, MP_ARRAY_SIZE(items))));
+                    break;
+                }
+                default:
+                    ret = CONTROL_NA;
+            }
+            pw_thread_loop_unlock(p->loop);
+            return ret;
+        }
+        default:
+            return CONTROL_UNKNOWN;
+    }
+}
+
+
 const struct ao_driver audio_out_pipewire = {
     .description = "PipeWire audio output",
     .name        = "pipewire",
@@ -278,6 +371,8 @@ const struct ao_driver audio_out_pipewire = {
     .reset       = reset,
     .start       = start,
 
+    .control     = control,
+
     .priv_size = sizeof(struct priv),
     .priv_defaults = &(const struct priv)
     {
