--- pdb2pqr/__init__.py	2020-07-03 20:02:43.000000000 +0300
+++ pdb2pqr/__init__.py	2020-08-25 20:48:59.940600307 +0300
@@ -6,11 +6,11 @@
 For more information, see http://www.poissonboltzmann.org/
 """
 import logging
 from sys import version_info
 assert version_info >= (3, 5)
-from .main import main, build_parser
+from .main import main_driver, build_parser
 
 
 _LOGGER = logging.getLogger(__name__)
 logging.captureWarnings(True)
 
@@ -18,6 +18,6 @@
 if __name__ == "__main__":
     logging.basicConfig(level=logging.DEBUG)
     logging.captureWarnings(True)
     parser = build_parser()
     args = parser.parse_args()
-    main(args)
+    main_driver(args)
--- pdb2pqr/__main__.py	2020-07-03 20:02:43.000000000 +0300
+++ pdb2pqr/__main__.py	2020-08-25 20:49:15.213902523 +0300
@@ -6,11 +6,11 @@
 For more information, see http://www.poissonboltzmann.org/
 """
 import logging
 from sys import version_info
 assert version_info >= (3, 5)
-from pdb2pqr.main import main, build_parser
+from pdb2pqr.main import main_driver, build_parser
 
 
 _LOGGER = logging.getLogger(__name__)
 logging.captureWarnings(True)
 
@@ -18,6 +18,6 @@
 if __name__ == "__main__":
     logging.basicConfig(level=logging.DEBUG)
     logging.captureWarnings(True)
     parser = build_parser()
     args = parser.parse_args()
-    main(args)
+    main_driver(args)
--- pdb2pqr/main.py	2020-07-03 20:02:43.000000000 +0300
+++ pdb2pqr/main.py	2020-08-25 20:50:27.673754924 +0300
@@ -533,11 +533,11 @@
     lines = io.print_protein_atoms(matched_atoms, args.keep_chain)
 
     return {"lines": lines, "header": header, "missed_residues": missing_atoms}
 
 
-def main(args):
+def main_driver(args):
     """Main driver for running program from the command line.
 
     Validate inputs, launch PDB2PQR, handle output.
 
     Args:
@@ -581,5 +581,12 @@
               missing_lines=results["missed_residues"], is_cif=is_cif)
 
     if args.apbs_input:
         raise NotImplementedError("Missing argument for APBS input file.")
         io.dump_apbs(args.output_pqr)
+
+
+def main():
+    """Hook for command-line usage."""
+    parser = build_parser()
+    args = parser.parse_args()
+    main_driver(args)
