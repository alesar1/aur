--- ./src/Makefile.old	2019-05-19 11:02:52.666559482 +0200
+++ ./src/Makefile	2019-05-19 11:09:34.651427078 +0200
@@ -227,20 +227,26 @@
 	$(CC) $(CFLAGS) -Ibackup/libcd64 -c $< -o $@
 
 
+# The following lines which make use of and quote $(CFLAGS0) have been patched
+# by the arch ucon64 AUR package: https://aur.archlinux.org/packages/ucon64/
+# It resolves an issue where the build will fail if a user supplies a custom
+# CFLAGS argument which contains multiple parameters, e.g
+# $ CFLAGS="-O2 -ggdb3" make
+# which doesn't impede the normal build process, but makes debugging a pain.
 ifdef USE_DISCMAGE
 .PHONY: libdiscmage/$(FULLLIBNAME_DM)
 libdiscmage/$(FULLLIBNAME_DM):
 ifeq ($(GCC_WIN),1)
-	cd libdiscmage && CFLAGS=$(CFLAGS0) LDFLAGS=$(LDFLAGS0) $(MAKE)
+	cd libdiscmage && CFLAGS="$(CFLAGS0)" LDFLAGS=$(LDFLAGS0) $(MAKE)
 else
 ifdef DJGPP
 	cd libdiscmage
-	set CFLAGS=$(CFLAGS0)
+	set CFLAGS="$(CFLAGS0)"
 	set LDFLAGS=$(LDFLAGS0)
 	$(MAKE)
 	cd ..
 else
-	cd libdiscmage && CFLAGS=$(CFLAGS0) LDFLAGS=$(LDFLAGS0) $(MAKE)
+	cd libdiscmage && CFLAGS="$(CFLAGS0)" LDFLAGS=$(LDFLAGS0) $(MAKE)
 endif                                   # DJGPP
 endif                                   # GCC_WIN
 endif                                   # USE_DISCMAGE
@@ -250,16 +256,16 @@
 #.PHONY: backup/libcd64/libcd64.a  Do not force linking an executable.
 backup/libcd64/libcd64.a:
 ifeq ($(GCC_WIN),1)
-	cd backup/libcd64 && CFLAGS=$(CFLAGS0) LDFLAGS=$(LDFLAGS0) $(MAKE)
+	cd backup/libcd64 && CFLAGS="$(CFLAGS0)" LDFLAGS=$(LDFLAGS0) $(MAKE)
 else
 ifdef DJGPP
 	cd backup/libcd64
-	set CFLAGS=$(CFLAGS0)
+	set CFLAGS="$(CFLAGS0)"
 	set LDFLAGS=$(LDFLAGS0)
 	$(MAKE)
 	cd ../..
 else
-	cd backup/libcd64 && CFLAGS=$(CFLAGS0) LDFLAGS=$(LDFLAGS0) $(MAKE)
+	cd backup/libcd64 && CFLAGS="$(CFLAGS0)" LDFLAGS=$(LDFLAGS0) $(MAKE)
 endif                                   # DJGPP
 endif                                   # GCC_WIN
 endif                                   # USE_LIBCD64
