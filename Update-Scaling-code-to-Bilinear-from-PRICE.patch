diff --git a/Inspector/ContentViewers/ImageViewer/Resizer.m b/Inspector/ContentViewers/ImageViewer/Resizer.m
index 14b7ea9c..46a67fdb 100644
--- a/Inspector/ContentViewers/ImageViewer/Resizer.m
+++ b/Inspector/ContentViewers/ImageViewer/Resizer.m
@@ -1,6 +1,6 @@
 /* Resizer.m
  *  
- * Copyright (C) 2005-2016 Free Software Foundation, Inc.
+ * Copyright (C) 2005-2020 Free Software Foundation, Inc.
  *
  * Author: Enrico Sersale <enrico@imago.ro>
  *         Riccardo Mottola <rm@gnu.org>
@@ -87,46 +87,47 @@ - (void)readImageAtPath:(NSString *)path
   if (srcImage && [srcImage isValid])
     {
       NSData *srcData = [srcImage TIFFRepresentation];
-      NSBitmapImageRep *srcRep;
+      NSBitmapImageRep *srcImageRep;
       NSInteger srcSpp;
       NSInteger bitsPerPixel;
-      NSInteger srcsizeW;
-      NSInteger srcsizeH;
+      NSInteger srcSizeW;
+      NSInteger srcSizeH;
       NSInteger srcBytesPerPixel;
       NSInteger srcBytesPerRow;
       NSEnumerator *repEnum;
       NSImageRep *imgRep;
     
       repEnum = [[srcImage representations] objectEnumerator];
-      srcRep = nil;
+      srcImageRep = nil;
       imgRep = nil;
-      while (srcRep == nil && (imgRep = [repEnum nextObject]))
+      while (srcImageRep == nil && (imgRep = [repEnum nextObject]))
         {
           if ([imgRep isKindOfClass:[NSBitmapImageRep class]])
-            srcRep = (NSBitmapImageRep *)imgRep;
+            srcImageRep = (NSBitmapImageRep *)imgRep;
         }
       
-      srcSpp = [srcRep samplesPerPixel];
-      bitsPerPixel = [srcRep bitsPerPixel];
-      srcsizeW = [srcRep pixelsWide];
-      srcsizeH = [srcRep pixelsHigh];
-      srcBytesPerPixel = [srcRep bitsPerPixel] / 8;
-      srcBytesPerRow = [srcRep bytesPerRow];
+      srcSpp = [srcImageRep samplesPerPixel];
+      bitsPerPixel = [srcImageRep bitsPerPixel];
+      srcSizeW = [srcImageRep pixelsWide];
+      srcSizeH = [srcImageRep pixelsHigh];
+      srcBytesPerPixel = [srcImageRep bitsPerPixel] / 8;
+      srcBytesPerRow = [srcImageRep bytesPerRow];
       
-      [info setObject: [NSNumber numberWithFloat: (float)srcsizeW] forKey: @"width"];
-      [info setObject: [NSNumber numberWithFloat: (float)srcsizeH] forKey: @"height"];
+      [info setObject: [NSNumber numberWithFloat: (float)srcSizeW] forKey: @"width"];
+      [info setObject: [NSNumber numberWithFloat: (float)srcSizeH] forKey: @"height"];
       
-      if (((imsize.width < srcsizeW) || (imsize.height < srcsizeH))
+      if (((imsize.width < srcSizeW) || (imsize.height < srcSizeH))
           && (((srcSpp == 3) && (bitsPerPixel == 24)) 
               || ((srcSpp == 4) && (bitsPerPixel == 32))
               || ((srcSpp == 1) && (bitsPerPixel == 8))
               || ((srcSpp == 2) && (bitsPerPixel == 16))))
         {
+	  NSInteger srcSamplesPerPixel;
           NSInteger destSamplesPerPixel = srcSpp;
           NSInteger destBytesPerRow;
           NSInteger destBytesPerPixel;
-          NSInteger dstsizeW, dstsizeH;
-          float xratio, yratio;
+          NSInteger dstSizeW, dstSizeH;
+          float xRatio, yRatio;
           NSBitmapImageRep *dstRep;
           NSData *tiffData;
           unsigned char *srcData;
@@ -134,63 +135,114 @@ - (void)readImageAtPath:(NSString *)path
           unsigned x, y;
           unsigned i;
           
-      if ((imsize.width / srcsizeW) <= (imsize.height / srcsizeH)) {
-        dstsizeW = floor(imsize.width + 0.5);
-        dstsizeH = floor(dstsizeW * srcsizeH / srcsizeW + 0.5);
-      } else {
-        dstsizeH = floor(imsize.height + 0.5);
-        dstsizeW= floor(dstsizeH * srcsizeW / srcsizeH + 0.5);    
-      }
-
-      xratio = (float)srcsizeW / (float)dstsizeW;
-      yratio = (float)srcsizeH / (float)dstsizeH;
-
-      destSamplesPerPixel = [srcRep samplesPerPixel];
-      dstRep = [[NSBitmapImageRep alloc]
+	  if ((imsize.width / srcSizeW) <= (imsize.height / srcSizeH)) {
+	    dstSizeW = floor(imsize.width + 0.5);
+	    dstSizeH = floor(dstSizeW * srcSizeH / srcSizeW + 0.5);
+	  } else {
+	    dstSizeH = floor(imsize.height + 0.5);
+	    dstSizeW= floor(dstSizeH * srcSizeW / srcSizeH + 0.5);    
+	  }
+
+	  xRatio = (float)srcSizeW / (float)dstSizeW;
+	  yRatio = (float)srcSizeH / (float)dstSizeH;
+
+	  srcSamplesPerPixel = [srcImageRep samplesPerPixel];
+	  destSamplesPerPixel = [srcImageRep samplesPerPixel];
+	  dstRep = [[NSBitmapImageRep alloc]
                      initWithBitmapDataPlanes:NULL
-                     pixelsWide:dstsizeW
-                     pixelsHigh:dstsizeH
-                     bitsPerSample:8
-                     samplesPerPixel:destSamplesPerPixel
-                     hasAlpha:[srcRep hasAlpha]
-                     isPlanar:NO
-                     colorSpaceName:[srcRep colorSpaceName]
-                     bytesPerRow:0
-                     bitsPerPixel:0];
-
-      srcData = [srcRep bitmapData];
-      destData = [dstRep bitmapData];
-
-      destBytesPerRow = [dstRep bytesPerRow];
-      destBytesPerPixel = [dstRep bitsPerPixel] / 8;
-
-      for (y = 0; y < dstsizeH; y++)
-        for (x = 0; x < dstsizeW; x++)
-          for (i = 0; i < srcSpp; i++)
-            destData[destBytesPerRow * y + destBytesPerPixel * x + i] = srcData[srcBytesPerRow * (int)(y * yratio)  + srcBytesPerPixel * (int)(x * xratio) + i];
+				   pixelsWide:dstSizeW
+				   pixelsHigh:dstSizeH
+				bitsPerSample:8
+			      samplesPerPixel:destSamplesPerPixel
+				     hasAlpha:[srcImageRep hasAlpha]
+				     isPlanar:NO
+			       colorSpaceName:[srcImageRep colorSpaceName]
+				  bytesPerRow:0
+				 bitsPerPixel:0];
+
+	  srcData = [srcImageRep bitmapData];
+	  destData = [dstRep bitmapData];
+
+	  destBytesPerRow = [dstRep bytesPerRow];
+	  destBytesPerPixel = [dstRep bitsPerPixel] / 8;
+
+	  for (y = 0; y < dstSizeH; y++)
+	    {
+	      for (x = 0; x < dstSizeW; x++)
+		{
+		  register NSInteger x0, y0;
+		  register float xDiff, yDiff;
+		  float xFloat, yFloat;
+		  NSInteger x1, y1;
+		  int xStep, yStep;
+
+		  // we use integer part of the ratio, so that we can set the next pixel to at least one apart
+		  xStep = floorf(xRatio);
+		  yStep = floorf(yRatio);
+		  if (xStep == 0) xStep = 1;
+		  if (yStep == 0) yStep = 1;
+		  xFloat = (float)x * xRatio;
+		  yFloat = (float)y * yRatio;
+		  x0 = (NSInteger)floorf(xFloat);
+		  y0 = (NSInteger)floorf(yFloat);
+		  x1 = x0 + xStep;
+		  y1 = y0 + yStep;
+
+		  // these are the weight w and h, normalized to the distance 1 : x1-x0
+		  xDiff = (xFloat - (float)x0)/(float)xStep;
+		  yDiff = (yFloat - (float)y0)/(float)yStep;
+
+		  if (x1 >= srcSizeW )
+		    {
+		      x1 = srcSizeW-1;
+		      xDiff = 0;
+		    }
+		  if (y1 >= srcSizeH )
+		    {
+		      y1 = srcSizeH-1;
+		      yDiff = 0;
+		    }
+              
+		  for (i = 0; i < srcSamplesPerPixel; i++)
+		    {
+		      int v1, v2, v3, v4;
+
+		      v1 = srcData[srcBytesPerRow * y0 + srcBytesPerPixel * x0 + i];
+		      v2 = srcData[srcBytesPerRow * y0 + srcBytesPerPixel * x1 + i];
+		      v3 = srcData[srcBytesPerRow * y1 + srcBytesPerPixel * x0 + i];
+		      v4 = srcData[srcBytesPerRow * y1 + srcBytesPerPixel * x1 + i];
+                  
+		      destData[destBytesPerRow * y + destBytesPerPixel * x + i] = \
+			(int)(v1*(1-xDiff)*(1-yDiff) +			\
+			      v2*xDiff*(1-yDiff) +				\
+			      v3*yDiff*(1-xDiff) +				\
+			      v4*xDiff*yDiff);
+		    }
+		}
+	    }
   
-      NS_DURING
-        {
-          tiffData = [dstRep TIFFRepresentation];   
-        }
-      NS_HANDLER
-        {
-          tiffData = nil;
-        }
-      NS_ENDHANDLER
-
-      if (tiffData) {
-        [info setObject: tiffData forKey:@"imgdata"];
-      } 
-
-      RELEASE (dstRep);
+	  NS_DURING
+	    {
+	      tiffData = [dstRep TIFFRepresentation];   
+	    }
+	  NS_HANDLER
+	    {
+	      tiffData = nil;
+	    }
+	  NS_ENDHANDLER
+
+	    if (tiffData) {
+	      [info setObject: tiffData forKey:@"imgdata"];
+	    } 
+
+	  RELEASE (dstRep);
       
-    } else {
+	} else {
         [info setObject: srcData forKey:@"imgdata"];
-    }
+      }
     
-    RELEASE (srcImage);
-  }
+      RELEASE (srcImage);
+    }
   [(id <ImageViewerProtocol>)[serverConnection rootProxy] imageReady: info];
   RELEASE (arp);
 }
