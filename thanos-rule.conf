# Log filtering level.
LOG_LEVEL="--log.level=info"

# Log format to use.
LOG_FORMAT="--log.format=logfmt"

# GCP project to send Google Cloud Trace tracings to.
# If empty, tracing will be disabled.
#GCLOUDTRACE_PROJECT="--gcloudtrace.project=GCLOUDTRACE.PROJECT"

# How often we send traces (1/<sample-factor>).
# If 0 no trace will be sent periodically, unless forced
# by baggage item. See `pkg/tracing/tracing.go` for details.
#GCLOUDTRACE_SAMPLE="--gcloudtrace.sample-factor=1"

# Listen ip:port address for gRPC endpoints (StoreAPI).
# Make sure this address is routable from other components
# if you use gossip, 'grpc-advertise-address'
# is empty and you require cross-node connection.
#GRPC_ADDRESS="--grpc-address=0.0.0.0:10901"

# Explicit (external) host:port address to advertise
# for gRPC StoreAPI in gossip cluster. If empty, 'grpc-address' will be used.
#GRPC_ADVERTISE_ADDRESS="--grpc-advertise-address=GRPC-ADVERTISE-ADDRESS"

# TLS Certificate for gRPC server, leave blank to disable TLS
#GRPC_SERVER_TLS_CERT="--grpc-server-tls-cert="

# TLS Key for the gRPC server, leave blank to disable TLS
#GRPC_SERVER_TLS_KEY="--grpc-server-tls-key="

# TLS CA to verify clients against. If no client CA is specified,
# there is no client verification on server side. (tls.NoClientCert)
#GRPC_SERVER_TLS_CLIENT_CA="--grpc-server-tls-client-ca="

# Listen host:port for HTTP endpoints.
#HTTP_ADDRESS="--http-address=0.0.0.0:10902"

# Listen ip:port address for gossip cluster.
#CLUSTER_ADDRESS="--cluster.address=0.0.0.0:10900"  

# Explicit (external) ip:port address to advertise for gossip
# in gossip cluster. Used internally for membership only.
#CLUSTER_ADVERTISE_ADDRESS="--cluster.advertise-address="

# Initial peers to join the cluster. It can be either <ip:port>,
# or <domain:port>. A lookup resolution is done only at the startup.
#CLUSTER_PEERS="--cluster.peers="

# Interval between sending gossip messages.
# By lowering this value (more frequent) gossip messages are propagated
# across the cluster more quickly at the expense of increased bandwidth.
# Default is used from a specified network-type.
#CLUSTER_GOSSIP_INTERVAL="--cluster.gossip-interval="

# Interval for gossip state syncs. Setting this interval lower (more frequent)
# will increase convergence speeds across larger clusters at the expense of
# increased bandwidth usage. Default is used from a specified network-type.
#CLUSTER_PUSHPULL_INTERVAL="--cluster.pushpull-interval="

# Interval for membership to refresh cluster.peers state, 0 disables refresh.
#CLUSTER_REFRESH_INTERVAL="--cluster.refresh-interval=1m"

# Initial secret key to encrypt cluster gossip.
# Can be one of AES-128, AES-192, or AES-256 in hexadecimal format.
#CLUSTER_SECRET_KEY="--cluster.secret-key=CLUSTER.SECRET-KEY"

# Network type with predefined peers configurations.
# Sets of configurations accounting the latency differences between network types: local, lan, wan.
#CLUSTER_NETWORK_TYPE="--cluster.network-type=lan"

# If true gossip will be disabled and no cluster related server will be started.
#CLUSTER_DISABLE="--cluster.disable"

# Labels to be applied to all generated metrics
# (repeated). Similar to external labels for
# Prometheus, used to identify ruler and its
# blocks as unique source.
#LABEL="--label=<name>=<value>"

# data directory
DATA="--data-dir=/var/lib/thanos/rule"

# Rule files that should be used by rule manager.
# Can be in glob format (repeated).
#RULE_FILE="--rule-file=/etc/thanos/rules/"

# The default evaluation interval to use.
#EVAL_INTERVAL="--eval-interval=30s"

# Block duration for TSDB block.
TSDB_BLOCK="--tsdb.block-duration=2h"

# Block retention time on local disk.
TSDB_RETENTION="--tsdb.retention=48h"

# Alertmanager replica URLs to push firing
# alerts. Ruler claims success if push to at
# least one alertmanager from discovered
# succeeds. The scheme may be prefixed with
# 'dns+' or 'dnssrv+' to detect Alertmanager IPs
# through respective DNS lookups. The port
# defaults to 9093 or the SRV record's value. The
# URL path is used as a prefix for the regular
# Alertmanager API path.
#ALERTMANAGERS_URL="--alertmanagers.url=ALERTMANAGERS.URL"

# Timeout for sending alerts to alertmanager
#ALERTMANAGERS_SEND="--alertmanagers.send-timeout=10s"

# The external Thanos Query URL that would be set
# in all alerts 'Source' field
#ALERT_QUERY_URL="--alert.query-url=ALERT.QUERY-URL"

# Labels by name to drop before sending to
# alertmanager. This allows alert to be
# deduplicated on replica label (repeated).
# Similar Prometheus alert relabelling
#ALERT_LABEL_DROP="--alert.label-drop=ALERT.LABEL-DROP"

# Prefix for API and UI endpoints. This allows
# thanos UI to be served on a sub-path. This
# option is analogous to --web.route-prefix of
# Promethus.
#WEB_ROUTE_PREFIX="--web.route-prefix="

# Static prefix for all HTML links and redirect
# URLs in the UI query web interface. Actual
# endpoints are still served on / or the
# web.route-prefix. This allows thanos UI to be
# served behind a reverse proxy that strips a URL
# sub-path.
#WEB_EXTERNAL_PREFIX="--web.external-prefix="

# Name of HTTP request header used for dynamic
# prefixing of UI links and redirects. This
# option is ignored if web.external-prefix
# argument is set. Security risk: enable this
# option only if a reverse proxy in front of
# thanos is resetting the header.
# The--web.prefix-header=X-Forwarded-Prefix option
# can be useful, for example, if Thanos UI is
# served via Traefik reverse proxy with
# PathPrefixStrip option enabled, which sends the
# stripped prefix value in X-Forwarded-Prefix
# header. This allows thanos UI to be served on a
# sub-path.
#WEB_PREFIX_HEADERS="--web.prefix-header="

# Path to YAML file that contains object store
# configuration.
#OBJSTORE_CONFIG_FILE="--objstore.config-file=<bucket.config-yaml-path>"

# Alternative to 'objstore.config-file' flag.
# Object store configuration in YAML.
#OBJSTORE_CONFIG="--objstore.config=<bucket.config-yaml>"

# Addresses of statically configured query API
# servers (repeatable). The scheme may be
# prefixed with 'dns+' or 'dnssrv+' to detect
# query API servers through respective DNS lookups.
#QUERY="--query=<query>"

# Path to file that contain addresses of query
# peers. The path can be a glob pattern
# (repeatable).
#QUERY_SD_FILES="--query.sd-files=<path>"

# Refresh interval to re-read file SD files.
# (used as a fallback)
#QUERY_SD_INTERVAL="--query.sd-interval=5m"

# Interval between DNS resolutions.
#QUERY_SD_DNS_INTERVAL="--query.sd-dns-interval=30s"

