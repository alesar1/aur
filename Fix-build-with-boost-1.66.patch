diff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp
index 157e3e8ba..f30b20ffb 100644
--- a/src/bitcoin-cli.cpp
+++ b/src/bitcoin-cli.cpp
@@ -108,7 +108,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)
     // Connect to localhost
     bool fUseSSL = GetBoolArg("-rpcssl", false);
     asio::io_service io_service;
-    ssl::context context(io_service, ssl::context::sslv23);
+    ssl::context context(ssl::context::sslv23);
     context.set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);
     asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);
     SSLIOStreamDevice<asio::ip::tcp> d(sslStream, fUseSSL);
diff --git a/src/exch.cpp b/src/exch.cpp
index beaa975a3..0b85954d5 100644
--- a/src/exch.cpp
+++ b/src/exch.cpp
@@ -55,7 +55,7 @@ double Exch::EstimatedEMC(double pay_amount) const {
 UniValue Exch::httpsFetch(const char *get, const UniValue *post) {
   // Connect to exchange
   asio::io_service io_service;
-  ssl::context context(io_service, ssl::context::sslv23);
+  ssl::context context(ssl::context::sslv23);
   context.set_options(ssl::context::no_sslv2 | ssl::context::no_sslv3);
   asio::ssl::stream<asio::ip::tcp::socket> sslStream(io_service, context);
   SSL_set_tlsext_host_name(sslStream.native_handle(), Host().c_str());
diff --git a/src/rpcserver.cpp b/src/rpcserver.cpp
index f2582569e..d73cf5099 100644
--- a/src/rpcserver.cpp
+++ b/src/rpcserver.cpp
@@ -506,8 +506,8 @@ private:
 void ServiceConnection(AcceptedConnection *conn);
 
 //! Forward declaration required for RPCListen
-template <typename Protocol, typename SocketAcceptorService>
-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,
+template <typename SocketAcceptor>
+static void RPCAcceptHandler(boost::shared_ptr<SocketAcceptor> acceptor,
                              ssl::context& context,
                              bool fUseSSL,
                              boost::shared_ptr< AcceptedConnection > conn,
@@ -516,18 +516,18 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,
 /**
  * Sets up I/O resources to accept and handle a new connection.
  */
-template <typename Protocol, typename SocketAcceptorService>
-static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,
+template <typename SocketAcceptor>
+static void RPCListen(boost::shared_ptr<SocketAcceptor> acceptor,
                    ssl::context& context,
                    const bool fUseSSL)
 {
     // Accept connection
-    boost::shared_ptr< AcceptedConnectionImpl<Protocol> > conn(new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL));
+	boost::shared_ptr< AcceptedConnectionImpl<typename SocketAcceptor::protocol_type> > conn(new AcceptedConnectionImpl<typename SocketAcceptor::protocol_type>(acceptor->get_io_service(), context, fUseSSL));
 
     acceptor->async_accept(
             conn->sslStream.lowest_layer(),
             conn->peer,
-            boost::bind(&RPCAcceptHandler<Protocol, SocketAcceptorService>,
+			boost::bind(&RPCAcceptHandler<SocketAcceptor>,
                 acceptor,
                 boost::ref(context),
                 fUseSSL,
@@ -539,8 +539,8 @@ static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketA
 /**
  * Accept and handle incoming connection.
  */
-template <typename Protocol, typename SocketAcceptorService>
-static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,
+template <typename SocketAcceptor>
+static void RPCAcceptHandler(boost::shared_ptr<SocketAcceptor> acceptor,
                              ssl::context& context,
                              const bool fUseSSL,
                              boost::shared_ptr< AcceptedConnection > conn,
@@ -634,7 +634,7 @@ void StartRPCThreads()
 
     assert(rpc_io_service == NULL);
     rpc_io_service = new asio::io_service();
-    rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);
+    rpc_ssl_context = new ssl::context(ssl::context::sslv23);
 
     const bool fUseSSL = GetBoolArg("-rpcssl", false);
 
@@ -653,7 +653,7 @@ void StartRPCThreads()
         else LogPrintf("ThreadRPCServer ERROR: missing server private key file %s\n", pathPKFile.string());
 
         string strCiphers = GetArg("-rpcsslciphers", "TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH");
-        SSL_CTX_set_cipher_list(rpc_ssl_context->impl(), strCiphers.c_str());
+		SSL_CTX_set_cipher_list(rpc_ssl_context->native_handle(), strCiphers.c_str());
     }
 
     std::vector<ip::tcp::endpoint> vEndpoints;
