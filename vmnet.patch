--- a/vmnet/Makefile
+++ b/vmnet/Makefile
@@ -43,7 +43,11 @@
 endif
 
 
+ifdef KVERSION
+VM_UNAME = $(KVERSION)
+else
 VM_UNAME = $(shell uname -r)
+endif
 
 # Header directory for the running kernel
 ifdef LINUXINCLUDE
@@ -137,7 +141,6 @@
 endif
 
 # Add Spectre options when available
-CC_OPTS += $(call vm_check_gcc,-mindirect-branch=thunk -mindirect-branch-register,)
 
 include $(SRCROOT)/Makefile.kernel
 
--- a/vmnet/userif.c
+++ b/vmnet/userif.c
@@ -559,7 +559,12 @@
       return -EINVAL;
    }
 
+#if COMPAT_LINUX_VERSION_CHECK_LT(5, 10, 0)
    csum = csum_and_copy_to_user(skb->data + offset, curr, len, 0, &err);
+#else
+   csum = csum_and_copy_to_user(skb->data + offset, curr, len);
+   err = (csum == 0) ? -EFAULT : 0;
+#endif
    if (err) {
       return err;
    }
@@ -573,8 +578,14 @@
 	 const void *vaddr;
 
 	 vaddr = kmap(skb_frag_page(frag));
+#if COMPAT_LINUX_VERSION_CHECK_LT(5, 10, 0)
 	 tmpCsum = csum_and_copy_to_user(vaddr + skb_frag_off(frag),
 					 curr, skb_frag_size(frag), 0, &err);
+#else
+	 tmpCsum = csum_and_copy_to_user(vaddr + skb_frag_off(frag),
+					 curr, skb_frag_size(frag));
+	 err = (tmpCsum == 0) ? -EFAULT : 0;
+#endif
 	 kunmap(skb_frag_page(frag));
 
 	 if (err) {
# Fixing VMWare Player on Linux when using DHCP addresses: https://www.nikhef.nl/~janjust/vmnet/
@@ -985,6 +996,9 @@
    userIf = (VNetUserIF *)port->jack.private;
    hubJack = port->jack.peer;
 
+   /* never send link down events */
+   if (!linkUp) return 0;
+
    if (port->jack.state == FALSE || hubJack == NULL) {
       return -EINVAL;
    }
From 4232f780eb114f22498f3274eaeef81d8c63f2ab Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 9 Nov 2021 09:01:57 +0100
Subject: [PATCH] modules: fix stddef.h include

After mainline commit 04e85bbf71c9 ("isystem: delete global -isystem
compile option") in 5.16-rc1, vm_basic_types.h in both vmmon and vmnet
does not find (userspace) stddef.h any more. As it should not include this
header anyway, fix the include directives to include stddef.h from kernel.

Kernel version of stddef.h has been available since the beginning of git so
that it is safe to include it regardless of kernel version.
---
 vmmon-only/include/vm_basic_defs.h | 2 +-
 vmnet-only/vm_basic_defs.h         | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/vmnet-only/vm_basic_defs.h b/vmnet-only/vm_basic_defs.h
index 0ec30b3..b920e2d 100644
--- a/vmnet-only/vm_basic_defs.h
+++ b/vmnet-only/vm_basic_defs.h
@@ -51,7 +51,7 @@
  *   C90 7.17, C99 7.19, C11 7.19
  */
 #if !defined(VMKERNEL)
-#  include <stddef.h>
+#  include <linux/stddef.h>
 #else
    /*
     * Vmkernel's bogus __FreeBSD__ value causes gcc <stddef.h> to break.
From 409623bd4693afada659af82e823a6291f70797a Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 4 Apr 2022 02:05:17 +0200
Subject: [PATCH] vmnet: use netif_rx() on newer kernels

In mainline 5.18-rc1, commit baebdf48c360 ("net: dev: Makes sure netif_rx()
can be invoked in any context.") allows calling netif_rx() from any context
and commit 2655926aea9b ("net: Remove netif_rx_any_context() and
netif_rx_ni().") drops netif_rx_ni() as it is no longer needed.

Replace calls of netif_rx_ni() in VNetBridgeReceiveFromVNet() and
VNetNetIfReceive() by netif_rx() when building against kernel 5.18 and
newer.
---
 vmnet-only/bridge.c           | 2 +-
 vmnet-only/compat_netdevice.h | 9 +++++++++
 vmnet-only/netif.c            | 2 +-
 3 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/vmnet-only/bridge.c b/vmnet-only/bridge.c
index c84f8ee..d6bd3c4 100644
--- a/vmnet-only/bridge.c
+++ b/vmnet-only/bridge.c
@@ -691,7 +691,7 @@ VNetBridgeReceiveFromVNet(VNetJack        *this, // IN: jack
           * not do it, or netif_rx_ni() will deadlock on the cli() lock --hpreg
           */
 
-	 netif_rx_ni(clone);
+	 compat_netif_rx_ni(clone);
 #	 if LOGLEVEL >= 4
 	 do_gettimeofday(&vnetTime);
 #	 endif
diff --git a/vmnet-only/compat_netdevice.h b/vmnet-only/compat_netdevice.h
index bb5001b..c6cc706 100644
--- a/vmnet-only/compat_netdevice.h
+++ b/vmnet-only/compat_netdevice.h
@@ -343,4 +343,13 @@ typedef u32 compat_netdev_features_t;
 #define compat_netif_trans_update(d) do { (d)->trans_start = jiffies; } while (0)
 #endif
 
+static inline int compat_netif_rx_ni(struct sk_buff *skb)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 18, 0)
+	return netif_rx(skb);
+#else
+	return netif_rx_ni(skb);
+#endif
+}
+
 #endif /* __COMPAT_NETDEVICE_H__ */
diff --git a/vmnet-only/netif.c b/vmnet-only/netif.c
index 8c3bbf8..35256a0 100644
--- a/vmnet-only/netif.c
+++ b/vmnet-only/netif.c
@@ -345,7 +345,7 @@ VNetNetIfReceive(VNetJack        *this, // IN: jack
    /* send to the host interface */
    skb->dev = netIf->dev;
    skb->protocol = eth_type_trans(skb, netIf->dev);
-   netif_rx_ni(skb);
+   compat_netif_rx_ni(skb);
    netIf->stats.rx_packets++;
 
    return;
