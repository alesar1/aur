From 94af14231e09e9b4dbe462622b7d5eb97896de59 Mon Sep 17 00:00:00 2001
From: Kjetil Matheussen <k.s.matheussen@notam02.no>
Date: Thu, 5 Mar 2020 12:52:37 +0100
Subject: [PATCH 1/3] Internal: Various compilation fixes, plus assert that we
 are not trying to free a memory object with finalization

---
 OpenGL/Widget.cpp          |  4 ++--
 Qt/Qt_Main.cpp             |  4 +++-
 Qt/Qt_MainWindow.cpp       |  4 ++++
 Qt/Qt_settings.cpp         |  2 +-
 api/s7_types_generator.scm |  3 +++
 audio/SoundProducer.cpp    | 14 ++++++++++++-
 common/memory.c            | 20 +++++++++++++++++--
 common/nsmtracker.h        |  9 +++++++++
 common/sequencer.cpp       | 40 ++++++++++++++++++++++++++++++++++----
 9 files changed, 89 insertions(+), 11 deletions(-)

diff --git a/OpenGL/Widget.cpp b/OpenGL/Widget.cpp
index 90f97b751..5a8dc15ef 100644
--- a/OpenGL/Widget.cpp
+++ b/OpenGL/Widget.cpp
@@ -2541,7 +2541,7 @@ bool GL_check_compatibility(void){
         SETTINGS_write_bool("show_vsync_warning_during_startup", false);
     }
   }
-
+ 
   if (is_opengl_certainly_too_old_questionmark()){
     GFX_Message(NULL,
                 "Your version of OpenGL is too old. Radium can not run.\n"
@@ -2551,7 +2551,7 @@ bool GL_check_compatibility(void){
     //exit(-1);
     return false;
   }
-  
+ 
   if (!is_opengl_version_recent_enough_questionmark()){
     vector_t v = {};
     VECTOR_push_back(&v,"Try to run anywyay"); // (but please don't send a bug report if Radium crashes)");
diff --git a/Qt/Qt_Main.cpp b/Qt/Qt_Main.cpp
index 65798d9c3..afa6f5a01 100755
--- a/Qt/Qt_Main.cpp
+++ b/Qt/Qt_Main.cpp
@@ -3723,7 +3723,9 @@ int main(int argc, char **argv){
 #endif
   
 #if defined(FOR_WINDOWS)
+#if defined(RELEASE)
   DWORD progress_pid = atoi(argv[2]);
+#endif
   GC_set_no_dls(1);
 #endif
 
@@ -3874,7 +3876,7 @@ int main(int argc, char **argv){
   //QPixmap pixmap(QPixmap(OS_get_full_program_file_path("/home/kjetil/radium/pictures/logo_big.png")).scaled(QSize(256,256), Qt::KeepAspectRatioByExpanding));
   GFX_OpenProgress("Please wait, starting program");
   
-#if defined(FOR_WINDOWS)
+#if defined(RELEASE) && defined(FOR_WINDOWS)
   {
     auto handle = OpenProcess(PROCESS_ALL_ACCESS, TRUE, progress_pid);
     if (handle != NULL)
diff --git a/Qt/Qt_MainWindow.cpp b/Qt/Qt_MainWindow.cpp
index 8884892d9..1387ccc6e 100644
--- a/Qt/Qt_MainWindow.cpp
+++ b/Qt/Qt_MainWindow.cpp
@@ -26,7 +26,11 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */
 
 #include <QApplication>
 //#include <QSplitter>
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wnull-dereference"
 #include <QCloseEvent>
+#pragma GCC diagnostic pop
+
 #include <QStatusBar>
 #include <QMenuBar>
 #include <QUrl>
diff --git a/Qt/Qt_settings.cpp b/Qt/Qt_settings.cpp
index 7a7c80a81..b7df29d52 100644
--- a/Qt/Qt_settings.cpp
+++ b/Qt/Qt_settings.cpp
@@ -104,7 +104,7 @@ wchar_t *STRING_create(const QString s, bool use_gc_alloc){
 
   bool is_main_thread = THREADING_is_main_thread();
   if (is_main_thread==false)
-    R_ASSERT(use_gc_alloc==false);
+    R_ASSERT_NON_RELEASE(use_gc_alloc==false);
   
   if (is_main_thread==false || use_gc_alloc==false){  
     array = (wchar_t*)malloc(size);
diff --git a/api/s7_types_generator.scm b/api/s7_types_generator.scm
index 29b706eb9..77bff8fb5 100755
--- a/api/s7_types_generator.scm
+++ b/api/s7_types_generator.scm
@@ -68,8 +68,11 @@ exec guile -e main -s $0 $*
        (<->
         "  const wchar_t* o = val.id==NULL ? NULL : wcsdup(val.id);\n")
        (<->
+        "#pragma GCC diagnostic push\n"
+        "#pragma GCC diagnostic ignored \"-Wint-to-pointer-cast\"\n"
         "  if (sizeof(" c-type ") <= sizeof(void*))\n"
         "    return s7_make_c_object(s7, g_" type "_type_tag, (void*)(val.id));\n"
+        "#pragma GCC diagnostic pop\n"
         "\n"
         "  " c-type " *o = (" c-type "*)malloc(sizeof(" c-type "));\n"
         "  *o = val.id;\n"))
diff --git a/audio/SoundProducer.cpp b/audio/SoundProducer.cpp
index b30ccb693..3b021d921 100644
--- a/audio/SoundProducer.cpp
+++ b/audio/SoundProducer.cpp
@@ -309,6 +309,12 @@ public:
       if (source_ch==0 && target_ch==0){
         
         SoundPlugin *plugin = SP_get_plugin(source);
+#if !defined(RELEASE)
+        if(plugin==NULL){ // silence "null-dereference" warning.
+          abort();
+          return false;
+        }
+#endif
         const SoundPluginType *type = plugin->type;
         int effect_num = type->num_effects + EFFNUM_BUS1 + _bus_num;
         
@@ -340,7 +346,13 @@ public:
     if (_is_bus_link){
       
       SoundPlugin *plugin = SP_get_plugin(source);
-      const SoundPluginType *type = plugin->type;
+#if !defined(RELEASE)
+      if(plugin==NULL){ // silence "null-dereference" warning.
+        abort();
+        return 0;
+      }
+#endif
+      const SoundPluginType *type = plugin->type;      
       int effect_num = type->num_effects + EFFNUM_BUS1 + _bus_num;
       
       //printf("Setting bus volume for %d to %f\n", bus_num, volume);
diff --git a/common/memory.c b/common/memory.c
index ebbf38109..08d54900c 100755
--- a/common/memory.c
+++ b/common/memory.c
@@ -66,10 +66,26 @@ void init_memory(void){
         return;
 }
 
+#if !defined(RELEASE)
+#ifndef DISABLE_BDWGC
+static void dummy_finalizer(void *actual_mem_start, void *user_data){
+}
+#endif    
+#endif
 
 void tfree(void *element){
-  ASSERT_IS_NONRT_MAIN_THREAD_NON_RELEASE()
-  
+  ASSERT_IS_NONRT_MAIN_THREAD_NON_RELEASE();
+
+#if !defined(RELEASE)
+#ifndef DISABLE_BDWGC
+    // Check that element has no finalizer.
+  GC_finalization_proc old = NULL;
+  GC_register_finalizer(element, dummy_finalizer, NULL, &old, NULL);
+  if (old!=NULL)
+    abort();
+#endif    
+#endif
+    
 #ifdef DISABLE_BDWGC
 
 	if(element==NULL){
diff --git a/common/nsmtracker.h b/common/nsmtracker.h
index eff912ad4..eb92f9c22 100755
--- a/common/nsmtracker.h
+++ b/common/nsmtracker.h
@@ -145,9 +145,14 @@ static_assert (sizeof(long long int) >= 8, "sizof(long long int) must be 8 or hi
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wshorten-64-to-32"
 
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wnull-dereference"
+
 #include <QList>
 #include <QMap>
 
+#pragma GCC diagnostic pop
+
 #pragma clang diagnostic pop
 
 #if !defined(__clang__)
@@ -3285,6 +3290,10 @@ struct SeqBlock{
 
   float envelope_db;     // db version of envelope_volume
 
+#if !defined(RELEASE)
+  int64_t gcfinalizerdebuggingvariable;
+#endif
+  
   struct SeqblockAutomation *automations[NUM_SATS];
 
   struct StretchspeedTimeConversionTable conversion_table;
diff --git a/common/sequencer.cpp b/common/sequencer.cpp
index 66989672c..ff2616678 100644
--- a/common/sequencer.cpp
+++ b/common/sequencer.cpp
@@ -386,12 +386,35 @@ void SONG_call_me_before_starting_to_play_song(int64_t seqtime){
   gotit.wait_for_all_future_signals();
 }
 
-  
+#if !defined(RELEASE)
+static int g_finalizer_num = 0;
+namespace{
+struct WithNum{
+  int num = g_finalizer_num++;
+  bool has_been_finalized = false;
+}; 
+}
+#define MAGIC_FINALIZER_NUM 19340834513
+#endif
+
+#if 1
+
 static void seqblockgcfinalizer(void *actual_mem_start, void *user_data){
   struct SeqBlock *seqblock = (struct SeqBlock*)actual_mem_start;
   //printf("=============================FINALIZING seqblock\n");
   //abort();
   //getchar();
+
+#if !defined(RELEASE)
+  WithNum *withnum = (WithNum*)user_data;
+  if (withnum->num<0 || withnum->has_been_finalized==true)
+    abort();
+  withnum->has_been_finalized=true;
+  printf("    Seqblock finalizing %d\n", withnum->num);
+
+  if (seqblock->gcfinalizerdebuggingvariable != MAGIC_FINALIZER_NUM)
+    abort();  
+#endif
   
   for(int i = 0 ; i < NUM_SATS; i++)
     SEQBLOCK_AUTOMATION_free(seqblock->automations[i]);
@@ -401,7 +424,7 @@ static void seqblockgcfinalizer(void *actual_mem_start, void *user_data){
 
   SEQBLOCK_STRETCHSPEED_call_me_when_seqblock_is_released(seqblock);
 }
-
+#endif
 static int64_t get_default_duration_from_num_samples(const struct SeqTrack *seqtrack, struct SeqBlock *seqblock, int64_t num_samples){
   R_ASSERT_RETURN_IF_FALSE2(seqblock->block==NULL, pc->pfreq);
   R_ASSERT_RETURN_IF_FALSE2(seqtrack->patch!=NULL, pc->pfreq);
@@ -512,12 +535,21 @@ void SEQBLOCK_init(const struct SeqTrack *seqtrack, struct SeqBlock *seqblock, s
       }
     }
 
-
+    /*
+    static vector_t temp = {};
+    VECTOR_push_back(&temp, seqblock);
+    */
+    
     seqblock->fade_in_envelope = new radium::Envelope(FADE_LINEAR, 1.0, true);
     seqblock->fade_out_envelope = new radium::Envelope(FADE_LINEAR, 1.0, false);
 
+#if defined(RELEASE)
     GC_register_finalizer(seqblock, seqblockgcfinalizer, NULL, NULL, NULL);
-
+#else
+    seqblock->gcfinalizerdebuggingvariable = MAGIC_FINALIZER_NUM;
+    GC_register_finalizer(seqblock, seqblockgcfinalizer, (void*)new WithNum, NULL, NULL);
+#endif
+    
   }else{
 
     // Happens when starting to play block.
-- 
2.25.1

