diff --git a/browser/brave_browser_process_impl.cc b/browser/brave_browser_process_impl.cc
index 78f6dea20b..1975955c43 100644
--- a/browser/brave_browser_process_impl.cc
+++ b/browser/brave_browser_process_impl.cc
@@ -217,6 +217,7 @@ BraveBrowserProcessImpl::ad_block_regional_service_manager() {
   return ad_block_service()->regional_service_manager();
 }

+#if 0
 NTPBackgroundImagesService*
 BraveBrowserProcessImpl::ntp_background_images_service() {
   if (!base::FeatureList::IsEnabled(kBraveNTPBrandedWallpaper))
@@ -231,6 +232,7 @@ BraveBrowserProcessImpl::ntp_background_images_service() {

   return ntp_background_images_service_.get();
 }
+#endif

 #if BUILDFLAG(ENABLE_EXTENSIONS)
 brave_component_updater::ExtensionWhitelistService*
@@ -328,6 +330,7 @@ BraveBrowserProcessImpl::brave_federated_learning_service() {
   return brave_federated_learning_service_.get();
 }

+#if 0
 brave::BraveP3AService* BraveBrowserProcessImpl::brave_p3a_service() {
   if (brave_p3a_service_) {
     return brave_p3a_service_.get();
@@ -347,6 +350,7 @@ BraveBrowserProcessImpl::brave_referrals_service() {
         brave_stats::GetPlatformIdentifier());
   return brave_referrals_service_.get();
 }
+#endif

 brave_stats::BraveStatsUpdater* BraveBrowserProcessImpl::brave_stats_updater() {
   if (!brave_stats_updater_)
diff --git a/browser/brave_browser_process_impl.h b/browser/brave_browser_process_impl.h
index 225890cc6f..934db87040 100644
--- a/browser/brave_browser_process_impl.h
+++ b/browser/brave_browser_process_impl.h
@@ -111,8 +111,8 @@ class BraveBrowserProcessImpl : public BraveBrowserProcess,
   ipfs::BraveIpfsClientUpdater* ipfs_client_updater() override;
 #endif
   brave::BraveFederatedLearningService* brave_federated_learning_service();
-  brave::BraveP3AService* brave_p3a_service() override;
-  brave::BraveReferralsService* brave_referrals_service() override;
+  //brave::BraveP3AService* brave_p3a_service() override;
+  //brave::BraveReferralsService* brave_referrals_service() override;
   brave_stats::BraveStatsUpdater* brave_stats_updater() override;
   ntp_background_images::NTPBackgroundImagesService*
   ntp_background_images_service() override;
@@ -158,7 +158,7 @@ class BraveBrowserProcessImpl : public BraveBrowserProcess,
   std::unique_ptr<brave_shields::HTTPSEverywhereService>
       https_everywhere_service_;
   std::unique_ptr<brave_stats::BraveStatsUpdater> brave_stats_updater_;
-#if BUILDFLAG(ENABLE_BRAVE_REFERRALS)
+#if 0
   std::unique_ptr<brave::BraveReferralsService> brave_referrals_service_;
 #endif
 #if BUILDFLAG(ENABLE_TOR)
@@ -169,10 +169,10 @@ class BraveBrowserProcessImpl : public BraveBrowserProcess,
 #endif
   std::unique_ptr<brave::BraveFederatedLearningService>
       brave_federated_learning_service_;
-  scoped_refptr<brave::BraveP3AService> brave_p3a_service_;
+  //scoped_refptr<brave::BraveP3AService> brave_p3a_service_;
   scoped_refptr<brave::HistogramsBraveizer> histogram_braveizer_;
-  std::unique_ptr<ntp_background_images::NTPBackgroundImagesService>
-      ntp_background_images_service_;
+  //std::unique_ptr<ntp_background_images::NTPBackgroundImagesService>
+  //    ntp_background_images_service_;
   std::unique_ptr<brave_ads::ResourceComponent> resource_component_;

 #if BUILDFLAG(ENABLE_SPEEDREADER)
diff --git a/browser/ui/webui/new_tab_page/brave_new_tab_message_handler.cc b/browser/ui/webui/new_tab_page/brave_new_tab_message_handler.cc
index 74a696a168..64d7449003 100644
--- a/browser/ui/webui/new_tab_page/brave_new_tab_message_handler.cc
+++ b/browser/ui/webui/new_tab_page/brave_new_tab_message_handler.cc
@@ -42,12 +42,14 @@
 #include "components/prefs/pref_service.h"
 #include "content/public/browser/web_ui_data_source.h"

+#if 0
 using ntp_background_images::ViewCounterServiceFactory;
 using ntp_background_images::features::kBraveNTPBrandedWallpaper;
 using ntp_background_images::prefs::kBrandedWallpaperNotificationDismissed;
-using ntp_background_images::prefs::kNewTabPageShowBackgroundImage;
 using ntp_background_images::prefs::
     kNewTabPageShowSponsoredImagesBackgroundImage;  // NOLINT
+#endif
+using ntp_background_images::prefs::kNewTabPageShowBackgroundImage;

 #if BUILDFLAG(CRYPTO_DOT_COM_ENABLED)
 #include "brave/components/crypto_dot_com/common/pref_names.h"
@@ -86,18 +88,22 @@ base::DictionaryValue GetPreferencesDictionary(PrefService* prefs) {
   base::DictionaryValue pref_data;
   pref_data.SetBoolean("showBackgroundImage",
                        prefs->GetBoolean(kNewTabPageShowBackgroundImage));
+#if 0
   pref_data.SetBoolean(
       "brandedWallpaperOptIn",
       prefs->GetBoolean(kNewTabPageShowSponsoredImagesBackgroundImage));
+#endif
   pref_data.SetBoolean("showClock", prefs->GetBoolean(kNewTabPageShowClock));
   pref_data.SetString("clockFormat", prefs->GetString(kNewTabPageClockFormat));
   pref_data.SetBoolean("showStats", prefs->GetBoolean(kNewTabPageShowStats));
   pref_data.SetBoolean("showToday", prefs->GetBoolean(kNewTabPageShowToday));
   pref_data.SetBoolean("showRewards",
                        prefs->GetBoolean(kNewTabPageShowRewards));
+#if 0
   pref_data.SetBoolean(
       "isBrandedWallpaperNotificationDismissed",
       prefs->GetBoolean(kBrandedWallpaperNotificationDismissed));
+#endif
   pref_data.SetBoolean("isBraveTodayOptedIn",
                        prefs->GetBoolean(kBraveTodayOptedIn));
   pref_data.SetBoolean("hideAllWidgets",
@@ -137,24 +143,30 @@ base::DictionaryValue GetTorPropertiesDictionary(bool connected,
 // TODO(petemill): Move p3a to own NTP component so it can
 // be used by other platforms.

+#if 0
 enum class NTPCustomizeUsage { kNeverOpened, kOpened, kOpenedAndEdited, kSize };

 const char kNTPCustomizeUsageStatus[] =
     "brave.new_tab_page.customize_p3a_usage";

+#endif
 }  // namespace

 // static
 void BraveNewTabMessageHandler::RegisterLocalStatePrefs(
     PrefRegistrySimple* local_state) {
+#if 0
   local_state->RegisterIntegerPref(kNTPCustomizeUsageStatus, -1);
+#endif
 }

 void BraveNewTabMessageHandler::RecordInitialP3AValues(
     PrefService* local_state) {
+#if 0
   brave::RecordValueIfGreater<NTPCustomizeUsage>(
       NTPCustomizeUsage::kNeverOpened, "Brave.NTP.CustomizeUsageStatus",
       kNTPCustomizeUsageStatus, local_state);
+#endif
 }

 bool BraveNewTabMessageHandler::CanPromptBraveTalk() {
@@ -176,6 +188,7 @@ bool BraveNewTabMessageHandler::CanPromptBraveTalk(base::Time now) {
 BraveNewTabMessageHandler* BraveNewTabMessageHandler::Create(
     content::WebUIDataSource* source,
     Profile* profile) {
+#if 0
   //
   // Initial Values
   // Should only contain data that is static
@@ -194,6 +207,7 @@ BraveNewTabMessageHandler* BraveNewTabMessageHandler::Create(
   source->AddBoolean("featureFlagBraveNTPSponsoredImagesWallpaper",
                      base::FeatureList::IsEnabled(kBraveNTPBrandedWallpaper) &&
                          is_ads_supported_locale_);
+#endif
   source->AddBoolean("braveTalkPromptAllowed",
                      BraveNewTabMessageHandler::CanPromptBraveTalk());

@@ -252,6 +266,7 @@ void BraveNewTabMessageHandler::RegisterMessages() {
       "saveNewTabPagePref",
       base::BindRepeating(&BraveNewTabMessageHandler::HandleSaveNewTabPagePref,
                           base::Unretained(this)));
+#if 0
   web_ui()->RegisterMessageCallback(
       "registerNewTabPageView",
       base::BindRepeating(
@@ -303,6 +318,7 @@ void BraveNewTabMessageHandler::RegisterMessages() {
       base::BindRepeating(
           &BraveNewTabMessageHandler::HandleTodayOnDisplayAdView,
           base::Unretained(this)));
+#endif
 }

 void BraveNewTabMessageHandler::OnJavascriptAllowed() {
@@ -354,10 +370,12 @@ void BraveNewTabMessageHandler::OnJavascriptAllowed() {
       kNewTabPageShowBackgroundImage,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
                           base::Unretained(this)));
+#if 0
   pref_change_registrar_.Add(
       kNewTabPageShowSponsoredImagesBackgroundImage,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
                           base::Unretained(this)));
+#endif
   pref_change_registrar_.Add(
       kNewTabPageShowClock,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
@@ -374,6 +392,7 @@ void BraveNewTabMessageHandler::OnJavascriptAllowed() {
       kNewTabPageShowToday,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
                           base::Unretained(this)));
+#if 0
   pref_change_registrar_.Add(
       kNewTabPageShowRewards,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
@@ -382,6 +401,7 @@ void BraveNewTabMessageHandler::OnJavascriptAllowed() {
       kBrandedWallpaperNotificationDismissed,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
                           base::Unretained(this)));
+#endif
   pref_change_registrar_.Add(
       kNewTabPageShowBinance,
       base::BindRepeating(&BraveNewTabMessageHandler::OnPreferencesChanged,
@@ -474,9 +494,11 @@ void BraveNewTabMessageHandler::HandleSaveNewTabPagePref(
     LOG(ERROR) << "Invalid input";
     return;
   }
+#if 0
   brave::RecordValueIfGreater<NTPCustomizeUsage>(
       NTPCustomizeUsage::kOpenedAndEdited, "Brave.NTP.CustomizeUsageStatus",
       kNTPCustomizeUsageStatus, g_browser_process->local_state());
+#endif
   PrefService* prefs = profile_->GetPrefs();
   // Collect args
   std::string settingsKeyInput = args[0].GetString();
@@ -504,10 +526,12 @@ void BraveNewTabMessageHandler::HandleSaveNewTabPagePref(
   const auto settingsValueBool = settingsValue.GetBool();
   if (settingsKeyInput == "showBackgroundImage") {
     settingsKey = kNewTabPageShowBackgroundImage;
+#if 0
   } else if (settingsKeyInput == "brandedWallpaperOptIn") {
     // TODO(simonhong): I think above |brandedWallpaperOptIn| should be changed
     // to |sponsoredImagesWallpaperOptIn|.
     settingsKey = kNewTabPageShowSponsoredImagesBackgroundImage;
+#endif
   } else if (settingsKeyInput == "showClock") {
     settingsKey = kNewTabPageShowClock;
   } else if (settingsKeyInput == "showStats") {
@@ -516,10 +540,12 @@ void BraveNewTabMessageHandler::HandleSaveNewTabPagePref(
     settingsKey = kNewTabPageShowToday;
   } else if (settingsKeyInput == "isBraveTodayOptedIn") {
     settingsKey = kBraveTodayOptedIn;
+#if 0
   } else if (settingsKeyInput == "showRewards") {
     settingsKey = kNewTabPageShowRewards;
   } else if (settingsKeyInput == "isBrandedWallpaperNotificationDismissed") {
     settingsKey = kBrandedWallpaperNotificationDismissed;
+#endif
   } else if (settingsKeyInput == "hideAllWidgets") {
     settingsKey = kNewTabPageHideAllWidgets;
   } else if (settingsKeyInput == "showBinance") {
@@ -542,24 +568,29 @@ void BraveNewTabMessageHandler::HandleSaveNewTabPagePref(
   }
   prefs->SetBoolean(settingsKey, settingsValueBool);

+#if 0
   // P3A can only be recorded after profile is updated
   if (settingsKeyInput == "showBackgroundImage" ||
       settingsKeyInput == "brandedWallpaperOptIn") {
     brave::RecordSponsoredImagesEnabledP3A(profile_);
   }
+#endif
 }

 void BraveNewTabMessageHandler::HandleRegisterNewTabPageView(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();

   // Decrement original value only if there's actual branded content
   if (auto* service = ViewCounterServiceFactory::GetForProfile(profile_))
     service->RegisterPageView();
+#endif
 }

 void BraveNewTabMessageHandler::HandleBrandedWallpaperLogoClicked(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();
   if (args.size() != 1) {
     LOG(ERROR) << "Invalid input";
@@ -583,10 +614,12 @@ void BraveNewTabMessageHandler::HandleBrandedWallpaperLogoClicked(
         destination_url ? *destination_url : "",
         wallpaper_id ? *wallpaper_id : "");
   }
+#endif
 }

 void BraveNewTabMessageHandler::HandleGetBrandedWallpaperData(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();

   auto* service = ViewCounterServiceFactory::GetForProfile(profile_);
@@ -601,18 +634,22 @@ void BraveNewTabMessageHandler::HandleGetBrandedWallpaperData(
   }

   ResolveJavascriptCallback(args[0], std::move(data));
+#endif
 }

 void BraveNewTabMessageHandler::HandleCustomizeClicked(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();
   brave::RecordValueIfGreater<NTPCustomizeUsage>(
       NTPCustomizeUsage::kOpened, "Brave.NTP.CustomizeUsageStatus",
       kNTPCustomizeUsageStatus, g_browser_process->local_state());
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayInteractionBegin(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();
   // Track if user has ever scrolled to Brave Today.
   UMA_HISTOGRAM_EXACT_LINEAR("Brave.Today.HasEverInteracted", 1, 1);
@@ -629,10 +666,12 @@ void BraveNewTabMessageHandler::HandleTodayInteractionBegin(
   int answer = it_count - kSessionCountBuckets;
   UMA_HISTOGRAM_EXACT_LINEAR("Brave.Today.WeeklySessionCount", answer,
                              base::size(kSessionCountBuckets) + 1);
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayOnCardVisit(
     base::Value::ConstListView args) {
+#if 0
   // Argument should be how many cards visited in this session.
   // We need the front-end to give us this since this class
   // will be destroyed and re-created when the user navigates "back",
@@ -663,10 +702,12 @@ void BraveNewTabMessageHandler::HandleTodayOnCardVisit(
         item_id, creative_instance_id,
         ads::mojom::PromotedContentAdEventType::kClicked);
   }
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayOnCardViews(
     base::Value::ConstListView args) {
+#if 0
   // Argument should be how many cards viewed in this session.
   int cards_viewed_total = args[0].GetInt();
   // Track how many Brave Today cards have been viewed per session
@@ -680,10 +721,12 @@ void BraveNewTabMessageHandler::HandleTodayOnCardViews(
   int answer = it_count - kBuckets;
   UMA_HISTOGRAM_EXACT_LINEAR("Brave.Today.WeeklyMaxCardViewsCount", answer,
                              base::size(kBuckets) + 1);
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayOnPromotedCardView(
     base::Value::ConstListView args) {
+#if 0
   // Argument should be how many cards viewed in this session.
   std::string creative_instance_id = args[0].GetString();
   std::string item_id = args[1].GetString();
@@ -693,10 +736,12 @@ void BraveNewTabMessageHandler::HandleTodayOnPromotedCardView(
         item_id, creative_instance_id,
         ads::mojom::PromotedContentAdEventType::kViewed);
   }
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayGetDisplayAd(
     base::Value::ConstListView args) {
+#if 0
   AllowJavascript();
   std::string callback_id = args[0].GetString();
   auto* ads_service_ = brave_ads::AdsServiceFactory::GetForProfile(profile_);
@@ -728,10 +773,12 @@ void BraveNewTabMessageHandler::HandleTodayGetDisplayAd(
       },
       weak_ptr_factory_.GetWeakPtr(), callback_id);
   ads_service_->GetInlineContentAd("900x750", std::move(on_ad_received));
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayOnDisplayAdVisit(
     base::Value::ConstListView args) {
+#if 0
   // Collect params
   std::string item_id = args[0].GetString();
   std::string creative_instance_id = args[1].GetString();
@@ -757,10 +804,12 @@ void BraveNewTabMessageHandler::HandleTodayOnDisplayAdVisit(
   ads_service_->OnInlineContentAdEvent(
       item_id, creative_instance_id,
       ads::mojom::InlineContentAdEventType::kClicked);
+#endif
 }

 void BraveNewTabMessageHandler::HandleTodayOnDisplayAdView(
     base::Value::ConstListView args) {
+#if 0
   // Collect params
   std::string item_id = args[0].GetString();
   std::string creative_instance_id = args[1].GetString();
@@ -796,6 +845,7 @@ void BraveNewTabMessageHandler::HandleTodayOnDisplayAdView(
   int answer = it_count - kBuckets;
   UMA_HISTOGRAM_EXACT_LINEAR("Brave.Today.WeeklyDisplayAdsViewedCount", answer,
                              base::size(kBuckets) + 1);
+#endif
 }

 void BraveNewTabMessageHandler::OnPrivatePropertiesChanged() {
diff --git a/build/features.gni b/build/features.gni
index 46411294a0..b9bf03becc 100644
--- a/build/features.gni
+++ b/build/features.gni
@@ -5,9 +5,9 @@ declare_args() {
 }

 if (is_official_build) {
-  assert(brave_services_key != "")
-  assert(updater_dev_endpoint != "")
-  assert(updater_prod_endpoint != "")
+  #assert(brave_services_key != "")
+  #assert(updater_dev_endpoint != "")
+  #assert(updater_prod_endpoint != "")
 }

 brave_service_key_defines = []
diff --git a/components/brave_referrals/buildflags/buildflags.gni b/components/brave_referrals/buildflags/buildflags.gni
index 3848636402..a500258d00 100755
--- a/components/brave_referrals/buildflags/buildflags.gni
+++ b/components/brave_referrals/buildflags/buildflags.gni
@@ -1,3 +1,3 @@
 declare_args() {
-  enable_brave_referrals = is_mac || is_linux || is_win || is_android
+  enable_brave_referrals = false
 }
diff --git a/components/brave_referrals/common/BUILD.gn b/components/brave_referrals/common/BUILD.gn
index a5ab8b51cc..0c06a94812 100644
--- a/components/brave_referrals/common/BUILD.gn
+++ b/components/brave_referrals/common/BUILD.gn
@@ -1,6 +1,6 @@
 import("//brave/components/brave_referrals/buildflags/buildflags.gni")

-assert(enable_brave_referrals)
+#assert(enable_brave_referrals)

 static_library("common") {
   sources = [
diff --git a/components/p3a/buildflags.gni b/components/p3a/buildflags.gni
index b8fca0c6da..d60687346f 100644
--- a/components/p3a/buildflags.gni
+++ b/components/p3a/buildflags.gni
@@ -1,3 +1,3 @@
 declare_args() {
-  brave_p3a_enabled = true
+  brave_p3a_enabled = false
 }
