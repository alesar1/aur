diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5303458..1369e97 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -122,6 +122,7 @@ target_compile_definitions(${PLUGIN_NAME} PUBLIC
         )
 
 find_library(pcap REQUIRED)
+find_library(procps REQUIRED)
 
 # 设置目标要使用的链接库
 # 变量 ${DtkWidget_LIBRARIES} 和 ${Qt5Widgets_LIBRARIES} 是在前面执行 find_package 命令时引入的
@@ -132,6 +133,7 @@ target_link_libraries(${PLUGIN_NAME} PRIVATE
         ${DdeDockInterface_LIBRARIES}
         ${CMAKE_CURRENT_SOURCE_DIR}/nethogs/src/libnethogs.a
         pcap
+        procps
         dde_istate_netspeed
         dde_istate_datetime
         dde_istate_cpu
diff --git a/utils/desktop_entry_stat.cpp b/utils/desktop_entry_stat.cpp
index d2bedc6..aac43ce 100644
--- a/utils/desktop_entry_stat.cpp
+++ b/utils/desktop_entry_stat.cpp
@@ -35,7 +35,7 @@ DCORE_USE_NAMESPACE
 
 static const int kUpdateInterval = 1000 * 300; // 5 minutes interval
 
-auto print_err = [](decltype(errno) e, const QString &msg)
+auto print_err_entry = [](decltype(errno) e, const QString &msg)
 {
     qDebug() << QString("Error: [%1] %2, ").arg(e).arg(strerror(e)) << msg;
 };
@@ -98,7 +98,7 @@ void DesktopEntryStat::refresh()
     errno = 0;
     dir = opendir(DESKTOP_ENTRY_PATH);
     if (!dir) {
-        print_err(errno, QString("open %1 failed").arg(DESKTOP_ENTRY_PATH));
+        print_err_entry(errno, QString("open %1 failed").arg(DESKTOP_ENTRY_PATH));
         return;
     }
 
@@ -121,7 +121,7 @@ void DesktopEntryStat::refresh()
         }
     }
     if (errno && !cache.size()) {
-        print_err(errno, QString("read %1 failed").arg(DESKTOP_ENTRY_PATH));
+        print_err_entry(errno, QString("read %1 failed").arg(DESKTOP_ENTRY_PATH));
     }
     closedir(dir);
 
diff --git a/utils/process_stat.cpp b/utils/process_stat.cpp
index 048b2f4..6e9f5fe 100644
--- a/utils/process_stat.cpp
+++ b/utils/process_stat.cpp
@@ -42,7 +42,7 @@
 #define PROC_FD_NAME_PATH       "/proc/%u/fd/%s"
 #define PROC_SCHEDSTAT_PATH     "/proc/%u/schedstat"
 
-auto print_err = [](decltype(errno) e, const QString &msg)
+auto print_err_process = [](decltype(errno) e, const QString &msg)
 {
 //    qDebug() << QString("Error: [%1] %2, ").arg(e).arg(strerror(e)) << msg;
 };
@@ -91,7 +91,7 @@ bool ProcessStat::readProcStats(ProcIterateCallback pfnCallback, void *context)
     errno = 0;
     dp = opendir(PROC_PATH);
     if (!dp) {
-        print_err(errno, "open /proc failed");
+        print_err_process(errno, "open /proc failed");
         return b;
     }
 
@@ -116,7 +116,7 @@ bool ProcessStat::readProcStats(ProcIterateCallback pfnCallback, void *context)
         }
     }
     if (errno) {
-        print_err(errno, "read /proc failed");
+        print_err_process(errno, "read /proc failed");
         closedir(dp);
         return b;
     }
@@ -143,13 +143,13 @@ bool ProcessStat::readStat(ProcStat &ps)
     errno = 0;
     sprintf(path, PROC_STAT_PATH, ps->pid);
     if ((fd = open(path, O_RDONLY)) < 0) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
     sz = read(fd, buf.data(), 1024);
     if (sz < 0) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
         close(fd);
         return b;
     }
@@ -216,13 +216,13 @@ bool ProcessStat::readCmdline(ProcStat &ps)
 
     errno = 0;
     if (!(fp = fopen(path, "r"))) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
     nb = fread(cmd.data(), 1, bsiz - 1, fp);
     if (ferror(fp)) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
         fclose(fp);
         return b;
     }
@@ -263,7 +263,7 @@ void ProcessStat::readEnviron(ProcStat &ps)
     errno = 0;
     fd = open(path, O_RDONLY);
     if (fd < 0) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return;
     }
 
@@ -272,7 +272,7 @@ void ProcessStat::readEnviron(ProcStat &ps)
         sbuf.append(buf, int(nb));
     }
     if (nb == 0 && errno != 0) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
     }
     close(fd);
 
@@ -302,13 +302,13 @@ bool ProcessStat::readSchedStat(ProcStat &ps, struct stat_context &ctx)
 
     errno = 0;
     if ((fd = open(path, O_RDONLY)) < 0) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
     n = read(fd, buf.data(), bsiz - 1);
     if (n < 0) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
         close(fd);
         return b;
     }
@@ -336,7 +336,7 @@ bool ProcessStat::readStatus(ProcStat &ps)
 
     errno = 0;
     if (!(fp = fopen(path, "r)"))) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
@@ -360,7 +360,7 @@ bool ProcessStat::readStatus(ProcStat &ps)
         }
     }
     if (ferror(fp)) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
     } else {
         b = true;
     }
@@ -381,13 +381,13 @@ bool ProcessStat::readStatm(ProcStat &ps, struct stat_context &ctx)
 
     errno = 0;
     if ((fd = open(path, O_RDONLY)) < 0) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
     nr = read(fd, buf, bsiz);
     if (nr < 0) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
         close(fd);
         return b;
     }
@@ -398,7 +398,7 @@ bool ProcessStat::readStatm(ProcStat &ps, struct stat_context &ctx)
     if (nr != 2) {
         ps->rss = 0;
         ps->shm = 0;
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
     } else {
         ps->rss <<= ctx.kb_shift;
         ps->shm <<= ctx.kb_shift;
@@ -418,7 +418,7 @@ bool ProcessStat::readIO(ProcStat &ps)
 
     errno = 0;
     if (!(fp = fopen(path, "r"))) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
@@ -432,7 +432,7 @@ bool ProcessStat::readIO(ProcStat &ps)
         }
     }
     if (ferror(fp)) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
     } else {
         b = true;
     }
@@ -453,7 +453,7 @@ bool ProcessStat::readSockInodes(ProcStat &ps)
 
     errno = 0;
     if (!(dir = opendir(path))) {
-        print_err(errno, QString("open %1 failed").arg(path));
+        print_err_process(errno, QString("open %1 failed").arg(path));
         return b;
     }
 
@@ -469,7 +469,7 @@ bool ProcessStat::readSockInodes(ProcStat &ps)
         }
     }
     if (errno) {
-        print_err(errno, QString("read %1 failed").arg(path));
+        print_err_process(errno, QString("read %1 failed").arg(path));
     } else {
         b = true;
     }
diff --git a/utils/system_stat.cpp b/utils/system_stat.cpp
index 90395fb..00c0d24 100644
--- a/utils/system_stat.cpp
+++ b/utils/system_stat.cpp
@@ -52,25 +52,27 @@ auto print_err = [](decltype(errno) e, const QString &msg)
 bool SystemStat::readLoadAvg(qreal &loadAvg1, qreal &loadAvg5, qreal &loadAvg15) {
     bool b = false;
     FILE *fp;
-    char buf[128];
-    int rc;
-    double avg1, avg5, avg15;
-
+    char buf[256];
+    double load[3];
+    int i;
     errno = 0;
-    if ((fp = fopen(PROC_PATH_LOADAVG, "r")) == nullptr) {
-        print_err(errno, QString("open %1 failed").arg(PROC_PATH_LOADAVG));
-        return b;
-    }
 
-    if (fgets(buf, sizeof(buf), fp)) {
-        rc = sscanf(buf, "%lf %lf %lf", &avg1, &avg5, &avg15);
-        if (rc == 3) {
-            loadAvg1 = avg1;
-            loadAvg5 = avg5;
-            loadAvg15 = avg15;
+    if ((fp = fopen(PROC_PATH_LOADAVG, "r")) != nullptr) {
+    	if((fgets(buf, sizeof(buf), fp)) != nullptr) {
+    		load[0] = strtod(strtok(buf, " \n"), NULL);
+    		for(i=1;i<3;i++){
+            	load[i] = strtod(strtok(NULL, " \n"), NULL);
+    		}
+    		loadAvg1 = load[0];
+    		loadAvg5 = load[1];
+    		loadAvg15 = load[2];
             b = true;
         }
-    }
+        else {
+        	print_err(errno, QString("open %1 failed").arg(PROC_PATH_LOADAVG));
+        	return b;
+    	}
+  	}
     fclose(fp);
     if (!b) {
         print_err(errno, QString("read %1 failed").arg(PROC_PATH_LOADAVG));
