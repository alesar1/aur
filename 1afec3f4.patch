From 1afec3f4355d89e910a58a5a4cc7b623a25d6cdf Mon Sep 17 00:00:00 2001
From: Norbert Pfeiler <norbert.pfeiler+git@gmail.com>
Date: Mon, 6 Nov 2017 13:49:26 +0100
Subject: [PATCH] remove python dc2pointer and oc2poitner api

---
 scriptengine/proxies/pythonproxy.cpp | 105 ---------------------------
 scriptengine/proxies/pythonproxy.h   |  11 ---
 2 files changed, 116 deletions(-)

diff --git a/scriptengine/proxies/pythonproxy.cpp b/scriptengine/proxies/pythonproxy.cpp
index fc8d8a355..12ccfb0aa 100644
--- a/scriptengine/proxies/pythonproxy.cpp
+++ b/scriptengine/proxies/pythonproxy.cpp
@@ -63,20 +63,6 @@ int PythonProxy::getCubeEdgeLength() {
     return Dataset::current().cubeEdgeLength;
 }
 
-QList<int> PythonProxy::getOcPixel(QList<int> Dc, QList<int> pxInDc) {
-    char *cube = (char*)Coordinate2BytePtr_hash_get_or_fail(state->Oc2Pointer[int_log(Dataset::current().magnification)], CoordOfCube(Dc[0], Dc[1], Dc[2]));
-    if (NULL == cube) {
-        return QList<int>();
-    }
-    int index = (pxInDc[2] * state->cubeSliceArea) + (pxInDc[1] * Dataset::current().cubeEdgeLength) + pxInDc[0];
-    int byte_index = index * OBJID_BYTES;
-    QList<int> charList;
-    for (int i = 0; i < 3; i++) {
-        charList.append((int)cube[byte_index + i]);
-    }
-    return charList;
-}
-
 QList<int> PythonProxy::getPosition() {
     return state->viewerState->currentPosition.list();
 }
@@ -85,97 +71,6 @@ QList<float> PythonProxy::getScale() {
     return Dataset::current().scale.list();
 }
 
-
-char *PythonProxy::addrDcOc2Pointer(QList<int> coord, bool isOc) {
-    coord2bytep_map_t *PointerMap = isOc ? state->Oc2Pointer : state->Dc2Pointer;
-    void *data = Coordinate2BytePtr_hash_get_or_fail(PointerMap[(int)std::log2(Dataset::current().magnification)], coord);
-    if (data == NULL) {
-        emit echo(QString("no cube data found at Coordinate (%1, %2, %3)").arg(coord[0]).arg(coord[1]).arg(coord[2]));
-    }
-    return reinterpret_cast<char*>(data);
-}
-
-QByteArray PythonProxy::readDc2Pointer(QList<int> coord) {
-    void *data = addrDcOc2Pointer(coord, false);
-    if(!data) {
-        return QByteArray();
-    }
-
-    return QByteArray::fromRawData((const char*)data, state->cubeBytes);
-}
-
-PyObject* PythonProxy::PyBufferAddrDcOc2Pointer(QList<int> coord, bool isOc) {
-    void *data = addrDcOc2Pointer(coord,isOc);
-    return PyBuffer_FromReadWriteMemory(data, state->cubeBytes*(isOc ? OBJID_BYTES : 1));
-}
-
-int PythonProxy::readDc2PointerPos(QList<int> coord, int pos) {
-    void *data = addrDcOc2Pointer(coord, false);
-    if(!data) {
-        return -1;
-    }
-
-    return reinterpret_cast<std::uint8_t*>(data)[pos];
-}
-
-bool PythonProxy::writeDc2Pointer(QList<int> coord, char *bytes) {
-    char *data = addrDcOc2Pointer(coord,false);
-    if(!data) {
-        return false;
-    }
-
-    memcpy(data, bytes, state->cubeBytes);
-    return true;
-}
-
-bool PythonProxy::writeDc2PointerPos(QList<int> coord, int pos, int val) {
-    char *data = addrDcOc2Pointer(coord,false);
-    if(!data) {
-        return false;
-    }
-
-    data[pos] = val;
-    return true;
-}
-
-QByteArray PythonProxy::readOc2Pointer(QList<int> coord) {
-    char *data = addrDcOc2Pointer(coord,true);
-    if(!data) {
-        return QByteArray();
-    }
-
-    return QByteArray::fromRawData((const char*)data, state->cubeBytes * OBJID_BYTES);
-}
-
-quint64 PythonProxy::readOc2PointerPos(QList<int> coord, int pos) {
-    quint64 *data = (quint64*)addrDcOc2Pointer(coord,true);
-    if(!data) {
-        return -1;
-    }
-
-    return data[pos];
-}
-
-bool PythonProxy::writeOc2Pointer(QList<int> coord, char *bytes) {
-    char *data = addrDcOc2Pointer(coord,true);
-    if(!data) {
-        return false;
-    }
-
-    memcpy(data, bytes, state->cubeBytes * OBJID_BYTES);
-    return true;
-}
-
-bool PythonProxy::writeOc2PointerPos(QList<int> coord, int pos, quint64 val) {
-    quint64 *data = (quint64*)addrDcOc2Pointer(coord,true);
-    if(!data) {
-        return false;
-    }
-
-    data[pos] = val;
-    return true;
-}
-
 QVector<int> PythonProxy::processRegionByStridedBufProxy(QList<int> globalFirst, QList<int> size,
                              quint64 dataPtr, QList<int> strides, bool isWrite, bool isMarkChanged) {
     auto cubeChangeSet = processRegionByStridedBuf(Coordinate(globalFirst), Coordinate(globalFirst) + Coordinate(size) - 1, (char*)dataPtr, Coordinate(strides), isWrite, isMarkChanged);
diff --git a/scriptengine/proxies/pythonproxy.h b/scriptengine/proxies/pythonproxy.h
index 3af79cb7d..81928a33b 100644
--- a/scriptengine/proxies/pythonproxy.h
+++ b/scriptengine/proxies/pythonproxy.h
@@ -57,23 +57,12 @@ public slots:
     QString getKnossosVersion();
     QString getKnossosRevision();
     int getCubeEdgeLength();
-    QList<int> getOcPixel(QList<int> Dc, QList<int> pxInDc);
     QList<int> getPosition();
     QList<float> getScale();
     void setPosition(QList<int> coord);
 
     quint64 readOverlayVoxel(QList<int> coord);
     bool writeOverlayVoxel(QList<int> coord, quint64 val);
-    char *addrDcOc2Pointer(QList<int> coord, bool isOc);
-    PyObject *PyBufferAddrDcOc2Pointer(QList<int> coord, bool isOc);
-    QByteArray readDc2Pointer(QList<int> coord);
-    int readDc2PointerPos(QList<int> coord, int pos);
-    bool writeDc2Pointer(QList<int> coord, char *bytes);
-    bool writeDc2PointerPos(QList<int> coord, int pos, int val);
-    QByteArray readOc2Pointer(QList<int> coord);
-    quint64 readOc2PointerPos(QList<int> coord, int pos);
-    bool writeOc2Pointer(QList<int> coord, char *bytes);
-    bool writeOc2PointerPos(QList<int> coord, int pos, quint64 val);
     QVector<int> processRegionByStridedBufProxy(QList<int> globalFirst, QList<int> size, quint64 dataPtr,
                                         QList<int> strides, bool isWrite, bool isMarkedChanged);
     void coordCubesMarkChangedProxy(QVector<int> cubeChangeSetList);
