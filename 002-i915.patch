--- A/drivers/gpu/drm/i915/i915_dma.c	2015-12-16 06:51:19.398996553 +0100
+++ B/drivers/gpu/drm/i915/i915_dma.c	2015-12-16 07:27:16.110394496 +0100
@@ -407,10 +407,20 @@
 	 * If we are a secondary display controller (!PCI_DISPLAY_CLASS_VGA),
 	 * then we do not take part in VGA arbitration and the
 	 * vga_client_register() fails with -ENODEV.
+	 *
+	 * NB.  The set_decode callback here actually only works on GMCH
+	 * devices, on newer HD devices we can only disable VGA MMIO space.
+	 * Disabling VGA I/O space requires disabling I/O in the PCI command
+	 * register.  Nonetheless, we like to pretend that we participate in
+	 * VGA arbitration and can dynamically disable VGA I/O space because
+	 * this makes X happy, even though it's a complete lie.
 	 */
-	ret = vga_client_register(dev->pdev, dev, NULL, i915_vga_set_decode);
-	if (ret && ret != -ENODEV)
-		goto out;
+	if (!i915.enable_hd_vgaarb || !HAS_PCH_SPLIT(dev)) {
+		ret = vga_client_register(dev->pdev, dev, NULL,
+		                          i915_vga_set_decode);
+	        if (ret && ret != -ENODEV)
+			goto out;
+	}
 
 	intel_register_dsm_handler();
 
@@ -451,6 +461,12 @@
 	if (ret)
 		goto cleanup_gem;
 
+	/*
+	 * Must do this after fbcon init so that
+	 * vgacon_save_screen() works during the handover.
+	 */
+	i915_disable_vga_mem(dev);
+	
 	/* Only enable hotplug handling once the fbdev is fully set up. */
 	intel_hpd_init(dev_priv);
 
--- A/drivers/gpu/drm/i915/intel_display.c	2015-12-16 07:07:15.389140813 +0100
+++ B/drivers/gpu/drm/i915/intel_display.c	2015-12-16 07:15:50.747589265 +0100
@@ -14720,6 +14720,33 @@
 	POSTING_READ(vga_reg);
 }
 
+static void i915_enable_vga_mem(struct drm_device *dev)
+{
+        /* Enable VGA memory on Intel HD */
+        if (i915.enable_hd_vgaarb && HAS_PCH_SPLIT(dev)) {
+                vga_get_uninterruptible(dev->pdev, VGA_RSRC_LEGACY_IO);
+                outb(inb(VGA_MSR_READ) | VGA_MSR_MEM_EN, VGA_MSR_WRITE);
+                vga_set_legacy_decoding(dev->pdev, VGA_RSRC_LEGACY_IO |
+                                                   VGA_RSRC_LEGACY_MEM |
+                                                   VGA_RSRC_NORMAL_IO |
+                                                   VGA_RSRC_NORMAL_MEM);
+                vga_put(dev->pdev, VGA_RSRC_LEGACY_IO);
+        }
+}
+
+void i915_disable_vga_mem(struct drm_device *dev)
+{
+        /* Disable VGA memory on Intel HD */
+        if (i915.enable_hd_vgaarb && HAS_PCH_SPLIT(dev)) {
+                vga_get_uninterruptible(dev->pdev, VGA_RSRC_LEGACY_IO);
+                outb(inb(VGA_MSR_READ) & ~VGA_MSR_MEM_EN, VGA_MSR_WRITE);
+                vga_set_legacy_decoding(dev->pdev, VGA_RSRC_LEGACY_IO |
+                                                   VGA_RSRC_NORMAL_IO |
+                                                   VGA_RSRC_NORMAL_MEM);
+                vga_put(dev->pdev, VGA_RSRC_LEGACY_IO);
+        }
+}
+
 void intel_modeset_init_hw(struct drm_device *dev)
 {
 	intel_update_cdclk(dev);
@@ -15071,6 +15098,7 @@
 	if (!(I915_READ(vga_reg) & VGA_DISP_DISABLE)) {
 		DRM_DEBUG_KMS("Something enabled VGA plane, disabling it\n");
 		i915_disable_vga(dev);
+		i915_disable_vga_mem(dev);
 	}
 }
 
@@ -15410,6 +15438,8 @@
 
 	intel_fbc_disable(dev_priv);
 
+	i915_enable_vga_mem(dev);
+
 	/* flush any delayed tasks or pending work */
 	flush_scheduled_work();
 
--- A/drivers/gpu/drm/i915/intel_drv.h	2015-12-16 07:17:47.551375252 +0100
+++ B/drivers/gpu/drm/i915/intel_drv.h	2015-12-16 07:19:25.521797347 +0100
@@ -1391,6 +1391,8 @@
 /* intel_tv.c */
 void intel_tv_init(struct drm_device *dev);
 
+extern void i915_disable_vga_mem(struct drm_device *dev);
+
 /* intel_atomic.c */
 int intel_connector_atomic_get_property(struct drm_connector *connector,
 					const struct drm_connector_state *state,
--- A/drivers/gpu/drm/i915/i915_params.c	2016-05-16 00:43:13.000000000 +0200
+++ B/drivers/gpu/drm/i915/i915_params.c	2016-06-13 13:14:25.419155466 +0200
@@ -51,6 +51,7 @@
 	.enable_cmd_parser = 1,
 	.use_mmio_flip = 0,
 	.mmio_debug = 0,
+        .enable_hd_vgaarb = false,
 	.verbose_state_checks = 1,
 	.nuclear_pageflip = 0,
 	.edp_vswing = 0,
@@ -171,6 +172,10 @@
 MODULE_PARM_DESC(enable_cmd_parser,
 		 "Enable command parsing (1=enabled [default], 0=disabled)");
 
+module_param_named(enable_hd_vgaarb, i915.enable_hd_vgaarb, bool, 0444);
+MODULE_PARM_DESC(enable_hd_vgaarb,
+       "Enable support for VGA arbitration on Intel HD IGD. (default: false)");
+
 module_param_named_unsafe(use_mmio_flip, i915.use_mmio_flip, int, 0600);
 MODULE_PARM_DESC(use_mmio_flip,
 		 "use MMIO flips (-1=never, 0=driver discretion [default], 1=always)");
--- A/drivers/gpu/drm/i915/i915_params.h	2016-06-13 13:44:09.540035337 +0200
+++ B/drivers/gpu/drm/i915/i915_params.h	2016-06-13 13:48:20.936830539 +0200
@@ -59,6 +59,7 @@
 	bool enable_guc_submission;
 	bool verbose_state_checks;
 	bool nuclear_pageflip;
+	bool enable_hd_vgaarb;
 };
 
 extern struct i915_params i915 __read_mostly;
