diff --git a/analyzemft/__init__.py b/analyzemft/__init__.py
index 2e56a01..874cef8 100644
--- a/analyzemft/__init__.py
+++ b/analyzemft/__init__.py
@@ -1,5 +1,5 @@
 __all__ = ["mftutils", "mft", "mftsession", "bitparse"]
-import bitparse
-import mft
-import mftsession
-import mftutils
+from . import bitparse
+from . import mft
+from . import mftsession
+from . import mftutils
diff --git a/analyzemft/mft.py b/analyzemft/mft.py
index 500e08c..c174abf 100644
--- a/analyzemft/mft.py
+++ b/analyzemft/mft.py
@@ -15,8 +15,8 @@ import ctypes
 import struct
 from optparse import OptionParser
 
-import bitparse
-import mftutils
+from . import bitparse
+from . import mftutils
 
 
 def parse_record(raw_record, options):
@@ -42,23 +42,23 @@ def parse_record(raw_record, options):
     record_number = record['recordnum']
 
     if options.debug:
-        print '-->Record number: %d\n\tMagic: %s Attribute offset: %d Flags: %s Size:%d' % (
+        print('-->Record number: %d\n\tMagic: %s Attribute offset: %d Flags: %s Size:%d' % (
             record_number,
             record['magic'],
             record['attr_off'],
             hex(int(record['flags'])),
             record['size'],
-        )
+        ))
 
     if record['magic'] == 0x44414142:
         if options.debug:
-            print "BAAD MFT Record"
+            print("BAAD MFT Record")
         record['baad'] = True
         return record
 
     if record['magic'] != 0x454c4946:
         if options.debug:
-            print "Corrupt MFT Record"
+            print("Corrupt MFT Record")
         record['corrupt'] = True
         return record
 
@@ -79,76 +79,76 @@ def parse_record(raw_record, options):
             atr_record['name'] = ''
 
         if options.debug:
-            print "Attribute type: %x Length: %d Res: %x" % (atr_record['type'], atr_record['len'], atr_record['res'])
+            print("Attribute type: %x Length: %d Res: %x" % (atr_record['type'], atr_record['len'], atr_record['res']))
 
         if atr_record['type'] == 0x10:  # Standard Information
             if options.debug:
-                print "Stardard Information:\n++Type: %s Length: %d Resident: %s Name Len:%d Name Offset: %d" % (
+                print("Stardard Information:\n++Type: %s Length: %d Resident: %s Name Len:%d Name Offset: %d" % (
                     hex(int(atr_record['type'])),
                     atr_record['len'],
                     atr_record['res'],
                     atr_record['nlen'],
                     atr_record['name_off'],
-                )
+                ))
             si_record = decode_si_attribute(raw_record[read_ptr + atr_record['soff']:], options.localtz)
             record['si'] = si_record
             if options.debug:
-                print "++CRTime: %s\n++MTime: %s\n++ATime: %s\n++EntryTime: %s" % (
+                print("++CRTime: %s\n++MTime: %s\n++ATime: %s\n++EntryTime: %s" % (
                     si_record['crtime'].dtstr,
                     si_record['mtime'].dtstr,
                     si_record['atime'].dtstr,
                     si_record['ctime'].dtstr,
-                )
+                ))
 
         elif atr_record['type'] == 0x20:  # Attribute list
             if options.debug:
-                print "Attribute list"
+                print("Attribute list")
             if atr_record['res'] == 0:
                 al_record = decode_attribute_list(raw_record[read_ptr + atr_record['soff']:], record)
                 record['al'] = al_record
                 if options.debug:
-                    print "Name: %s" % (al_record['name'])
+                    print("Name: %s" % (al_record['name']))
             else:
                 if options.debug:
-                    print "Non-resident Attribute List?"
+                    print("Non-resident Attribute List?")
                 record['al'] = None
 
         elif atr_record['type'] == 0x30:  # File name
             if options.debug:
-                print "File name record"
+                print("File name record")
             fn_record = decode_fn_attribute(raw_record[read_ptr + atr_record['soff']:], options.localtz, record)
             record['fn', record['fncnt']] = fn_record
             if options.debug:
-                print "Name: %s (%d)" % (fn_record['name'], record['fncnt'])
+                print("Name: %s (%d)" % (fn_record['name'], record['fncnt']))
             record['fncnt'] += 1
             if fn_record['crtime'] != 0:
                 if options.debug:
-                    print "\tCRTime: %s MTime: %s ATime: %s EntryTime: %s" % (
+                    print("\tCRTime: %s MTime: %s ATime: %s EntryTime: %s" % (
                         fn_record['crtime'].dtstr,
                         fn_record['mtime'].dtstr,
                         fn_record['atime'].dtstr,
                         fn_record['ctime'].dtstr,
-                    )
+                    ))
 
         elif atr_record['type'] == 0x40:  # Object ID
             object_id_record = decode_object_id(raw_record[read_ptr + atr_record['soff']:])
             record['objid'] = object_id_record
             if options.debug:
-                print "Object ID"
+                print("Object ID")
 
         elif atr_record['type'] == 0x50:  # Security descriptor
             record['sd'] = True
             if options.debug:
-                print "Security descriptor"
+                print("Security descriptor")
 
         elif atr_record['type'] == 0x60:  # Volume name
             record['volname'] = True
             if options.debug:
-                print "Volume name"
+                print("Volume name")
 
         elif atr_record['type'] == 0x70:  # Volume information
             if options.debug:
-                print "Volume info attribute"
+                print("Volume info attribute")
             volume_info_record = decode_volume_info(raw_record[read_ptr + atr_record['soff']:], options)
             record['volinfo'] = volume_info_record
 
@@ -168,57 +168,57 @@ def parse_record(raw_record, options):
             record['datacnt'] += 1
 
             if options.debug:
-                print "Data attribute"
+                print("Data attribute")
 
         elif atr_record['type'] == 0x90:  # Index root
             record['indexroot'] = True
             if options.debug:
-                print "Index root"
+                print("Index root")
 
         elif atr_record['type'] == 0xA0:  # Index allocation
             record['indexallocation'] = True
             if options.debug:
-                print "Index allocation"
+                print("Index allocation")
 
         elif atr_record['type'] == 0xB0:  # Bitmap
             record['bitmap'] = True
             if options.debug:
-                print "Bitmap"
+                print("Bitmap")
 
         elif atr_record['type'] == 0xC0:  # Reparse point
             record['reparsepoint'] = True
             if options.debug:
-                print "Reparse point"
+                print("Reparse point")
 
         elif atr_record['type'] == 0xD0:  # EA Information
             record['eainfo'] = True
             if options.debug:
-                print "EA Information"
+                print("EA Information")
 
         elif atr_record['type'] == 0xE0:  # EA
             record['ea'] = True
             if options.debug:
-                print "EA"
+                print("EA")
 
         elif atr_record['type'] == 0xF0:  # Property set
             record['propertyset'] = True
             if options.debug:
-                print "Property set"
+                print("Property set")
 
         elif atr_record['type'] == 0x100:  # Logged utility stream
             record['loggedutility'] = True
             if options.debug:
-                print "Logged utility stream"
+                print("Logged utility stream")
 
         else:
             if options.debug:
-                print "Found an unknown attribute"
+                print("Found an unknown attribute")
 
         if atr_record['len'] > 0:
             read_ptr = read_ptr + atr_record['len']
         else:
             if options.debug:
-                print "ATRrecord->len < 0, exiting loop"
+                print("ATRrecord->len < 0, exiting loop")
             break
 
     if options.anomaly:
@@ -397,7 +397,7 @@ def mft_to_csv(record, ret_header, options):
 def mft_to_json(record):
     json_object = {}
     
-    if record.has_key('si'):
+    if 'si' in record:
         #print "Make Me JSON %s, %s, %s , %s, %s"  % (str(record['recordnum']), str(record['filename']), str(record['magic']), str(record['size']), record['si']['mtime'].dtstr)
         json_object['filename'] = str(record['filename'])
         json_object['recordnumber'] = str(record['recordnum'])
@@ -741,12 +741,12 @@ def decode_volume_info(s, options):
     }
 
     if options.debug:
-        print "+Volume Info"
-        print "++F1%d" % d['f1']
-        print "++Major Version: %d" % d['maj_ver']
-        print "++Minor Version: %d" % d['min_ver']
-        print "++Flags: %d" % d['flags']
-        print "++F2: %d" % d['f2']
+        print("+Volume Info")
+        print("++F1%d" % d['f1'])
+        print("++Major Version: %d" % d['maj_ver'])
+        print("++Minor Version: %d" % d['min_ver'])
+        print("++Flags: %d" % d['flags'])
+        print("++F2: %d" % d['f2'])
 
     return d
 
@@ -774,8 +774,8 @@ def object_id(s):
     if s == 0:
         objstr = 'Undefined'
     else:
-        objstr = '-'.join(map(bytes.decode, map(binascii.hexlify, (s[0:4][::-1], s[4:6][::-1], \
-                                                                   s[6:8][::-1], s[8:10], s[10:]))))
+        objstr = '-'.join(map(bytes.decode, list(map(binascii.hexlify, (s[0:4][::-1], s[4:6][::-1], \
+                                                                   s[6:8][::-1], s[8:10], s[10:])))))
 
     return objstr
 
diff --git a/analyzemft/mftsession.py b/analyzemft/mftsession.py
index 653a8bd..aaa1a0b 100644
--- a/analyzemft/mftsession.py
+++ b/analyzemft/mftsession.py
@@ -17,7 +17,7 @@ import os
 import sys
 from optparse import OptionParser
 
-import mft
+from . import mft
 
 
 SIAttributeSizeXP = 72
@@ -115,11 +115,11 @@ class MftSession:
        
             
         if self.options.version:
-            print("Version is: %s" % VERSION)
+            print(("Version is: %s" % VERSION))
             sys.exit()
 
         if self.options.filename is None:
-            print "-f <filename> required."
+            print("-f <filename> required.")
             sys.exit()
 
         # if self.options.output == None and self.options.bodyfile == None and self.options.csvtimefile == None:
@@ -129,28 +129,28 @@ class MftSession:
         try:
             self.file_mft = open(self.options.filename, 'rb')
         except:
-            print "Unable to open file: %s" % self.options.filename
+            print("Unable to open file: %s" % self.options.filename)
             sys.exit()
 
         if self.options.output is not None:
             try:
                 self.file_csv = csv.writer(open(self.options.output, 'wb'), dialect=csv.excel, quoting=1)
             except (IOError, TypeError):
-                print "Unable to open file: %s" % self.options.output
+                print("Unable to open file: %s" % self.options.output)
                 sys.exit()
         
         if self.options.bodyfile is not None:
             try:
                 self.file_body = open(self.options.bodyfile, 'w')
             except:
-                print "Unable to open file: %s" % self.options.bodyfile
+                print("Unable to open file: %s" % self.options.bodyfile)
                 sys.exit()
 
         if self.options.csvtimefile is not None:
             try:
                 self.file_csv_time = open(self.options.csvtimefile, 'w')
             except (IOError, TypeError):
-                print "Unable to open file: %s" % self.options.csvtimefile
+                print("Unable to open file: %s" % self.options.csvtimefile)
                 sys.exit()
 
     # Provides a very rudimentary check to see if it's possible to store the entire MFT in memory
@@ -158,10 +158,10 @@ class MftSession:
     def sizecheck(self):
 
         # The number of records in the MFT is the size of the MFT / 1024
-        self.mftsize = long(os.path.getsize(self.options.filename)) / 1024
+        self.mftsize = int(os.path.getsize(self.options.filename)) / 1024
 
         if self.options.debug:
-            print 'There are %d records in the MFT' % self.mftsize
+            print('There are %d records in the MFT' % self.mftsize)
 
         if not self.options.inmemory:
             return
@@ -171,7 +171,7 @@ class MftSession:
         sizeinbytes = self.mftsize * 4500
 
         if self.options.debug:
-            print 'Need %d bytes of memory to save into memory' % sizeinbytes
+            print('Need %d bytes of memory to save into memory' % sizeinbytes)
 
         try:
             arr = []
@@ -179,7 +179,7 @@ class MftSession:
                 arr.append(1)
 
         except MemoryError:
-            print 'Error: Not enough memory to store MFT in memory. Try running again without -s option'
+            print('Error: Not enough memory to store MFT in memory. Try running again without -s option')
             sys.exit()
 
     def process_mft_file(self):
@@ -199,7 +199,7 @@ class MftSession:
         while raw_record != "":
             record = mft.parse_record(raw_record, self.options)
             if self.options.debug:
-                print record
+                print(record)
 
             record['filename'] = self.mft[self.num_records]['filename']
 
@@ -242,7 +242,7 @@ class MftSession:
 
         if self.options.progress:
             if self.num_records % (self.mftsize / 5) == 0 and self.num_records > 0:
-                print 'Building MFT: {0:.0f}'.format(100.0 * self.num_records / self.mftsize) + '%'
+                print('Building MFT: {0:.0f}'.format(100.0 * self.num_records / self.mftsize) + '%')
 
     def plaso_process_mft_file(self):
 
@@ -258,7 +258,7 @@ class MftSession:
         while raw_record != "":
             record = mft.parse_record(raw_record, self.options)
             if self.options.debug:
-                print record
+                print(record)
 
             record['filename'] = self.mft[self.num_records]['filename']
 
@@ -280,7 +280,7 @@ class MftSession:
             minirec = {}
             record = mft.parse_record(raw_record, self.options)
             if self.options.debug:
-                print record
+                print(record)
 
             minirec['filename'] = record['filename']
             minirec['fncnt'] = record['fncnt']
@@ -300,7 +300,7 @@ class MftSession:
 
             if self.options.progress:
                 if self.num_records % (self.mftsize / 5) == 0 and self.num_records > 0:
-                    print 'Building Filepaths: {0:.0f}'.format(100.0 * self.num_records / self.mftsize) + '%'
+                    print('Building Filepaths: {0:.0f}'.format(100.0 * self.num_records / self.mftsize) + '%')
 
             self.num_records += 1
 
@@ -310,7 +310,7 @@ class MftSession:
 
     def get_folder_path(self, seqnum):
         if self.debug:
-            print "Building Folder For Record Number (%d)" % seqnum
+            print("Building Folder For Record Number (%d)" % seqnum)
 
         if seqnum not in self.mft:
             return 'Orphan'
@@ -333,7 +333,7 @@ class MftSession:
         # Self referential parent sequence number. The filename becomes a NoFNRecord note
         if (self.mft[seqnum]['par_ref']) == seqnum:
             if self.debug:
-                print "Error, self-referential, while trying to determine path for seqnum %s" % seqnum
+                print("Error, self-referential, while trying to determine path for seqnum %s" % seqnum)
             self.mft[seqnum]['filename'] = 'ORPHAN' + self.path_sep + self.mft[seqnum]['name']
             return self.mft[seqnum]['filename']
 
@@ -359,6 +359,6 @@ class MftSession:
                     #   self.mft[i]['fn',self.mft[i]['fncnt']-1]['name']
                     # self.mft[i]['filename'] = self.mft[i]['filename'].replace('//','/')
                     if self.debug:
-                        print "Filename (with path): %s" % self.mft[i]['filename']
+                        print("Filename (with path): %s" % self.mft[i]['filename'])
                 else:
                     self.mft[i]['filename'] = 'NoFNRecord'
diff --git a/analyzemft/mftutils.py b/analyzemft/mftutils.py
index d974422..ce24cd5 100644
--- a/analyzemft/mftutils.py
+++ b/analyzemft/mftutils.py
@@ -7,8 +7,8 @@ class WindowsTime:
     """Convert the Windows time in 100 nanosecond intervals since Jan 1, 1601 to time in seconds since Jan 1, 1970"""
 
     def __init__(self, low, high, localtz):
-        self.low = long(low)
-        self.high = long(high)
+        self.low = int(low)
+        self.high = int(high)
 
         if (low == 0) and (high == 0):
             self.dt = 0
@@ -49,8 +49,8 @@ def hexdump(chars, sep, width):
         line = chars[:width]
         chars = chars[width:]
         line = line.ljust(width, '\000')
-        print "%s%s%s" % (sep.join("%02x" % ord(c) for c in line),
-                          sep, quotechars(line))
+        print("%s%s%s" % (sep.join("%02x" % ord(c) for c in line),
+                          sep, quotechars(line)))
 
 
 def quotechars(chars):
