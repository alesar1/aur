diff --git a/src/Mod/PartDesign/Gui/Command.cpp b/src/Mod/PartDesign/Gui/Command.cpp
index bb9f5d0682..aa2cfe088b 100644
--- a/src/Mod/PartDesign/Gui/Command.cpp
+++ b/src/Mod/PartDesign/Gui/Command.cpp
@@ -377,7 +377,7 @@ CmdPartDesignSubShapeBinder::CmdPartDesignSubShapeBinder()
     sPixmap         = "PartDesign_SubShapeBinder";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_MakeFace");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_MakeFace");
 }
 
 void CmdPartDesignSubShapeBinder::activated(int iMsg)
@@ -1278,7 +1278,7 @@ CmdPartDesignPad::CmdPartDesignPad()
     sPixmap       = "PartDesign_Pad";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Extrude");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Extrude");
 }
 
 void CmdPartDesignPad::activated(int iMsg)
@@ -1476,7 +1476,7 @@ CmdPartDesignRevolution::CmdPartDesignRevolution()
     sPixmap       = "PartDesign_Revolution";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_MakeRevolve");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_MakeRevolve");
 }
 
 void CmdPartDesignRevolution::activated(int iMsg)
@@ -1603,7 +1603,7 @@ CmdPartDesignAdditivePipe::CmdPartDesignAdditivePipe()
     sPixmap       = "PartDesign_Additive_Pipe";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Sweep");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Sweep");
 }
 
 void CmdPartDesignAdditivePipe::activated(int iMsg)
@@ -1706,7 +1706,7 @@ CmdPartDesignAdditiveLoft::CmdPartDesignAdditiveLoft()
     sPixmap       = "PartDesign_Additive_Loft";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Loft");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Loft");
 }
 
 void CmdPartDesignAdditiveLoft::activated(int iMsg)
@@ -1907,7 +1907,7 @@ CmdPartDesignFillet::CmdPartDesignFillet()
     sPixmap       = "PartDesign_Fillet";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Fillet");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Fillet");
 }
 
 void CmdPartDesignFillet::activated(int iMsg)
@@ -1938,7 +1938,7 @@ CmdPartDesignChamfer::CmdPartDesignChamfer()
     sPixmap       = "PartDesign_Chamfer";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Chamfer");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Chamfer");
 }
 
 void CmdPartDesignChamfer::activated(int iMsg)
@@ -2027,7 +2027,7 @@ CmdPartDesignThickness::CmdPartDesignThickness()
     sPixmap       = "PartDesign_Thickness";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Thickness");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Thickness");
 }
 
 void CmdPartDesignThickness::activated(int iMsg)
@@ -2144,7 +2144,7 @@ CmdPartDesignMirrored::CmdPartDesignMirrored()
     sPixmap       = "PartDesign_Mirrored";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Mirror");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Mirror");
 }
 
 void CmdPartDesignMirrored::activated(int iMsg)
@@ -2536,13 +2536,13 @@ CmdPartDesignBoolean::CmdPartDesignBoolean()
     sPixmap         = "PartDesign_Boolean";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Boolean");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Boolean");
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 1, _1, _2), "Part_Cut");
+            boost::bind(&commandOverride, this, 1, boost::placeholders::_1, boost::placeholders::_2), "Part_Cut");
                     
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 2, _1, _2), "Part_Common");
+            boost::bind(&commandOverride, this, 2, boost::placeholders::_1, boost::placeholders::_2), "Part_Common");
 }
 
 
@@ -2685,16 +2685,16 @@ CmdPartDesignSplit::CmdPartDesignSplit()
     sPixmap         = "PartDesign_Split";
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 1, _1, _2), "Part_BooleanFragments");
+            boost::bind(&commandOverride, this, 1, boost::placeholders::_1, boost::placeholders::_2), "Part_BooleanFragments");
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_Slice");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_Slice");
                     
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_SliceApart");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_SliceApart");
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, _1, _2), "Part_ExplodeCompound");
+            boost::bind(&commandOverride, this, 0, boost::placeholders::_1, boost::placeholders::_2), "Part_ExplodeCompound");
 }
 
 void CmdPartDesignSplit::activated(int iMsg)
diff --git a/src/Mod/PartDesign/Gui/CommandPrimitive.cpp b/src/Mod/PartDesign/Gui/CommandPrimitive.cpp
index 397e38fcac..e6a6fb0b10 100644
--- a/src/Mod/PartDesign/Gui/CommandPrimitive.cpp
+++ b/src/Mod/PartDesign/Gui/CommandPrimitive.cpp
@@ -85,15 +85,15 @@ CmdPrimtiveCompAdditive::CmdPrimtiveCompAdditive()
     eType           = ForEdit;
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, false, _1, _2), "Part_Box");
+            boost::bind(&commandOverride, this, 0, false, boost::placeholders::_1, boost::placeholders::_2), "Part_Box");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 1, false, _1, _2), "Part_Cylinder");
+            boost::bind(&commandOverride, this, 1, false, boost::placeholders::_1, boost::placeholders::_2), "Part_Cylinder");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 2, false, _1, _2), "Part_Sphere");
+            boost::bind(&commandOverride, this, 2, false, boost::placeholders::_1, boost::placeholders::_2), "Part_Sphere");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 3, false, _1, _2), "Part_Cone");
+            boost::bind(&commandOverride, this, 3, false, boost::placeholders::_1, boost::placeholders::_2), "Part_Cone");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 5, false, _1, _2), "Part_Torus");
+            boost::bind(&commandOverride, this, 5, false, boost::placeholders::_1, boost::placeholders::_2), "Part_Torus");
 }
 
 void CmdPrimtiveCompAdditive::activated(int iMsg)
@@ -267,15 +267,15 @@ CmdPrimtiveCompSubtractive::CmdPrimtiveCompSubtractive()
     eType           = ForEdit;
 
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 0, true, _1, _2), "Part_Box");
+            boost::bind(&commandOverride, this, 0, true, boost::placeholders::_1, boost::placeholders::_2), "Part_Box");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 1, true, _1, _2), "Part_Cylinder");
+            boost::bind(&commandOverride, this, 1, true, boost::placeholders::_1, boost::placeholders::_2), "Part_Cylinder");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 2, true, _1, _2), "Part_Sphere");
+            boost::bind(&commandOverride, this, 2, true, boost::placeholders::_1, boost::placeholders::_2), "Part_Sphere");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 3, true, _1, _2), "Part_Cone");
+            boost::bind(&commandOverride, this, 3, true, boost::placeholders::_1, boost::placeholders::_2), "Part_Cone");
     Gui::Application::Instance->commandManager().registerCallback(
-            boost::bind(&commandOverride, this, 5, true, _1, _2), "Part_Torus");
+            boost::bind(&commandOverride, this, 5, true, boost::placeholders::_1, boost::placeholders::_2), "Part_Torus");
 }
 
 void CmdPrimtiveCompSubtractive::activated(int iMsg)
