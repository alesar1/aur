diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..95afc6e
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,75 @@
+# Created by https://www.toptal.com/developers/gitignore/api/cmake,c
+# Edit at https://www.toptal.com/developers/gitignore?templates=cmake,c
+
+### C ###
+# Prerequisites
+*.d
+
+# Object files
+*.o
+*.ko
+*.obj
+*.elf
+
+# Linker output
+*.ilk
+*.map
+*.exp
+
+# Precompiled Headers
+*.gch
+*.pch
+
+# Libraries
+*.lib
+*.a
+*.la
+*.lo
+
+# Shared objects (inc. Windows DLLs)
+*.dll
+*.so
+*.so.*
+*.dylib
+
+# Executables
+*.exe
+*.out
+*.app
+*.i*86
+*.x86_64
+*.hex
+
+# Debug files
+*.dSYM/
+*.su
+*.idb
+*.pdb
+
+# Kernel Module Compile Results
+*.mod*
+*.cmd
+.tmp_versions/
+modules.order
+Module.symvers
+Mkfile.old
+dkms.conf
+
+### CMake ###
+CMakeLists.txt.user
+CMakeCache.txt
+CMakeFiles
+CMakeScripts
+Testing
+Makefile
+cmake_install.cmake
+install_manifest.txt
+compile_commands.json
+CTestTestfile.cmake
+_deps
+
+### CMake Patch ###
+# External projects
+*-prefix/
+
+# End of https://www.toptal.com/developers/gitignore/api/cmake,c
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..37ab068
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,33 @@
+cmake_minimum_required(VERSION 3.6)
+
+INCLUDE (CheckIncludeFile)
+INCLUDE (CheckIncludeFiles)
+INCLUDE (CheckSymbolExists)
+INCLUDE (CheckFunctionExists)
+INCLUDE (FeatureSummary)
+
+project(cwordle C)
+
+# To find config.h
+include_directories("${PROJECT_BINARY_DIR}")
+
+# set path to additional CMake modules
+set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
+
+set(CMAKE_COLOR_MAKEFILE ON)
+#set(CMAKE_C_STANDARD 18)
+if ( NOT( DEFINED DATA_DIR ) )
+	set(DATA_DIR ${CMAKE_INSTALL_PREFIX}/share/cwordle)
+endif()
+
+configure_file(config.h.in config.h)
+
+add_executable(cwordle cwordle.c)
+
+SET(CMAKE_C_FLAGS		"${CMAKE_C_FLAGS} -std=c18")
+SET(CMAKE_C_FLAGS		"${CMAKE_C_FLAGS} -Wall -Wextra -Wpedantic")
+
+install (TARGETS cwordle DESTINATION bin)
+install (FILES dict.txt possible.txt DESTINATION share/cwordle) 
+
+FEATURE_SUMMARY(WHAT ALL)
diff --git a/config.h.in b/config.h.in
new file mode 100644
index 0000000..4cfe812
--- /dev/null
+++ b/config.h.in
@@ -0,0 +1,9 @@
+/*
+ * This file is autogenerated from config.h.in 
+ * during the cmake configuration of your project. If you need to make changes
+ * edit the original file NOT THIS FILE.
+ */
+#ifndef _CONFIGURATION_HEADER_GUARD_H_
+#define _CONFIGURATION_HEADER_GUARD_H_
+#cmakedefine DATA_DIR "@DATA_DIR@"
+#endif
diff --git a/cwordle.c b/cwordle.c
index c1f4b0c..6bb19a2 100644
--- a/cwordle.c
+++ b/cwordle.c
@@ -19,12 +19,14 @@ Wordle for Terminal.
 #include <time.h>
 #include <wchar.h>
 
+#include "config.h"
+
 #define dummyWord "ERASE\0"
 #define MAX_TEXTBOX 6
 //words in the dictionary file should have 5 chars and a 0x0A at the end
 #define SEPARATOR 0x0A
-#define DICTIONARY "dict.txt"
-#define POSSIBLES "possible.txt"
+#define DICTIONARY DATA_DIR "/dict.txt"
+#define POSSIBLES DATA_DIR "/possible.txt"
 
 //UNICODE chars
 #define HOR_LINE 9472
@@ -126,7 +128,7 @@ void writeWord(int index,  char text[MAX_TEXTBOX]);
 void cleanArea();
 int findIndex(char c);
 //FILE
-int openFile(FILE ** fileHandler, char *fileName, char *mode);
+int openFile(FILE ** fileHandler, const char *fileName, const char *mode);
 long countWords(FILE * fileHandler);
 void getWordfromDictionary(FILE * fileHandler, char WORD[MAX_TEXTBOX]);
 int isWordinDictionary(FILE * fileHandler, char WORD[MAX_TEXTBOX]);
@@ -684,7 +686,7 @@ int i=0;
  gameLoop();
 }
 
-int openFile(FILE ** fileHandler, char *fileName, char *mode) {
+int openFile(FILE ** fileHandler, const char *fileName, const char *mode) {
   int     ok;
   *fileHandler = fopen(fileName, mode);
   //check whether buffer is assigned
