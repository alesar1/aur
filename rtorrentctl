#!/bin/bash

set -e

# systemd integration for rtorrent
#
# Starts and stops instances of rtorrent inside screen sessions
# Utilized by rtorrent@.service systemd service
# This process does not fork after starting rtorrent/screen
#
# Instances are rtorrent.rc files named ${INSTANCE}${CONFIG_EXT}
# Instances live in ${CONFIG_DIR}
#
# rtorrent's working directory will be the current directory unless
# there is a file named ${INSTANCE}${WORKING_DIR_EXT} containing
# a path on the first line, in which case that path will be the
# working directory for rtorrent/screen.
#
# Return codes:
# 1 - Working directory doesn't exist
# 2 - Invalid action
# 3 - Missing instance argument
# 4 - Incorrect number of arguments

# Directory containing .rtorrent.rc files for each rtorrent instance
CONFIG_DIR="/etc/rtorrent.d"
# Suffix of instance rtorrent.rc files
CONFIG_EXT=".rtorrent.rc"
# Suffix of working directory override file for an instance
WORKING_DIR_EXT=".wd"
# Suffix added to instance name and used as the screen session name
SESSION_SUFFIX="-rtorrent"

# Prints the script usage
function usage() {
  echo "Usage: rtorrentctl {start|stop} instance" >&2
  echo "'instance' names prefix of ${CONFIG_EXT} in ${CONFIG_DIR}" >&2
}

# Produces the configuration file path from the instance name 
function configFile() {
  echo "${CONFIG_DIR}/${1}${CONFIG_EXT}"
}

# Produces the working directory to use from the instance name
function workingDir() {
  # Path to where the working directory override file may be
  workingDirFile="${CONFIG_DIR}/${1}${WORKING_DIR_EXT}"

  # If there is no working directory override, use the current directory
  if [ ! -e "${workingDirFile}" ]
  then
    pwd
    return
  fi

  # Otherwise grab the path from the override file
  head -n 1 "${workingDirFile}"
}

# Produces the screen session name for an instance
function sessionName() {
  echo "${1}${SESSION_SUFFIX}"
}

# Starts an instance
function start() {
  instance="${1}"

  # Change to the desired working directory
  workingdir=$(workingDir "${instance}")
  cd "${workingdir}"

  # Exec screen
  # "-D -m"         Start detached and don't fork process
  # "-S ..."        Session name
  # "-n"            Tell rtorrent to not read ~/.rtorrent.rc
  # "-o import=..." Tell rtorrent to read and use this file as configuration
  screen -D -m -S "$(sessionName "${instance}")"  rtorrent -n -o import=${CONFIG}
}

# Stops an instance
function stop() {
  # Signal screen to send "quit" keystroke (CTRL+Q) to rtorrent
  # "-S ..." Session name
  # "-p ..." Screen number within session
  # "-X xon" Send 'xon' command, which means send 'CTRL+Q'
  screen -S "$(sessionName "${1}")" -p 0 -X xon
}

screen -D -m -S "${INSTANCE}${SESSION_SUFFIX}" -s "rtorrent -o 'import=${CONFIG}'"
if [[ "${1}" != "start" ]] && [[ "${1}" != "stop" ]]
then
  echo "Valid actions are 'start' and 'stop'" >&2
  usage
  exit 2
fi

if [[ "${2}" == "" ]] 
then
  echo "Must specify an instance" >&2
  usage
  exit 3
fi

if [[ $# -ne 2 ]]
then
  echo "Wrong number of arguments" >&2
  usage
  exit 4
fi

ACTION="${1}"
INSTANCE="${2}"

CONFIG=$(configFile "${INSTANCE}")
if [[ ! -e "${CONFIG}" ]]
then
  echo "Instance doesn't exist. Check ${CONFIG_DIR}" >&2
  exit 5
fi

echo "I am ${ACTION}ing ${INSTANCE}"
if [[ "${ACTION}" == "start" ]]
then

  start "${INSTANCE}"

elif [[ "${ACTION}" == "stop" ]]
then

  stop "${INSTANCE}"

fi

