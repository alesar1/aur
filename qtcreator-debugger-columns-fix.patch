diff --git a/src/plugins/debugger/debuggerengine.cpp b/src/plugins/debugger/debuggerengine.cpp
index 8ced94f4ba..e27a65bb6f 100644
--- a/src/plugins/debugger/debuggerengine.cpp
+++ b/src/plugins/debugger/debuggerengine.cpp
@@ -647,7 +647,7 @@ void DebuggerEnginePrivate::setupViews()
     m_registerWindow->setObjectName(DOCKWIDGET_REGISTER);
     m_registerWindow->setWindowTitle(tr("Reg&isters"));
 
-    m_stackView = new BaseTreeView;
+    m_stackView = new StackTreeView;
     m_stackView->setModel(m_stackHandler.model());
     m_stackView->setSettings(settings, "Debugger.StackView");
     m_stackView->setIconSize(QSize(10, 10));
@@ -668,6 +668,8 @@ void DebuggerEnginePrivate::setupViews()
 
     m_threadsView = new BaseTreeView;
     m_threadsView->setModel(m_threadsHandler.model());
+    m_threadsView->header()->setStretchLastSection(false);
+    m_threadsView->header()->setSectionResizeMode(ThreadData::FunctionColumn, QHeaderView::Stretch);
     m_threadsView->setSortingEnabled(true);
     m_threadsView->setSettings(settings, "Debugger.ThreadsView");
     m_threadsView->setIconSize(QSize(10, 10));
@@ -720,6 +722,8 @@ void DebuggerEnginePrivate::setupViews()
             this, [this](bool on) { m_breakView->setColumnHidden(BreakpointAddressColumn, !on); });
     m_breakView->setSettings(settings, "Debugger.BreakWindow");
     m_breakView->setModel(m_breakHandler.model());
+    m_breakView->header()->setStretchLastSection(false);
+    m_breakView->header()->setSectionResizeMode(BreakpointFunctionColumn, QHeaderView::Stretch);
     m_breakView->setRootIsDecorated(true);
     m_breakWindow = addSearch(m_breakView);
     m_breakWindow->setObjectName(DOCKWIDGET_BREAK);
diff --git a/src/plugins/debugger/debuggerplugin.cpp b/src/plugins/debugger/debuggerplugin.cpp
index 3f7b01d2bd..dfc5d6c0df 100644
--- a/src/plugins/debugger/debuggerplugin.cpp
+++ b/src/plugins/debugger/debuggerplugin.cpp
@@ -1038,6 +1038,8 @@ bool DebuggerPluginPrivate::initialize(const QStringList &arguments,
     m_breakpointManagerView->setSettings(settings, "Debugger.BreakWindow");
     m_breakpointManagerView->setRootIsDecorated(true);
     m_breakpointManagerView->setModel(BreakpointManager::model());
+    m_breakpointManagerView->header()->setStretchLastSection(false);
+    m_breakpointManagerView->header()->setSectionResizeMode(BreakpointFunctionColumn, QHeaderView::Stretch);
     m_breakpointManagerWindow = addSearch(m_breakpointManagerView);
     m_breakpointManagerWindow->setWindowTitle(tr("Breakpoint Preset"));
     m_breakpointManagerWindow->setObjectName(DOCKWIDGET_BREAKPOINTMANAGER);
diff --git a/src/plugins/debugger/stackwindow.cpp b/src/plugins/debugger/stackwindow.cpp
index 83e6af2829..bd14a327a6 100644
--- a/src/plugins/debugger/stackwindow.cpp
+++ b/src/plugins/debugger/stackwindow.cpp
@@ -32,33 +32,53 @@
 #include <utils/savedaction.h>
 
 #include <QAction>
+#include <QHeaderView>
 
 namespace Debugger {
 namespace Internal {
 
 StackTreeView::StackTreeView()
 {
-    setWindowTitle(tr("Stack"));
-
     connect(action(UseAddressInStackView), &QAction::toggled,
         this, &StackTreeView::showAddressColumn);
     showAddressColumn(false);
 }
 
+void StackTreeView::setModel(QAbstractItemModel *model)
+{
+    BaseTreeView::setModel(model);
+    connect(static_cast<StackHandler*>(model), &StackHandler::stackChanged,
+            this, [this]() {
+        if (!m_contentsAdjusted)
+            adjustForContents();
+    });
+
+    // Stretch function section to any remaining space.
+    header()->setStretchLastSection(false);
+    header()->setSectionResizeMode(StackFunctionNameColumn, QHeaderView::Stretch);
+
+    // Resize for the current contents if any are available.
+    showAddressColumn(action(UseAddressInStackView)->isChecked());
+}
+
 void StackTreeView::showAddressColumn(bool on)
 {
     setColumnHidden(StackAddressColumn, !on);
-    resizeColumnToContents(StackLevelColumn);
-    resizeColumnToContents(StackLineNumberColumn);
-    resizeColumnToContents(StackAddressColumn);
+    adjustForContents();
 }
 
-void StackTreeView::setModel(QAbstractItemModel *model)
+void StackTreeView::adjustForContents()
 {
-    BaseTreeView::setModel(model);
+    // Skip resizing if no contents. This will be called again once contents are available.
+    if (!model() || model()->rowCount() == 0)
+        return;
+
     resizeColumnToContents(StackLevelColumn);
+    resizeColumnToContents(StackFileNameColumn);
     resizeColumnToContents(StackLineNumberColumn);
-    showAddressColumn(action(UseAddressInStackView)->isChecked());
+    resizeColumnToContents(StackAddressColumn);
+    resizeColumns();
+    m_contentsAdjusted = true;
 }
 
 } // namespace Internal
diff --git a/src/plugins/debugger/stackwindow.h b/src/plugins/debugger/stackwindow.h
index 5439ead73f..3314ee8ca6 100644
--- a/src/plugins/debugger/stackwindow.h
+++ b/src/plugins/debugger/stackwindow.h
@@ -34,8 +34,6 @@ namespace Internal {
 
 class StackTreeView : public Utils::BaseTreeView
 {
-    Q_DECLARE_TR_FUNCTIONS(Debugger::Internal::StackTreeView)
-
 public:
     StackTreeView();
 
@@ -43,8 +41,9 @@ private:
     void setModel(QAbstractItemModel *model) override;
 
     void showAddressColumn(bool on);
-    void reloadFullStack();
-    void copyContentsToClipboard();
+    void adjustForContents();
+
+    bool m_contentsAdjusted = false;
 };
 
 } // namespace Internal
