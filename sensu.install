post_install() {
	# Perform necessary sensu setup steps
	# after package is installed.

	#OPTIONS="-c /etc/sensu/config.json -d /etc/sensu/conf.d -e /etc/sensu/extensions -l /var/log/sensu/sensu-client.log -L info"

	#SENSU_PATHS=$EMBEDDED_BIN_DIR:$PATH:$PLUGINS_DIR:$HANDLERS_DIR
	#SENSU_GEM_PATHS=$EMBEDDED_DIR/lib/ruby/gems/2.2.0:$GEM_PATH

	create_sensu_user_group()
	{
	    # create sensu group
	    set +e
	        grep "^sensu:" /etc/group > /dev/null
	        RC=$?
	    if [ "${RC}" != "0" ]; then
			groupadd -r sensu
		fi

	    # create sensu user
	    set +e
	        grep "^sensu:" /etc/passwd > /dev/null
	        RC=$?
	    if [ "${RC}" != "0" ]; then
			useradd -r -g sensu -d /opt/sensu -s /usr/bin/false -c "Sensu Monitoring Framework" sensu
		fi
	}

	chown_sensu_dirs()
	{
	    # Ensure all files/directories in $INSTALLER_DIR are owned by root.
	    chown -Rh 0:0 /opt/sensu
	    chown -R sensu:sensu /etc/sensu
	    chown -R sensu:sensu /var/log/sensu
	    chown -R sensu:sensu /var/run/sensu
	    chown -R sensu:sensu /var/cache/sensu
	}

	create_sensu_user_group
	chown_sensu_dirs
}

post_upgrade() {
	post_install
}

pre_remove() {
	# Perform necessary sensu setup steps
	# prior to uninstalling package.


	PROGNAME=`basename $0`

	error_exit()
	{
	  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
	  exit 1
	}

	stop_sensu_services()
	{
	  sensu_services="client server api"
	  for sensu_service in $sensu_services; do
	    set +e
	    systemctl stop "sensu-${sensu_service}"
	  done
	}

    stop_sensu_services
}

post_remove() {
	# Perform necessary sensu removal steps
	# after package is uninstalled.

    if [ -d /opt/sensu ]; then
        rm -r /opt/sensu
    fi
    if [ -d /var/cache/sensu ]; then
        rm -rf /var/cache/sensu
    fi
}
