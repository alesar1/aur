diff --git i/src/app/desktop/utils/index.js w/src/app/desktop/utils/index.js
index 9d23894..37ae04d 100644
--- i/src/app/desktop/utils/index.js
+++ w/src/app/desktop/utils/index.js
@@ -302,14 +302,7 @@ export const isLatestJavaDownloaded = async (meta, userData, retry) => {
   return isValid;
 };
 
-export const get7zPath = async () => {
-  // Get userData from ipc because we can't always get this from redux
-  const baseDir = await ipcRenderer.invoke('getUserData');
-  if (process.platform === 'darwin' || process.platform === 'linux') {
-    return path.join(baseDir, '7za');
-  }
-  return path.join(baseDir, '7za.exe');
-};
+export const get7zPath = async () => '/usr/bin/7za';
 
 export const extractNatives = async (libraries, instancePath) => {
   const extractLocation = path.join(instancePath, 'natives');
diff --git i/public/electron.js w/public/electron.js
index 38ac891..8113d39 100644
--- i/public/electron.js
+++ w/public/electron.js
@@ -12,7 +12,6 @@ const {
 } = require('electron');
 const path = require('path');
 const { spawn, exec } = require('child_process');
-const { autoUpdater } = require('electron-updater');
 const nsfw = require('nsfw');
 const murmur = require('murmur2-calculator');
 const log = require('electron-log');
@@ -91,43 +90,6 @@ log.log(process.env.REACT_APP_RELEASE_TYPE);
 
 const isDev = process.env.NODE_ENV === 'development';
 
-async function extract7z() {
-  const baseDir = path.join(app.getAppPath(), 'node_modules', '7zip-bin');
-
-  let zipLocationAsar = path.join(baseDir, 'linux', 'x64', '7za');
-  if (process.platform === 'darwin') {
-    zipLocationAsar = path.join(baseDir, 'mac', '7za');
-  }
-  if (process.platform === 'win32') {
-    zipLocationAsar = path.join(baseDir, 'win', 'x64', '7za.exe');
-  }
-  try {
-    await fs.copyFile(
-      zipLocationAsar,
-      path.join(app.getPath('userData'), path.basename(zipLocationAsar))
-    );
-
-    if (process.platform === 'linux' || process.platform === 'darwin') {
-      await promisify(exec)(
-        `chmod +x "${path.join(
-          app.getPath('userData'),
-          path.basename(zipLocationAsar)
-        )}"`
-      );
-      await promisify(exec)(
-        `chmod 755 "${path.join(
-          app.getPath('userData'),
-          path.basename(zipLocationAsar)
-        )}"`
-      );
-    }
-  } catch (e) {
-    log.error(e);
-  }
-}
-
-extract7z();
-
 let mainWindow;
 let tray;
 let watcher;
@@ -419,80 +381,3 @@ ipcMain.handle('calculateMurmur2FromPath', (e, filePath) => {
     });
   });
 });
-
-// AutoUpdater
-
-if (process.env.REACT_APP_RELEASE_TYPE === 'setup') {
-  autoUpdater.autoDownload = false;
-  // False for now
-  // autoUpdater.allowDowngrade = allowUnstableReleases;
-  autoUpdater.allowDowngrade = false;
-  autoUpdater.allowPrerelease = allowUnstableReleases;
-  autoUpdater.setFeedURL({
-    owner: 'gorilla-devs',
-    repo: 'GDLauncher',
-    provider: 'github'
-  });
-
-  autoUpdater.on('update-available', () => {
-    autoUpdater.downloadUpdate();
-  });
-
-  autoUpdater.on('update-downloaded', () => {
-    mainWindow.webContents.send('updateAvailable');
-  });
-
-  ipcMain.handle('checkForUpdates', () => {
-    autoUpdater.checkForUpdates();
-  });
-}
-
-ipcMain.handle('installUpdateAndQuitOrRestart', async (e, quitAfterInstall) => {
-  const tempFolder = path.join(
-    path.dirname(app.getPath('exe')),
-    'data',
-    'temp'
-  );
-  if (process.env.REACT_APP_RELEASE_TYPE === 'setup') {
-    autoUpdater.quitAndInstall(true, !quitAfterInstall);
-  } else {
-    const updaterVbs = 'updater.vbs';
-    const updaterBat = 'updateLauncher.bat';
-    await fs.writeFile(
-      path.join(tempFolder, updaterBat),
-      `ping 127.0.0.1 -n 1 > nul & robocopy "${path.join(
-        tempFolder,
-        'update'
-      )}" "." /MOV /E${
-        quitAfterInstall ? '' : ` & start "" "${app.getPath('exe')}"`
-      }
-        DEL "${path.join(tempFolder, updaterVbs)}"
-        DEL "%~f0"
-        `
-    );
-
-    await fs.writeFile(
-      path.join(tempFolder, updaterVbs),
-      `Set WshShell = CreateObject("WScript.Shell") 
-          WshShell.Run chr(34) & "${path.join(
-            tempFolder,
-            updaterBat
-          )}" & Chr(34), 0
-          Set WshShell = Nothing
-          `
-    );
-
-    const updateSpawn = spawn(path.join(tempFolder, updaterVbs), {
-      cwd: path.dirname(app.getPath('exe')),
-      detached: true,
-      shell: true,
-      stdio: [
-        'ignore' /* stdin */,
-        'ignore' /* stdout */,
-        'ignore' /* stderr */
-      ]
-    });
-    updateSpawn.unref();
-    mainWindow.close();
-  }
-});
