--- a/web/blob/blob.go
+++ b/web/blob/blob.go
@@ -1,7 +1,5 @@
 package blob

-//go:generate go-bindata -pkg blob -o files.go -ignore '(.*\.map|bootstrap\.js|bootstrap-theme\.css|bootstrap\.css)'  templates/... static/...
-
 import (
 	"fmt"
 	"io"
@@ -26,11 +24,8 @@

 // GetFile retrieves the content of an embedded file.
 func GetFile(bucket string, name string) ([]byte, error) {
-	data, err := Asset(fmt.Sprintf("%s/%s", bucket, name))
-	if err != nil {
-		return nil, err
-	}
-	return data, nil
+	//data, err := Asset(fmt.Sprintf("%s/%s", bucket, name))
+        return nil, fmt.Errorf("could not find %s/%s (embedded blobs disabled)", bucket, name)
 }

 // Handler implements http.Handler.
--- a/web/web.go
+++ b/web/web.go
@@ -46,7 +46,6 @@
 	"github.com/prometheus/prometheus/version"
 	"github.com/prometheus/prometheus/web/api/legacy"
 	"github.com/prometheus/prometheus/web/api/v1"
-	"github.com/prometheus/prometheus/web/blob"
 )

 var localhostRepresentations = []string{"127.0.0.1", "localhost"}
@@ -114,7 +113,7 @@
 	ListenAddress        string
 	ExternalURL          *url.URL
 	MetricsPath          string
-	UseLocalAssets       bool
+	LocalAssets          string
 	UserAssetsPath       string
 	ConsoleTemplatesPath string
 	ConsoleLibrariesPath string
@@ -181,11 +180,7 @@

 	router.Get("/consoles/*filepath", instrf("consoles", h.consoles))

-	if o.UseLocalAssets {
-		router.Get("/static/*filepath", instrf("static", route.FileServe("web/blob/static")))
-	} else {
-		router.Get("/static/*filepath", instrh("static", blob.Handler{}))
-	}
+	router.Get("/static/*filepath", instrf("static", route.FileServe(o.LocalAssets+"/static")))

 	if o.UserAssetsPath != "" {
 		router.Get("/user/*filepath", instrf("user", route.FileServe(o.UserAssetsPath)))
@@ -325,15 +320,7 @@
 }

 func (h *Handler) getTemplateFile(name string) (string, error) {
-	if h.options.UseLocalAssets {
-		file, err := ioutil.ReadFile(fmt.Sprintf("web/blob/templates/%s.html", name))
-		if err != nil {
-			log.Errorf("Could not read %s template: %s", name, err)
-			return "", err
-		}
-		return string(file), nil
-	}
-	file, err := blob.GetFile(blob.TemplateFiles, name+".html")
+	file, err := ioutil.ReadFile(fmt.Sprintf(h.options.LocalAssets+"/templates/%s.html", name))
 	if err != nil {
 		log.Errorf("Could not read %s template: %s", name, err)
 		return "", err
--- a/cmd/prometheus/config.go
+++ b/cmd/prometheus/config.go
@@ -82,9 +83,10 @@
 		&cfg.web.MetricsPath, "web.telemetry-path", "/metrics",
 		"Path under which to expose metrics.",
 	)
-	cfg.fs.BoolVar(
-		&cfg.web.UseLocalAssets, "web.use-local-assets", false,
-		"Read assets/templates from file instead of binary.",
+	cfg.fs.StringVar(
+		&cfg.web.LocalAssets, "web.local-assets",
+                "/usr/share/prometheus/web",
+		"Path to static assets/templates directory.",
 	)
 	cfg.fs.StringVar(
 		&cfg.web.UserAssetsPath, "web.user-assets", "",
