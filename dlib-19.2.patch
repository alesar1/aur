diff -ruN dlib-19.2/dlib/CMakeLists.txt dlib-19.2-patched/dlib/CMakeLists.txt
--- dlib-19.2/dlib/CMakeLists.txt	2016-10-11 07:36:19.000000000 +0800
+++ dlib-19.2-patched/dlib/CMakeLists.txt	2016-10-30 10:36:04.000000000 +0800
@@ -308,6 +308,7 @@
          if (PNG_FOUND AND LIBPNG_IS_GOOD)
             include_directories(${PNG_INCLUDE_DIR})
             set (dlib_needed_libraries ${dlib_needed_libraries} ${PNG_LIBRARY})
+            set (dlib_needed_libraries ${dlib_needed_libraries} ${ZLIB_LIBRARY})
             set(REQUIRES_LIBS " libpng")
          else()
             # If we can't find libpng then statically compile it in.
diff -ruN dlib-19.2/dlib/cmake_utils/cmake_find_blas.txt dlib-19.2-patched/dlib/cmake_utils/cmake_find_blas.txt
--- dlib-19.2/dlib/cmake_utils/cmake_find_blas.txt	2016-10-11 07:36:19.000000000 +0800
+++ dlib-19.2-patched/dlib/cmake_utils/cmake_find_blas.txt	2016-10-30 10:36:04.000000000 +0800
@@ -314,6 +314,116 @@
     endif()
 
 
+elseif(WIN32 AND CMAKE_CROSSCOMPILING)
+
+   message(STATUS "Searching for BLAS and LAPACK")
+
+   # try to find LAPACK libraries while cross compiling
+   set(extra_paths
+        /usr/i686-w64-mingw32/lib
+        /usr/i686-w64-mingw32/lib/atlas-sse3
+        /usr/i686-w64-mingw32/lib/atlas-sse2
+        /usr/i686-w64-mingw32/lib/atlas
+        /usr/i686-w64-mingw32/lib/openblas-base
+        /usr/x86_64-w64-mingw32/lib
+        /usr/x86_64-w64-mingw32/lib/atlas-sse3
+        /usr/x86_64-w64-mingw32/lib/atlas-sse2
+        /usr/x86_64-w64-mingw32/lib/openblas-base
+        /usr/x86_64-w64-mingw32/lib/atlas)
+        )
+
+   INCLUDE (CheckFunctionExists)
+
+   if (NOT blas_found)
+      find_library(cblas_lib openblas PATHS ${extra_paths})
+      if (cblas_lib)
+         set(blas_libraries ${cblas_lib})
+         set(blas_found 1)
+         message(STATUS "Found OpenBLAS library")
+         set(CMAKE_REQUIRED_LIBRARIES ${blas_libraries})
+         # If you compiled OpenBLAS with LAPACK in it then it should have the
+         # sgetrf_single function in it.  So if we find that function in
+         # OpenBLAS then just use OpenBLAS's LAPACK. 
+         CHECK_FUNCTION_EXISTS(sgetrf_single OPENBLAS_HAS_LAPACK)
+         if (OPENBLAS_HAS_LAPACK)
+            message(STATUS "Using OpenBLAS's built in LAPACK")
+            # set(lapack_libraries gfortran) 
+            set(lapack_found 1)
+         endif()
+      endif()
+      mark_as_advanced( cblas_lib)
+   endif()
+
+   if (NOT lapack_found)
+      find_library(lapack_lib NAMES lapack lapack-3 PATHS ${extra_paths})
+      if (lapack_lib)
+         set(lapack_libraries ${lapack_lib})
+         set(lapack_found 1)
+         message(STATUS "Found LAPACK library")
+      endif()
+      mark_as_advanced( lapack_lib)
+   endif()
+
+   # try to find BLAS libraries while cross compiling
+   if (NOT blas_found)
+      find_library(atlas_lib atlas PATHS ${extra_paths})
+      find_library(cblas_lib cblas PATHS ${extra_paths})
+      if (atlas_lib AND cblas_lib)
+         set(blas_libraries ${atlas_lib} ${cblas_lib})
+         set(blas_found 1)
+         message(STATUS "Found ATLAS BLAS library")
+      endif()
+      mark_as_advanced( atlas_lib cblas_lib)
+   endif()
+
+   if (NOT blas_found)
+      find_library(cblas_lib cblas PATHS ${extra_paths})
+      if (cblas_lib)
+         set(blas_libraries ${cblas_lib})
+         set(blas_found 1)
+         message(STATUS "Found CBLAS library")
+      endif()
+      mark_as_advanced( cblas_lib)
+   endif()
+   
+   if (NOT blas_found)
+      find_library(generic_blas blas PATHS ${extra_paths})
+      if (generic_blas)
+         set(blas_libraries ${generic_blas})
+         set(blas_found 1)
+         message(STATUS "Found BLAS library")
+      endif()
+      mark_as_advanced( generic_blas)
+   endif()
+
+   # Make sure we really found a CBLAS library.  That is, it needs to expose
+   # the proper cblas link symbols.  So here we test if one of them is present
+   # and assume everything is good if it is. Note that we don't do this check if
+   # we found the Intel MKL since for some reason CHECK_FUNCTION_EXISTS doesn't work
+   # with it.  But it's fine since the MKL should always have cblas.
+   if (blas_found AND NOT found_intel_mkl)
+      set(CMAKE_REQUIRED_LIBRARIES ${blas_libraries})
+      CHECK_FUNCTION_EXISTS(cblas_ddot HAVE_CBLAS)
+      if (NOT HAVE_CBLAS)
+         message(STATUS "BLAS library does not have cblas symbols, so dlib will not use BLAS or LAPACK")
+         set(blas_found 0)
+         set(lapack_found 0)
+      endif()
+   endif()
+
+   if (NOT blas_found)
+      message(" *****************************************************************************")
+      message(" *** No BLAS library found so using dlib's built in BLAS.  However, if you ***")
+      message(" *** install an optimized BLAS such as OpenBLAS or the Intel MKL your code ***")
+      message(" *** will run faster.  On Ubuntu you can install OpenBLAS by executing:    ***")
+      message(" ***    sudo apt-get install libopenblas-dev liblapack-dev                 ***")
+      message(" *** Or you can easily install OpenBLAS from source by downloading the     ***")
+      message(" *** source tar file from http://www.openblas.net, extracting it, and      ***")
+      message(" *** running:                                                              ***")
+      message(" ***    make; sudo make install                                            ***")
+      message(" *****************************************************************************")
+   endif()
+
 endif()
 
 
