#!/bin/bash

function setconf() {
    # 1: field / 2: value / 3: file
    sed -i "s|^#*\s*\($1\).*|\1 = $2|" $3
}

# care about existing files
function installdir() {
    local owner="$1"
    local moddir="$2"
    local modfile="$3"
    local directory="$4"
    
    mkdir -p "$directory"
    find $directory -exec chown "$owner" {} \;
    find $directory -type f -exec chmod "$modfile" {} \;
    find $directory -type d -exec chmod "$moddir" {} \;
}

function installbasics() {
    # create tempdirs and users from /usr/lib/*.d
    systemctl restart systemd-sysusers
    systemd-tmpfiles --create

    installdir zarafa:zarafa 0700 0600 /var/log/zarafa
    installdir zarafa:zarafa 0700 0600 /var/lib/zarafa
    installdir zarafa:zarafa 0700 0600 /var/lib/zarafa/search
    installdir zarafa:zarafa 0700 0600 /var/lib/zarafa/presence
    
    # due to a bug/exception it's impossible to execute phps mapi modul without browsable dir
    installdir zarafa:zarafa 0755 0600 /etc/zarafa
  
    # fix missing python symlink for presence
    if [[ ! -e "/usr/bin/python" ]];
    then
	ln -s /usr/bin/python2 /usr/bin/python
    fi    
}

post_install() {
    installbasics

    # CONFIG
    # => defaults
    for cfg in /usr/share/doc/zarafa/example-config/*.cfg; do
	install --backup=simple --suffix .pacsave -o zarafa -g zarafa -m 0600  ${cfg} /etc/zarafa
    done
  
    # => server.cfg
    _mysql_password="$(< /dev/urandom tr -dc A-Za-z0-9 | head -c16)"
    setconf "mysql_password" "${_mysql_password}" "/etc/zarafa/server.cfg"

    # => ical.cfg
    if [[ -e "/etc/localtime" ]];
    then
	setconf "server_timezone" "$(readlink -f /etc/localtime | sed  's|/usr/share/zoneinfo/||' | tr '_' ' ')" "/etc/zarafa/ical.cfg"
    fi
  
    # => presence.cfg
    _presence_password="$(< /dev/urandom tr -dc A-Za-z0-9 | head -c16)"
    setconf "server_secret_key" "${_presence_password}" "/etc/zarafa/presence.cfg"

    echo
    echo
    echo "[....] Zarafa-Server installation"

    if [[ -e "/var/lib/mysql" ]] \
     && [[ "$(ls -A /var/lib/mysql)" == "" ]];
    then
	echo "[....] Setup database"
	/usr/share/doc/zarafa/zarafa-pietma/install-optimization.sh		
	mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
	systemctl start mysqld

	/usr/share/doc/zarafa/zarafa-pietma/install-mysql-secure.sh
	mysql -u root -e "CREATE DATABASE IF NOT EXISTS zarafa;"
	mysql -u root -e "GRANT ALL PRIVILEGES ON zarafa.* TO zarafa@localhost IDENTIFIED BY '${_mysql_password}';"
	echo "[DONE] Setup database"
    else
cat <<EOF

Please setup database

1.) Optimize Mysql and Zarafa for installed system

  $ /usr/share/doc/zarafa/zarafa-pietma/install-optimization.sh

2.) Initialize MySQL:

  $ mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql
  $ systemctl start mysqld
  $ mysql_secure_installation  

3.) Create/Install Zarafa database:

  $ mysql -u root -p

  mysql> CREATE DATABASE IF NOT EXISTS zarafa;
  mysql> GRANT ALL PRIVILEGES ON zarafa.* TO zarafa@localhost IDENTIFIED BY '${_mysql_password}';

EOF
    fi

    if [ ! -f "/etc/ssl/private/zarafa.key" ] \
     || [ ! -f "/etc/ssl/private/zarafa.crt" ] \
     || [ ! -f "/etc/ssl/private/zarafa.dh" ];
    then
	echo "[....] Setup SSL keys"    
	/usr/share/doc/zarafa/zarafa-pietma/install-ssl.sh    
	echo "[DONE] Setup SSL keys"
    else
cat <<EOF

Please setup SSL keys 

1.) Create SSL-Keys/ -Certificates
 
  $ /usr/share/doc/zarafa/zarafa-pietma/install-ssl.sh

EOF
    fi
    
cat <<EOF    

Please start Zarafa-Server and create tables

  $ systemctl start zarafa-server

Read More

   https://wiki.archlinux.org/index.php/MySQL
   https://pietma.com/run-and-access-zarafa/
   https://pietma.com/optimize-zarafa-and-mysql-mariadb/
  
EOF    

    return 0
}

post_upgrade() {
    local newPackageVersion="$1"
    local oldPackageVersion="$2"

    case "$oldPackageVersion" in
	7.2.1*)
    	    installbasics

            # CONFIG
	    # => defaults
    	    for cfg in /usr/share/doc/zarafa/example-config/*.cfg; do
		install --backup=simple -o zarafa -g zarafa -m 0600 ${cfg} /etc/zarafa
	    done

	    echo "Please check /etc/zarafa for new configuration values!"
	    ;;
	*)
	    ;;	
    esac
    
    return 0
}

pre_remove() {
    return 0
}
