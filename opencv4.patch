diff --git a/include/camera_draw.h b/include/camera_draw.h
--- a/include/camera_draw.h
+++ b/include/camera_draw.h
@@ -108,9 +108,9 @@ class Camera_draw {
                 pts[i].y = lrint(pt.y);
             }
             for (int i=0; i < 3; i++) {
-                cv::line(rimg, pts[i], pts[(i+1)%3], cv::Scalar(20,20,20), 2, CV_AA);
+                cv::line(rimg, pts[i], pts[(i+1)%3], cv::Scalar(20,20,20), 2, cv::LINE_AA);
             }
-            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, colour, CV_AA);
+            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, colour, cv::LINE_AA);
         } 
        
     }
@@ -131,7 +131,7 @@ class Camera_draw {
             initial_rows = merged.rows;
             // TODO: maybe merge right column if image is too narrow
             merged.resize(merged.rows + pad); 
-            rectangle(merged, Point2d(0, g_img.rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), CV_FILLED);
+            rectangle(merged, Point2d(0, g_img.rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), cv::FILLED);
         }
        
         return merged;
@@ -174,7 +174,7 @@ class Camera_draw {
             bool inside = cv::clipLine(bounds, head, tail);
            
             if (i > 0 && inside) {
-                cv::line(rimg, head, tail, blended_col, width, CV_AA);
+                cv::line(rimg, head, tail, blended_col, width, cv::LINE_AA);
             }
            
             prevx = tail.x;
@@ -189,9 +189,9 @@ class Camera_draw {
         for (int i=0; i < 4; i++) {
             Point2d wp(psf*10*cos(2.0*i*M_PI/4.0), psf*10*sin(2.0*i*M_PI/4.0));
             Point2d pt = distance_scale.world_to_image(wp.x, wp.y);
-            cv::line(rimg, czero, pt, mark_col, 2, CV_AA);
+            cv::line(rimg, czero, pt, mark_col, 2, cv::LINE_AA);
         }
-        cv::circle(rimg, czero, 10, mark_col, 2, CV_AA);
+        cv::circle(rimg, czero, 10, mark_col, 2, cv::LINE_AA);
         
         int j=0;
         for (double th=0; j < 4; th += 2*M_PI/4.0, j++) {
@@ -213,7 +213,7 @@ class Camera_draw {
                 pts[i].y = lrint(pt.y);
             }
             
-            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, mark_col, CV_AA);
+            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, mark_col, cv::LINE_AA);
         }
     }
     
@@ -222,7 +222,7 @@ class Camera_draw {
         cv::Point centre(dc_x, dc_y);
         
         const double rad = 25;
-        cv::circle(rimg, centre, rad, cv::Scalar(20,20,20), 4, CV_AA);
+        cv::circle(rimg, centre, rad, cv::Scalar(20,20,20), 4, cv::LINE_AA);
         int i=0;
         for (double th=M_PI/2; i < 4; th += 2*M_PI/4.0, i++) {
             const double dth = 12.5/180.0*M_PI;
@@ -233,9 +233,9 @@ class Camera_draw {
               { int((double)centre.x + (rad+8)*cos(th-dth)), int((double)centre.y + (rad+8)*sin(th-dth)) }
             };
             
-            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, cv::Scalar(20,20,20), CV_AA);
+            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, cv::Scalar(20,20,20), cv::LINE_AA);
         }
-        cv::circle(rimg, centre, rad, reticle_col, 2, CV_AA);
+        cv::circle(rimg, centre, rad, reticle_col, 2, cv::LINE_AA);
         i=0;
         for (double th=M_PI/2; i < 4; th += 2*M_PI/4.0, i++) {
             const double dth = 10.0/180.0*M_PI;
@@ -246,7 +246,7 @@ class Camera_draw {
               { int((double)centre.x + (rad+7)*cos(th-dth)), int((double)centre.y + (rad+7)*sin(th-dth)) }
             };
             
-            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, reticle_col, CV_AA);
+            cv::fillConvexPoly(rimg, (const cv::Point*)&pts, 3, reticle_col, cv::LINE_AA);
         }
     }
     
@@ -255,9 +255,9 @@ class Camera_draw {
         double rad = min(rimg.rows, rimg.cols)/2.0 - 20;
         cv::Scalar red(30, 30, 255);
         
-        cv::circle(rimg, cent, rad, red, 10, CV_AA);
+        cv::circle(rimg, cent, rad, red, 10, cv::LINE_AA);
         Point2d dir(rad*sqrt(0.5)-2, rad*sqrt(0.5)-2);
-        cv::line(rimg, cent - dir, cent + dir, red, 10, CV_AA);
+        cv::line(rimg, cent - dir, cent + dir, red, 10, cv::LINE_AA);
     }
     
     void fail_with_message(const string& path, const string& s) {
@@ -266,7 +266,7 @@ class Camera_draw {
         char tbuffer[1024];
         int font = cv::FONT_HERSHEY_DUPLEX; 
         sprintf(tbuffer, "%s", s.c_str());
-        cv::putText(rimg, tbuffer, Point2d(50, initial_rows + (rimg.rows-initial_rows)/2), font, 1, cv::Scalar::all(0), 1, CV_AA);
+        cv::putText(rimg, tbuffer, Point2d(50, initial_rows + (rimg.rows-initial_rows)/2), font, 1, cv::Scalar::all(0), 1, cv::LINE_AA);
         
         imwrite(path, rimg);
     }
@@ -285,7 +285,7 @@ class Camera_draw {
         tri[3].x = tri[2].x + 1*cos((180+45.0)/180.0*M_PI);
         tri[3].y = tri[2].y + 1*sin((180+45.0)/180.0*M_PI);
         
-        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, CV_AA);
+        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, cv::LINE_AA);
         
         
         tri[0].x = start.x;
@@ -297,7 +297,7 @@ class Camera_draw {
         tri[3].x = tri[2].x + 5*cos((180-45.0)/180.0*M_PI);
         tri[3].y = tri[2].y + 5*sin((180-45.0)/180.0*M_PI);
         
-        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, CV_AA);
+        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, cv::LINE_AA);
         
     }
     
@@ -316,7 +316,7 @@ class Camera_draw {
         tri[3].x = tri[2].x + 5*dir.y;
         tri[3].y = tri[2].y - 5*dir.x;
         
-        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, CV_AA);
+        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, cv::LINE_AA);
         
         dir = Point2d(cos(M_PI/4+M_PI/2), sin(M_PI/4+M_PI/2));
         tri[0].x = cent.x - 10*dir.x + 2.5*dir.y;
@@ -328,7 +328,7 @@ class Camera_draw {
         tri[3].x = tri[2].x + 5*dir.y;
         tri[3].y = tri[2].y - 5*dir.x;
         
-        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, CV_AA);
+        cv::fillConvexPoly(rimg, (const cv::Point*)&tri, 4, colour, cv::LINE_AA);
     }
     
     void alpha_block(const Point2d& p, const cv::Size& s, const cv::Scalar& col, double alpha) {
@@ -349,9 +349,9 @@ class Camera_draw {
         
         sprintf(tbuffer, t...);
         Point2d textpos = distance_scale.world_to_image(x, y, z);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, CV_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, cv::LINE_AA);
     }
     
     template <class... T> 
@@ -361,7 +361,7 @@ class Camera_draw {
         char tbuffer[4096];
         
         sprintf(tbuffer, t...);
-        cv::putText(rimg, tbuffer, pos, font, 1, colour, 1, CV_AA);
+        cv::putText(rimg, tbuffer, pos, font, 1, colour, 1, cv::LINE_AA);
     }
     
     template <class... T> 
@@ -376,9 +376,9 @@ class Camera_draw {
         Point2d textpos = distance_scale.world_to_image(x, y, z);
         ts = cv::getTextSize(tbuffer, font, 1, 3, &baseline);
         alpha_block(textpos, ts, CV_RGB(255, 255, 255), 0.5);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, CV_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, cv::LINE_AA);
     }
     
     template <class... T> 
@@ -394,9 +394,9 @@ class Camera_draw {
         ts = cv::getTextSize(tbuffer, font, 1, 3, &baseline);
         textpos.x -= ts.width;
         alpha_block(textpos, ts, CV_RGB(255, 255, 255), 0.5);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, CV_AA);
-        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, CV_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(50, 50, 50), 3, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, cv::LINE_AA);
+        cv::putText(rimg, tbuffer, textpos, font, 1, colour, 1, cv::LINE_AA);
     }
     
     const cv::Mat img;
diff --git a/include/mtf_core.h b/include/mtf_core.h
index 94a5887..8e18d88 100644
--- a/include/mtf_core.h
+++ b/include/mtf_core.h
@@ -107,7 +107,7 @@ class Mtf_core {
         
         cv::Mat temp;
         in_img.convertTo(temp, CV_8U, 256.0/16384.0);
-        cv::cvtColor(temp, od_img, CV_GRAY2RGB);
+        cv::cvtColor(temp, od_img, cv::COLOR_GRAY2RGB);
     }
     
     ~Mtf_core(void) {
diff --git a/include/mtf_renderer_blocks.h b/include/mtf_renderer_blocks.h
index 92e6bda..cd413ec 100644
--- a/include/mtf_renderer_blocks.h
+++ b/include/mtf_renderer_blocks.h
@@ -47,7 +47,7 @@ class Mtf_renderer_blocks : public Mtf_renderer {
             for (size_t k=0; k < 4; k++) { 
                 pts[k] = cv::Point(rect.corners[k].x, rect.corners[k].y);
             }
-            cv::polylines(out_img, (const cv::Point**)&pts, &npts, 1, true, CV_RGB(65535, 65535, 65535 ), 1, CV_AA);
+            cv::polylines(out_img, (const cv::Point**)&pts, &npts, 1, true, CV_RGB(65535, 65535, 65535 ), 1, cv::LINE_AA);
         }    
         delete [] pts;
         
diff --git a/include/mtf_renderer_mfprofile.h b/include/mtf_renderer_mfprofile.h
index 64131c7..5dab878 100644
--- a/include/mtf_renderer_mfprofile.h
+++ b/include/mtf_renderer_mfprofile.h
@@ -132,11 +132,11 @@ class Mtf_renderer_mfprofile : public Mtf_renderer {
             to.y += points[i].p.y;
             cv::putText(merged, buffer, to, 
                 cv::FONT_HERSHEY_SIMPLEX, 0.5, 
-                CV_RGB(20, 20, 20), 2.5, CV_AA
+                CV_RGB(20, 20, 20), 2.5, cv::LINE_AA
             );
             cv::putText(merged, buffer, to, 
                 cv::FONT_HERSHEY_SIMPLEX, 0.5, 
-                CV_RGB(50, 255, 255), 1, CV_AA
+                CV_RGB(50, 255, 255), 1, cv::LINE_AA
             );
         }
         */
@@ -146,12 +146,12 @@ class Mtf_renderer_mfprofile : public Mtf_renderer {
         draw_curve(merged, pf.ridge_p05, cv::Scalar(100, 100, 200), 1);
         draw_curve(merged, pf.ridge_p95, cv::Scalar(100, 100, 200), 1);
         
-        rectangle(merged, Point2d(0, initial_rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), CV_FILLED);
+        rectangle(merged, Point2d(0, initial_rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), cv::FILLED);
         
         int font = cv::FONT_HERSHEY_DUPLEX; 
         char tbuffer[1024];
         sprintf(tbuffer, "Focus peak at depth %.1lf mm [%.1lf,%.1lf] relative to chart origin", pf.focus_peak, pf.focus_peak_p05, pf.focus_peak_p95);
-        cv::putText(merged, tbuffer, Point2d(50, initial_rows + (merged.rows-initial_rows)/2), font, 1, cv::Scalar::all(0), 1, CV_AA);
+        cv::putText(merged, tbuffer, Point2d(50, initial_rows + (merged.rows-initial_rows)/2), font, 1, cv::Scalar::all(0), 1, cv::LINE_AA);
         
         
         imwrite(wdir + prname, merged);
@@ -173,9 +173,9 @@ class Mtf_renderer_mfprofile : public Mtf_renderer {
                 iy >= 0 && iy < image.rows && i > 0) {
                 
                 if (points) {
-                    cv::line(image, Point2d(ix, iy), Point2d(ix, iy), col, width, CV_AA);
+                    cv::line(image, Point2d(ix, iy), Point2d(ix, iy), col, width, cv::LINE_AA);
                 } else {
-                    cv::line(image, Point2d(prevx, prevy), Point2d(ix, iy), col, width, CV_AA);
+                    cv::line(image, Point2d(prevx, prevy), Point2d(ix, iy), col, width, cv::LINE_AA);
                 }
             }
             
diff --git a/src/mtf_core.cc b/src/mtf_core.cc
index 2dde480..f5c965b 100644
--- a/src/mtf_core.cc
+++ b/src/mtf_core.cc
@@ -115,11 +115,11 @@ void Mtf_core::search_borders(const Point2d& cent, int label) {
                 
                 cv::putText(od_img, buffer, to, 
                     cv::FONT_HERSHEY_SIMPLEX, 0.5, 
-                    CV_RGB(20, 20, 20), 2.5, CV_AA
+                    CV_RGB(20, 20, 20), 2.5, cv::LINE_AA
                 );
                 cv::putText(od_img, buffer, to, 
                     cv::FONT_HERSHEY_SIMPLEX, 0.5, 
-                    CV_RGB(0, 255, 255), 1, CV_AA
+                    CV_RGB(0, 255, 255), 1, cv::LINE_AA
                 );
             }
         } 
diff --git a/src/mtf_renderer_annotate.cc b/src/mtf_renderer_annotate.cc
index 14437fb..dead296 100644
--- a/src/mtf_renderer_annotate.cc
+++ b/src/mtf_renderer_annotate.cc
@@ -193,7 +193,7 @@ void Mtf_renderer_annotate::write_number(cv::Mat& img, int px, int py, double va
     
     cv::putText(img, buffer, to, 
         cv::FONT_HERSHEY_SIMPLEX, font_scale, 
-        CV_RGB(20, 20, 20), 2*font_thickness_scale + 0.5, CV_AA
+        CV_RGB(20, 20, 20), 2*font_thickness_scale + 0.5, cv::LINE_AA
     );
     
     cv::Scalar col = CV_RGB(0, 255, 255);
@@ -206,7 +206,7 @@ void Mtf_renderer_annotate::write_number(cv::Mat& img, int px, int py, double va
     
     cv::putText(img, buffer, to, 
         cv::FONT_HERSHEY_SIMPLEX, font_scale, 
-        col, font_thickness_scale > 1 ? font_thickness_scale + 0.5 : font_thickness_scale, CV_AA
+        col, font_thickness_scale > 1 ? font_thickness_scale + 0.5 : font_thickness_scale, cv::LINE_AA
     );
     
-}
\ No newline at end of file
+}
diff --git a/src/mtf_renderer_focus.cc b/src/mtf_renderer_focus.cc
index f2eb88e..7a3ffa4 100644
--- a/src/mtf_renderer_focus.cc
+++ b/src/mtf_renderer_focus.cc
@@ -88,7 +88,7 @@ void Mtf_renderer_focus::render(const vector<Mtf_profile_sample>& samples, Bayer
         const std::pair<Point2d, Point2d>& ec = sliding[k];
         const std::pair<Point2d, Point2d>& en = sliding[k+1];
         Point2d cent = 0.5*(en.first + ec.first + ec.second);
-        //cv::line(merged, cent - transverse, cent + transverse, edge_col, 2, CV_AA);
+        //cv::line(merged, cent - transverse, cent + transverse, edge_col, 2, cv::LINE_AA);
         img_cents.push_back(cent);
     }
     double min_ic_dist = 1e50;
@@ -118,8 +118,8 @@ void Mtf_renderer_focus::render(const vector<Mtf_profile_sample>& samples, Bayer
             const double cross_w = 0.5*min_ic_dist - std::max(0.1*min_ic_dist, 2.0);
             const double cross_l = min_ic_dist;
             if (min_dist > 1.01*min_ic_dist) {
-                cv::line(merged, cent - cross_l*transverse - cross_w*longitudinal, cent + cross_l*transverse + cross_w*longitudinal, edge_col, 2, CV_AA);
-                cv::line(merged, cent - cross_l*transverse + cross_w*longitudinal, cent + cross_l*transverse - cross_w*longitudinal, edge_col, 2, CV_AA);
+                cv::line(merged, cent - cross_l*transverse - cross_w*longitudinal, cent + cross_l*transverse + cross_w*longitudinal, edge_col, 2, cv::LINE_AA);
+                cv::line(merged, cent - cross_l*transverse + cross_w*longitudinal, cent + cross_l*transverse - cross_w*longitudinal, edge_col, 2, cv::LINE_AA);
             }
         }
     } else {
@@ -276,10 +276,10 @@ void Mtf_renderer_focus::render(const vector<Mtf_profile_sample>& samples, Bayer
                 
                 Point2d current(rot_x, rot_y);
                 if (theta > 0) {
-                    cv::line(merged, prev, current, ellipse_col, 1, CV_AA);
+                    cv::line(merged, prev, current, ellipse_col, 1, cv::LINE_AA);
                     
                     if (fid_idx >= 0) {
-                        cv::line(merged, prev + fid_offset, current + fid_offset, vec_col, 1, CV_AA);
+                        cv::line(merged, prev + fid_offset, current + fid_offset, vec_col, 1, cv::LINE_AA);
                     }
                 }
                 
@@ -294,7 +294,7 @@ void Mtf_renderer_focus::render(const vector<Mtf_profile_sample>& samples, Bayer
             Point2d backproj_pt = distance_scale.world_to_image(p3d.x, p3d.y, p3d.z);
             
             if (cv::norm(p2d - backproj_pt) >= error_tolerance) { 
-                cv::line(merged, p2d, backproj_pt, vec_col, 1, CV_AA);
+                cv::line(merged, p2d, backproj_pt, vec_col, 1, cv::LINE_AA);
             }
         }
     }
@@ -382,19 +382,19 @@ void Mtf_renderer_focus::render(const vector<Mtf_profile_sample>& samples, Bayer
     cv::Size tsize = cv::getTextSize(tbuffer, font, 1.0, 2.5, &tbaseline);
     Point2d textpos = distance_scale.world_to_image(peak_wx, -20*psf);
     textpos -= Point2d(tsize.width/2.0, 0);
-    cv::putText(merged, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, CV_AA);
-    cv::putText(merged, tbuffer, textpos, font, 1, resultcolour, 1, CV_AA);
+    cv::putText(merged, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, cv::LINE_AA);
+    cv::putText(merged, tbuffer, textpos, font, 1, resultcolour, 1, cv::LINE_AA);
     double prev_line_height = tsize.height;
     
     sprintf(tbuffer, "%.1lf mm", focus_peak);
     tsize = cv::getTextSize(tbuffer, font, 1.0, 2.5, &tbaseline);
     textpos = distance_scale.world_to_image(peak_wx, -20*psf);
     textpos -= Point2d(tsize.width/2.0, -prev_line_height*1.5);
-    cv::putText(merged, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, CV_AA);
-    cv::putText(merged, tbuffer, textpos, font, 1, resultcolour, 1, CV_AA);
+    cv::putText(merged, tbuffer, textpos, font, 1, CV_RGB(20, 20, 20), 2.5, cv::LINE_AA);
+    cv::putText(merged, tbuffer, textpos, font, 1, resultcolour, 1, cv::LINE_AA);
     
     // blank out the text region (again)
-    rectangle(merged, Point2d(0, img.rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), CV_FILLED);
+    rectangle(merged, Point2d(0, img.rows), Point2d(merged.cols, merged.rows), cv::Scalar::all(255), cv::FILLED);
     
     cv::Scalar red(30, 30, 200);
     cv::Scalar yellow(40, 187, 255);
