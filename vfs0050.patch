diff -uraN libfprint-0.6.0/configure.ac libfprint-0.6.0-my/configure.ac
--- libfprint-0.6.0/configure.ac	2015-02-03 19:36:16.000000000 +0400
+++ libfprint-0.6.0-my/configure.ac	2015-07-10 03:37:47.031131526 +0400
@@ -23,7 +23,7 @@
 AC_SUBST(lt_revision)
 AC_SUBST(lt_age)
 
-all_drivers="upekts upektc upeksonly vcom5s uru4000 fdu2000 aes1610 aes1660 aes2501 aes2550 aes2660 aes3500 aes4000 vfs101 vfs301 vfs5011 upektc_img etes603"
+all_drivers="upekts upektc upeksonly vcom5s uru4000 fdu2000 aes1610 aes1660 aes2501 aes2550 aes2660 aes3500 aes4000 vfs101 vfs301 vfs5011 upektc_img etes603 vfs0050"
 
 require_imaging='no'
 require_aeslib='no'
@@ -48,6 +48,7 @@
 enable_vfs5011='no'
 enable_upektc_img='no'
 enable_etes603='no'
+enable_vfs0050='no'
 
 AC_ARG_WITH([drivers],[AS_HELP_STRING([--with-drivers],
 	[List of drivers to enable])],
@@ -150,6 +151,10 @@
 			AC_DEFINE([ENABLE_ETES603], [], [Build EgisTec ES603 driver])
 			enable_etes603="yes"
 		;;
+		vfs0050)
+			AC_DEFINE([ENABLE_VFS0050], [], [Build Validity VFS0050 driver])
+			enable_vfs0050="yes"
+		;;
 	esac
 done
 
@@ -175,6 +180,7 @@
 AM_CONDITIONAL([ENABLE_VFS5011], [test "$enable_vfs5011" = "yes"])
 AM_CONDITIONAL([ENABLE_UPEKTC_IMG], [test "$enable_upektc_img" = "yes"])
 AM_CONDITIONAL([ENABLE_ETES603], [test "$enable_etes603" = "yes"])
+AM_CONDITIONAL([ENABLE_VFS0050], [test "$enable_vfs0050" = "yes"])
 
 
 PKG_CHECK_MODULES(LIBUSB, [libusb-1.0 >= 0.9.1])
@@ -396,6 +402,11 @@
 else
 	AC_MSG_NOTICE([   etes603 driver disabled])
 fi
+if test x$enable_vfs0050 != xno ; then
+	AC_MSG_NOTICE([** vfs0050 driver enabled])
+else
+	AC_MSG_NOTICE([   vfs0050 driver disabled])
+fi
 if test x$require_aeslib != xno ; then
 	AC_MSG_NOTICE([** aeslib helper functions enabled])
 else
diff -uraN libfprint-0.6.0/libfprint/core.c libfprint-0.6.0-my/libfprint/core.c
--- libfprint-0.6.0/libfprint/core.c	2015-02-03 19:26:43.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/core.c	2015-07-10 03:41:44.719782519 +0400
@@ -398,6 +398,9 @@
 #ifdef ENABLE_ETES603
 	&etes603_driver,
 #endif
+#ifdef ENABLE_VFS0050
+	&vfs0050_driver,
+#endif
 /*#ifdef ENABLE_FDU2000
 	&fdu2000_driver,
 #endif
diff -uraN libfprint-0.6.0/libfprint/drivers/driver_ids.h libfprint-0.6.0-my/libfprint/drivers/driver_ids.h
--- libfprint-0.6.0/libfprint/drivers/driver_ids.h	2015-02-03 19:26:43.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/drivers/driver_ids.h	2015-04-16 02:36:30.782967135 +0400
@@ -40,6 +40,7 @@
 	UPEKTC_IMG_ID	= 17,
 	ETES603_ID	= 18,
 	VFS5011_ID	= 19,
+    VFS0050_ID  = 20,
 };
 
 #endif
diff -uraN libfprint-0.6.0/libfprint/drivers/vfs0050.c libfprint-0.6.0-my/libfprint/drivers/vfs0050.c
--- libfprint-0.6.0/libfprint/drivers/vfs0050.c	1970-01-01 04:00:00.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/drivers/vfs0050.c	2015-07-08 23:26:52.930420627 +0400
@@ -0,0 +1,101 @@
+#define FP_COMPONENT "vfs0050"
+
+#include <fp_internal.h>
+#include "driver_ids.h"
+
+#include <memory.h>
+
+#include "vfs0050.h"
+
+/* Activate device */
+static int dev_activate(struct fp_img_dev *dev, enum fp_imgdev_state state)
+{
+    struct vfs_dev_t *vdev = dev->priv;
+    vdev->active = 1;
+    struct fpi_ssm *ssm = fpi_ssm_new(dev->dev, vfs_activate_ssm, ACTIVATE_STATES);
+    ssm->priv = dev;
+    fpi_ssm_start(ssm, fpi_ssm_free);
+    return 0;
+}
+
+/* Deactivate device */
+static void dev_deactivate(struct fp_img_dev *dev)
+{
+    struct vfs_dev_t *vdev = dev->priv;
+    vdev->active = 0;
+    libusb_reset_device(dev->udev);
+    fpi_imgdev_deactivate_complete(dev);
+}
+
+/* Open device */
+static int dev_open(struct fp_img_dev *dev, unsigned long driver_data)
+{
+    /* Claim usb interface */
+    int r = libusb_claim_interface(dev->udev, 0);
+    if (r < 0) {
+        /* Interface not claimed, return error */
+        fp_err("could not claim interface 0");
+        return r;
+    }
+
+    /* Initialize private structure */
+    struct vfs_dev_t *vdev = g_malloc0(sizeof(struct vfs_dev_t));
+    dev->priv = vdev;
+
+    /* Do several initial transfers */
+    libusb_reset_device(dev->udev);
+    vfs_open(dev->udev);
+
+    /* Notify open complete */
+    fpi_imgdev_open_complete(dev, 0);
+    return 0;
+}
+
+/* Close device */
+static void dev_close(struct fp_img_dev *dev)
+{
+    /* Do several termination transfers */
+    vfs_close(dev->udev);
+
+    /* Release private structure */
+    g_free(dev->priv);
+
+    /* Release usb interface */
+    libusb_release_interface(dev->udev, 0);
+
+    /* Notify close complete */
+    fpi_imgdev_close_complete(dev);
+}
+
+/* Usb id table of device */
+static const struct usb_id id_table[] =
+{
+    { .vendor = 0x138a, .product = 0x0050 },
+    { 0, 0, 0, },
+};
+
+/* Device driver definition */
+struct fp_img_driver vfs0050_driver =
+{
+    /* Driver specification */
+    .driver =
+    {
+        .id = VFS0050_ID,
+        .name = FP_COMPONENT,
+        .full_name = "Validity VFS0050",
+        .id_table = id_table,
+        .scan_type = FP_SCAN_TYPE_SWIPE,
+    },
+    
+    /* Image specification */
+    .flags = 0,
+    .img_width = VFS_RESULT_IMAGE_WIDTH,
+    .img_height = -1,
+    .bz3_threshold = 24,
+
+    /* Routine specification */
+    .open = dev_open,
+    .close = dev_close,
+    .activate = dev_activate,
+    .deactivate = dev_deactivate,
+};
diff -uraN libfprint-0.6.0/libfprint/drivers/vfs0050.h libfprint-0.6.0-my/libfprint/drivers/vfs0050.h
--- libfprint-0.6.0/libfprint/drivers/vfs0050.h	1970-01-01 04:00:00.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/drivers/vfs0050.h	2015-07-10 02:37:27.448556303 +0400
@@ -0,0 +1,607 @@
+#include "vfs0050_proto.h"
+
+#define VFS_USB_TIMEOUT 100
+#define VFS_USB_ABORT_TIMEOUT 20
+#define VFS_SSM_TIMEOUT 100
+#define VFS_SSM_ORANGE_TIMEOUT 700
+
+#define VFS_USB_BUFFER_SIZE 65536
+
+/* Do not touch this parameters! */
+#define VFS_IMAGE_WIDTH 148
+#define VFS_RESULT_IMAGE_WIDTH 100
+
+/* The main driver structure */
+struct vfs_dev_t
+{
+    /* One if we were asked to read fingerprint, zero otherwise */
+    char active;
+
+    /* Internal device status, used in interrupt waiting loop and fingerprint receiving loop */
+    int status;
+
+    /* Received fingerprint data */
+    unsigned char *data;
+
+    /* Current number of received bytes and current memory used by data */
+    int bytes, memory;
+
+    /* Received interrupt data */
+    unsigned char interrupt[8];
+};
+
+/* Fingerprint horizontal line */
+struct vfs_line
+{
+    /* It must be always 0x01 */
+    unsigned char _0x01;
+    /* It must be always 0xfe */
+    unsigned char _0xfe;
+
+    /* line number starting from some number in Little-Endian */
+    unsigned short id;
+
+
+    /* Some hashes which are useful to detect noise */
+    unsigned char noise_hash_1;
+    unsigned char noise_hash_2;
+
+    /* The first byte of _somedata is always 0x00, the second is strange useless cyclic line number */
+    unsigned short _somedata;
+
+    /* Fingerprint image */
+    unsigned char data[100];
+
+    /* Magnified fingerprint image from the center, currently it's skipped */
+    unsigned char extra[32];
+
+    /* scan_data is 0xfb except some rare cases, it seems that it's timeline but currently it's skipped too */
+    unsigned char scan_data[8];
+} __attribute__((__packed__));
+
+/* Send data to EP1, the only out endpoint */
+static void usb_write(struct libusb_device_handle *dev, unsigned char *data, int len)
+{
+    int transferred, error;
+    if ((error = libusb_bulk_transfer(dev, 0x01, data, len, &transferred, VFS_USB_TIMEOUT)) != 0)
+        fp_err("USB write transfer: %s", libusb_error_name(error));
+    if (transferred != len)
+        fp_err("Written only %d of %d bytes", transferred, len);
+}
+
+/* Receive data from the given ep and compare with expected */
+static void usb_read_expected(struct libusb_device_handle *dev, int ep, unsigned char expected[], int len)
+{
+    ep += 0x80;
+    unsigned char *received = g_malloc(len + 2);
+    int transferred, error;
+
+    /* 0x83 is the only interrupt endpoint */
+    if (ep == 0x83)
+        error = libusb_interrupt_transfer(dev, ep, received, len, &transferred, VFS_USB_TIMEOUT);
+    else
+        error = libusb_bulk_transfer(dev, ep, received, len, &transferred, VFS_USB_TIMEOUT);
+
+    if (error != 0)
+        fp_err("USB read transfer on endpoint %d: %s", ep - 0x80, libusb_error_name(error));
+    else if (transferred != len)
+        fp_err("Received %d instead of %d bytes", transferred, len);
+    else
+    {
+        /* There are transfers with some mismatched bytes */
+        int mismatched = 0;
+        for (int i = 0; i < len; ++i)
+            mismatched += (received[i] != expected[i]);
+        if (mismatched > 0)
+            fp_warn("%d of %d bytes mismatched", mismatched, len);
+    }
+    g_free(received);
+}
+
+/* Actually check if endpoint is empty and drain all data if not */
+static void usb_abort_pipe(struct libusb_device_handle *dev, int ep)
+{
+    ep += 0x80;
+    char trash[VFS_USB_BUFFER_SIZE];
+
+    while (1)
+    {
+        int transferred;
+        int error = libusb_bulk_transfer(dev, ep, trash, VFS_USB_BUFFER_SIZE, &transferred, VFS_USB_ABORT_TIMEOUT);
+
+        /* In normal case endpoint is empty */
+        if (error == LIBUSB_ERROR_TIMEOUT)
+            break;
+        if (error != 0)
+            fp_err("USB write transfer: %s", libusb_error_name(error));
+        else if (transferred > 0)
+            fp_err("Something went wrong! Endpoint %d had extra %d bytes!", ep - 0x80, transferred);
+    }
+}
+
+/* Receive data from the given ep and skip it */
+static void usb_read(struct libusb_device_handle *dev, int ep, int len)
+{
+    ep += 0x80;
+    unsigned char *received = g_malloc(len + 2);
+    int transferred, error;
+
+    /* 0x83 is the only interrupt endpoint */
+    if (ep == 0x83)
+        error = libusb_interrupt_transfer(dev, ep, received, len, &transferred, VFS_USB_TIMEOUT);
+    else
+        error = libusb_bulk_transfer(dev, ep, received, len, &transferred, VFS_USB_TIMEOUT);
+
+    if (error != 0)
+        fp_err("USB read transfer on endpoint %d: %s", ep - 0x80, libusb_error_name(error));
+    else if (transferred != len)
+        fp_err("Received %d instead of %d bytes", transferred, len);
+
+    g_free(received);
+}
+
+/* Send single byte to EP1 */
+static void usb_command(struct libusb_device_handle *dev, int cmd)
+{
+    usb_write(dev, (char *) &cmd, 1);
+}
+
+#define USB_READ(ep,data) usb_read_expected(dev, ep, data, sizeof(data))
+#define USB_WRITE(data) usb_write(dev, data, sizeof(data))
+#define USB_ABORT(ep) usb_abort_pipe(dev, ep)
+#define USB_COMMAND(cmd) usb_command(dev, cmd)
+
+/* Part of protocol to initialize interrupt on EP3 */
+static void query_interrupt(struct libusb_device_handle *dev)
+{
+    USB_WRITE(interrupt_query_out);
+    USB_READ(1, interrupt_query_in);
+    USB_READ(3, empty_interrupt);
+}
+
+/* Turn off the device */
+static void vfs_close(struct libusb_device_handle *dev)
+{
+    for (int ep = 1; ep <= 3; ++ep)
+        USB_ABORT(ep);
+
+    USB_COMMAND(0x04);
+    USB_READ(1, two_zeros);
+    USB_ABORT(2);
+
+    USB_WRITE(turn_off);
+    USB_READ(1, two_zeros);
+
+    query_interrupt(dev);
+    USB_ABORT(3);
+
+    USB_COMMAND(0x04);
+    USB_READ(1, two_zeros);
+    USB_ABORT(2);
+}
+
+/* Turn on the device */
+static void vfs_open(struct libusb_device_handle *dev)
+{
+    for (int ep = 1; ep <= 3; ++ep)
+        USB_ABORT(ep);
+
+    USB_COMMAND(0x01);
+    USB_READ(1, open1);
+
+    USB_COMMAND(0x19);
+    USB_READ(1, open2);
+    USB_READ(1, open3);
+
+    USB_WRITE(open4);
+    USB_READ(1, two_zeros);
+    USB_READ(2, open5);
+    USB_ABORT(2);
+
+    USB_WRITE(open6);
+    USB_READ(1, two_zeros);
+    USB_READ(2, open5);
+    USB_ABORT(2);
+
+    USB_WRITE(open7);
+    USB_READ(1, two_zeros);
+    USB_COMMAND(0x01);
+    USB_READ(1, open8);
+
+    USB_WRITE(open9);
+    USB_READ(1, two_zeros);
+    USB_READ(2, open10);
+    USB_READ(2, open11);
+    USB_ABORT(2);
+
+    USB_WRITE(open12);
+    USB_READ(1, two_zeros);
+    usb_read(dev, 2, 33216);
+    USB_READ(2, open13);
+    USB_ABORT(2);
+
+    USB_WRITE(open14);
+    USB_READ(1, two_zeros);
+    usb_read(dev, 2, 44096);
+    USB_READ(2, open5);
+    USB_ABORT(2);
+
+    USB_WRITE(open15);
+    USB_READ(1, open16);
+    usb_read(dev, 2, 14784);
+    USB_READ(2, open17);
+    USB_ABORT(2);
+
+    query_interrupt(dev);
+}
+
+/* SSM states for vfs_activate_ssm */
+enum activate_state
+{
+    INITIAL_STATE,
+    WAIT_INTERRUPT_STATE,
+    RECEIVE_STATE,
+    POST_RECEIVE_STATE,
+    ACTIVATE_STATES
+};
+
+/* Internal state description for vfs_dev_t::status */
+enum vdev_status
+{
+    LOOP,
+    NEXT,
+    EXIT,
+    AGAIN
+};
+
+/* After receiving interrupt from EP3 */
+static void interrupt_callback(struct libusb_transfer *transfer)
+{
+    struct fpi_ssm *ssm = transfer->user_data;
+    struct fp_img_dev *idev = ssm->priv;
+    struct vfs_dev_t *vdev = idev->priv;
+
+    char *interrupt = vdev->interrupt;
+    int error = transfer->status;
+    int transferred = transfer->actual_length;
+
+    if (error != 0)
+        fp_err("USB read interrupt transfer: %s", libusb_error_name(error));
+
+    /* This should never happen with zero timeout */
+    if (transferred == 0)
+    {
+        libusb_free_transfer(transfer);
+        /* Abort ssm */
+        vdev->status = EXIT;
+        return;
+    }
+
+    /* Interrupt size is 5 bytes in all known cases */
+    if (transferred != 5)
+    {
+        fp_err("Unknown interrupt size %d", transferred);
+        libusb_free_transfer(transfer);
+        /* Abort ssm */
+        vdev->status = EXIT;
+        return;
+    }
+
+    /* Zero interrupt */
+    if (memcmp(interrupt, empty_interrupt, sizeof(empty_interrupt)) == 0)
+    {
+        libusb_free_transfer(transfer);
+        return;
+    }
+
+    /* TODO: handle this non-standard interrupt */
+    if (memcmp(interrupt, bad_fprint_interrupt_1, sizeof(empty_interrupt)) == 0)
+    {
+        fp_warn("NON-STANDART INTERRUPT 1!");
+        /* Go to the next ssm stage */
+        vdev->status = NEXT;
+        libusb_free_transfer(transfer);
+        return;
+    }
+
+    /* TODO: handle this non-standard interrupt */
+    if (memcmp(interrupt, bad_fprint_interrupt_2, sizeof(empty_interrupt)) == 0)
+    {
+        fp_warn("NON-STANDART INTERRUPT 2!");
+        /* Go to the next ssm stage */
+        vdev->status = NEXT;
+        libusb_free_transfer(transfer);
+        return;
+    }
+
+    /* Standard interrupt */
+    if (memcmp(interrupt, valid_interrupt, sizeof(valid_interrupt)) == 0)
+    {
+        /* Go to the next ssm stage */
+        vdev->status = NEXT;
+        libusb_free_transfer(transfer);
+        return;
+    }
+
+    /* TODO: handle all interrupts */
+    fp_err("UNKNOWN INTERRUPT '%02x:%02x:%02x:%02x:%02x'!", 
+        interrupt[0] & 0xff, interrupt[1] & 0xff, interrupt[2] & 0xff, interrupt[3] & 0xff, interrupt[4] & 0xff);
+    /* Go to the last ssm stage */
+    vdev->status = AGAIN;
+    libusb_free_transfer(transfer);
+}
+
+/* Stub to keep ssm alive when waiting an interrupt */
+static void reborn(void *data)
+{
+    struct fpi_ssm *ssm = data;
+    fpi_ssm_jump_to_state(ssm, ssm->cur_state);
+}
+
+/* Debug functions
+#include <stdio.h>
+
+#define DEBUG_PATH "/tmp/"
+
+/* Prints image in .pgm format */
+static void print_image(unsigned char *data, int height)
+{
+    FILE *f = fopen(DEBUG_PATH "/image.pgm", "w");
+    int width = VFS_RESULT_IMAGE_WIDTH;
+
+    fprintf(f, "P2\n%d %d\n255\n", width, height);
+    for (int i = 0; i < height; ++i)
+    {
+        for (int j = 0; j < width; ++j)
+            fprintf(f, "%d\t", 0xff & data[i * width + j]);
+        fprintf(f, "\n");
+    }
+
+    fclose(f);
+}
+
+/* Prints just scanned data in .pgm format */
+static void print_raw_image(struct vfs_dev_t *vdev)
+{
+    unsigned char *data = vdev->data;
+    FILE *f = fopen(DEBUG_PATH "/raw.pgm", "w");
+    int width = VFS_IMAGE_WIDTH;
+    int height = vdev->bytes / width;
+
+    fprintf(f, "P2\n%d %d\n255\n", width, height);
+    for (int i = 0; i < height; ++i)
+    {
+        for (int j = 0; j < width; ++j)
+            fprintf(f, "%d\t", 0xff & data[i * width + j]);
+        fprintf(f, "\n");
+    }
+
+    fclose(f);
+}
+*/
+
+#define VFS_NOISE_THRESHOLD 50
+
+/* Processes image before submitting. This function needs to be improved */
+static unsigned char *prepare_image(struct vfs_dev_t *vdev, int *result_height)
+{
+    struct vfs_line *data = (struct vfs_line *) vdev->data;
+    int height = vdev->bytes / VFS_IMAGE_WIDTH;
+    int width = VFS_RESULT_IMAGE_WIDTH;
+
+    /* TODO: put magnified data from center on the fingerprint */
+
+    /* Noise cleaning. IMHO, it works pretty well
+       I've not detected cases when it wasn't work or cut part of finger
+       Noise arises at the end of scan when some water remains on the scanner */
+    while (height > 0)
+    {
+        int val1 = data[height - 1].noise_hash_1;
+        int val2 = data[height - 1].noise_hash_2;
+        if (val1 > VFS_NOISE_THRESHOLD && val1 < 256 - VFS_NOISE_THRESHOLD &&
+            val2 > VFS_NOISE_THRESHOLD && val2 < 256 - VFS_NOISE_THRESHOLD)
+            break;
+        --height;
+    }
+
+    /* Simple scaling(too big images are processed slow or cause segfault during minutae detection)
+        TODO: bicubic scaling to the fixed size
+        TODO: make scaling uniform scale using timeline data from last eight bytes */
+    int coef = height / 500 + 1;
+    int h = height / coef;
+    unsigned char *img = g_malloc(h * width);
+    for (int x = 0; x < h; ++x)
+    {
+        for (int y = 0; y < width; ++y)
+        {
+            int sum = 0;
+            for (int dx = 0; dx < coef; ++dx)
+                sum += data[x * coef + dx].data[y];
+            img[x * width + y] = sum / coef;
+        }
+    }
+    height = h;
+
+    g_free(vdev->data);
+    vdev->data = NULL;
+    vdev->memory = vdev->bytes = 0;
+
+    *result_height = height;
+    return img;
+}
+
+/* Ssm stub to prepare device after orange light was on */
+static void another_scan(void *data)
+{
+    struct fpi_ssm *ssm = data;
+    struct fp_img_dev *idev = ssm->priv;
+    struct libusb_device_handle *dev = idev->udev;
+
+    USB_WRITE(turn_on);
+    USB_READ(1, two_zeros);
+    query_interrupt(dev);
+
+    USB_COMMAND(0x04);
+    USB_READ(1, two_zeros);
+    USB_ABORT(2);
+
+    USB_WRITE(turn_off);
+    USB_READ(1, two_zeros);
+    query_interrupt(dev);
+
+    fpi_ssm_jump_to_state(ssm, INITIAL_STATE);
+}
+
+/* Another ssm stub to turn on orange light or finish ssm loop */
+static void scan_completed(void *data)
+{
+    struct fpi_ssm *ssm = data;
+    struct fp_img_dev *idev = ssm->priv;
+    struct libusb_device_handle *dev = idev->udev;
+    struct vfs_dev_t *vdev = idev->priv;
+
+    if (vdev->active)
+    {
+        USB_WRITE(next_receive_1);
+        USB_READ(1, two_zeros);
+        USB_WRITE(next_receive_2);
+        USB_READ(1, two_zeros);
+        fpi_timeout_add(VFS_SSM_ORANGE_TIMEOUT, another_scan, ssm);
+    }
+    else
+    {
+        USB_WRITE(last_receive_1);
+        USB_READ(1, two_zeros);
+        USB_WRITE(last_receive_2);
+        USB_READ(1, two_zeros);
+        fpi_ssm_mark_completed(ssm);
+    }
+    query_interrupt(dev);
+    USB_COMMAND(0x04);
+    USB_READ(1, two_zeros);
+    USB_ABORT(2);
+}
+
+/* Processes and submits image after fingerprint received */
+static void submit_image(struct fp_img_dev *idev)
+{
+    struct vfs_dev_t *vdev = idev->priv;
+
+    if (vdev->data == NULL)
+        return;
+
+    int height;
+    //print_raw_image(vdev);
+    unsigned char *img = prepare_image(vdev, &height);
+    //print_image(img, height);
+
+    /* The case when we can't submit image */
+    if (height == 0)
+        return;
+
+    int width = VFS_RESULT_IMAGE_WIDTH;
+    struct fp_img *res = fpi_img_new(width * height);
+    memcpy(res->data, img, width * height);
+    g_free(img);
+
+    res->width = width, res->height = height;
+    res->flags = FP_IMG_V_FLIPPED;
+
+    fpi_imgdev_image_captured(idev, res);
+    /* Finger not on the scanner */
+    fpi_imgdev_report_finger_status(idev, 0);
+}
+
+/* SSM loop for fingerprint scanning */
+static void vfs_activate_ssm(struct fpi_ssm *ssm)
+{
+    struct fp_img_dev *idev = ssm->priv;
+    struct libusb_device_handle *dev = idev->udev;
+    struct vfs_dev_t *vdev = idev->priv;
+
+    if (ssm->cur_state == INITIAL_STATE)
+    {
+        /* Don't know why, but Windows driver does this */
+        vfs_close(dev);
+
+        USB_ABORT(2);
+        USB_WRITE(turn_on);
+        USB_READ(1, two_zeros);
+
+        query_interrupt(dev);
+
+        /* Activated, light must blink now */
+        fpi_imgdev_activate_complete(idev, 0);
+
+        /* Asyncronously enquire an interrupt */
+        struct libusb_transfer *transfer = libusb_alloc_transfer(0);
+        libusb_fill_interrupt_transfer(transfer, dev, 0x83, vdev->interrupt, sizeof(vdev->interrupt), interrupt_callback, ssm, 0);
+
+        /* Status can be changed only in callback function */
+        vdev->status = LOOP;
+
+        fpi_ssm_next_state(ssm);
+        libusb_submit_transfer(transfer);
+        return;
+    }
+    else if (ssm->cur_state == WAIT_INTERRUPT_STATE)
+    {
+        if (vdev->status == NEXT)
+        {
+            /* Initialize fingerprint buffer */
+            if (vdev->data != NULL)
+                g_free(vdev->data);
+            vdev->memory = VFS_USB_BUFFER_SIZE;
+            vdev->data = g_malloc(vdev->memory);
+            vdev->bytes = 0;
+
+            /* Finger on the scanner */
+            fpi_imgdev_report_finger_status(idev, 1);
+            fpi_ssm_next_state(ssm);
+        }
+        else if (vdev->status == EXIT)
+            fpi_ssm_mark_aborted(ssm, -1);
+        else if (vdev->status == AGAIN)
+            fpi_ssm_jump_to_state(ssm, POST_RECEIVE_STATE);
+        else if (vdev->status == LOOP)
+            fpi_timeout_add(VFS_SSM_TIMEOUT, reborn, ssm);
+        return;
+    }
+    else if (ssm->cur_state == RECEIVE_STATE)
+    {
+        /* Increase buffer size while it's insufficient */
+        vdev->status = LOOP;
+        while (vdev->bytes + VFS_USB_BUFFER_SIZE > vdev->memory)
+        {
+            vdev->memory <<= 1;
+            vdev->data = (unsigned char *) g_realloc(vdev->data, vdev->memory);
+        }
+
+        /* Receive chunk of data */
+        int transferred;
+        int error = libusb_bulk_transfer(dev, 0x82, vdev->data + vdev->bytes, VFS_USB_BUFFER_SIZE, &transferred, VFS_USB_TIMEOUT);
+
+        if (error != 0 && error != LIBUSB_ERROR_TIMEOUT)
+            fp_err("USB read transfer: %s", libusb_error_name(error));
+
+        /* Fingerprint data is over */
+        if (transferred == 0)
+        {
+            fpi_ssm_next_state(ssm);
+            return;
+        }
+
+        /* We need more data */
+        /* TODO: probably if check for a noise on-line, it could speed up the process */
+        vdev->bytes += transferred;
+        fpi_ssm_jump_to_state(ssm, RECEIVE_STATE);
+        return;
+    }
+    else if (ssm->cur_state == POST_RECEIVE_STATE)
+    {
+        USB_ABORT(2);
+        submit_image(idev);
+        fpi_timeout_add(VFS_SSM_TIMEOUT, scan_completed, ssm);
+        return;
+    }
+}
diff -uraN libfprint-0.6.0/libfprint/drivers/vfs0050_proto.h libfprint-0.6.0-my/libfprint/drivers/vfs0050_proto.h
--- libfprint-0.6.0/libfprint/drivers/vfs0050_proto.h	1970-01-01 04:00:00.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/drivers/vfs0050_proto.h	2015-07-10 02:13:22.041941365 +0400
@@ -0,0 +1,607 @@
+
+static unsigned char two_zeros[] = {
+    0x00, 0x00,
+};
+
+static unsigned char open1[] = {
+    0x00, 0x00, 0x6B, 0x86, 0x5A, 0x4F, 0x3C, 0x00, 0x00, 0x00, 0x05, 0x03, 0x01, 0x14, 0x00, 0x01, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open2[] = {
+    0x00, 0x00, 0x00, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0xFE, 0x4F, 0xBA, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x99, 0x27, 0x5F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open3[] = {
+    0x00, 0x00, 0x00, 0x00,
+};
+
+static unsigned char open4[] = {
+    0x3A, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00, 0x9F,
+};
+
+static unsigned char open5[] = {
+    0xFF, 0xFF, 0xFF, 0xFF,
+};
+
+static unsigned char open6[] = {
+    0x3A, 0xFF, 0xFF, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00, 0xAB,
+};
+
+static unsigned char open7[] = {
+    0x36, 0x38, 0x2B, 0x5C, 0x70, 0xAC, 0x83, 0x69, 0x12, 0xC9, 0xE0, 0xBC, 0xFA, 0x88, 0x10, 0xC7, 
+    0x98, 0xBF, 0x52, 0xE3, 0xD5, 0xBC, 0x99, 0x9F, 0x73, 0x48, 0x06, 0xBA, 0xE0, 0x11, 0x0E, 0x87, 
+    0x87, 0xB5, 0x18, 0x95, 0x63, 0x98, 0xAE, 0x00, 0xC2, 0x67, 0xD5, 0x05, 0x5D, 0x66, 0xD6, 0xB3, 
+    0x3F, 0xB7, 0xA7, 0xA0, 0x61, 0x5B, 0x1D, 0xA0, 0x36, 0xC6, 0xE1, 0x78, 0x0D, 0x86, 0x72, 0x84, 
+    0xD2, 0xF3, 0xD9, 0xB9, 0x78, 0xD8, 0xDE, 0xAD, 0x7A, 0x45, 0x3C, 0x96, 0x08, 0x2D, 0xC6, 0xAE, 
+    0xC3, 0x3D, 0x8C, 0x6E, 0x5A, 0xFD, 0x91, 0x90, 0x0D, 0x78, 0x98, 0xF1, 0x28, 0x67, 0x15, 0x80, 
+    0xEA, 0x7B, 0xA9, 0xBD, 0xE0, 0x4B, 0x54, 0x8F, 0x91, 0xEA, 0x2A, 0x99, 0x38, 0xAF, 0x52, 0x11, 
+    0xC8, 0x34, 0x17, 0x42, 0xB8, 0xEA, 0xD3, 0x8E, 0xBC, 0x6A, 0xAA, 0x54, 0x3E, 0x77, 0x44, 0xD6, 
+    0x4A, 0x46, 0x04, 0xA5, 0x33, 0xE1, 0x86, 0xFD, 0xED, 0x80, 0xA8, 0x12, 0x3A, 0xC2, 0x29, 0x3E, 
+    0xCE, 0x9E, 0x00, 0xE7, 0xB3, 0xB5, 0x11, 0x2B, 0x50, 0x6C, 0x2C, 0x5E, 0x33, 0x17, 0xF5, 0x8B, 
+    0xC4, 0x0F, 0x25, 0x65, 0x87, 0x0D, 0x88, 0x3C, 0x30, 0xAD, 0x9B, 0x40, 0x8A, 0x6C, 0x60, 0xC9, 
+    0xF4, 0x03, 0xC1, 0x0F, 0x0E, 0x08, 0xA1, 0x81, 0x5E, 0x6A, 0x79, 0x3F, 0x7A, 0xF6, 0x18, 0x7E, 
+    0x30, 0x98, 0xF1, 0x25, 0xCB, 0xBD, 0xB9, 0xAE, 0x5B, 0xEB, 0xA7, 0xEA, 0x7C, 0xB6, 0x6F, 0x06, 
+    0x0F, 0xAA, 0xE5, 0xD6, 0xE3, 0x46, 0x83, 0xA3, 0xE1, 0x66, 0x38, 0x70, 0xB0, 0x5C, 0x3E, 0xE3, 
+    0xE0, 0x50, 0x25, 0x60, 0x98, 0x08, 0xA8, 0x86, 0xC9, 0xDC, 0xBC, 0xAF, 0x02, 0x54, 0xFC, 0xAD, 
+    0x8D, 0x9F, 0x87, 0x5A, 0x2F, 0x4A, 0xEA, 0x92, 0x71, 0x5D, 0x88, 0x64, 0xEB, 0xB0, 0x98, 0x27, 
+    0x96, 0xD5, 0x1F, 0x80, 0x44, 0xE3, 0x0F, 0x95, 0x95, 0xCB, 0x43, 0xB0, 0xCA, 0xBF, 0xAC, 0xD9, 
+    0x70, 0xE8, 0xC6, 0xF9, 0x4A, 0x94, 0xF7, 0x6C, 0x8D, 0x46, 0x97, 0x63, 0x85, 0xB9, 0x85, 0xAE, 
+    0x3C, 0xE0, 0xA2, 0xAD, 0xD7, 0x36, 0x27, 0xCF, 0xA1, 0x1F, 0x18, 0x34, 0xF9, 0xFF, 0x52, 0xC7, 
+    0xAE, 0x60, 0x2D, 0xA5, 0x76, 0x79, 0x42, 0xFB, 0xA8, 0x52, 0xA8, 0x08, 0x37, 0x79, 0x96, 0x7E, 
+    0x33, 0x1D, 0xD0, 0x6F, 0xC6, 0x13, 0x43, 0xDB, 0xB0, 0xA9, 0xDD, 0x1C, 0x7A, 0x8A, 0xCE, 0xE8, 
+    0xB6, 0xF9, 0x23, 0x43, 0x47, 0x1D, 0xD8, 0xBF, 0xB3, 0x68, 0x66, 0x55, 0x92, 0xAE, 0x7A, 0x76, 
+    0x54, 0xCF, 0x2C, 0xFC, 0x11, 0xF1, 0xD2, 0x08, 0x27, 0xD9, 0x23, 0x5C, 0x3C, 0x0A, 0xDE, 0x7C, 
+    0xD9, 0x26, 0x4B, 0x24, 0x5D, 0xC2, 0xBF, 0xE9, 0x50, 0x87, 0xDA, 0x2D, 0xFD, 0x5E, 0x20, 0x66, 
+    0x08, 0x9D, 0xE2, 0xA6, 0xC1, 0xC7, 0x0E, 0x86, 0xCB, 0xE0, 0xE7, 0x56, 0x82, 0xF1, 0x7E, 0x7E, 
+    0x4A, 0xB3, 0x42, 0x8D, 0x25, 0xEC, 0x1E, 0xB1, 0x44, 0x17, 0xDF, 0xB3, 0x06, 0xF4, 0x60, 0x3D, 
+    0x68, 0x36, 0x45, 0xA5, 0xEE, 0x5B, 0xEA, 0xC3, 0x5D, 0x67, 0x51, 0x14, 0xDC, 0xCC, 0x6B, 0x9D, 
+    0xD3, 0x01, 0xDB, 0x99, 0xC7, 0x85, 0x15, 0x68, 0xE5, 0x04, 0xE4, 0x12, 0xD4, 0x83, 0x44, 0x7D, 
+    0xE8, 0x7C, 0x6C, 0xAA, 0xAA, 0xD2, 0x97, 0x5B, 0xAE, 0xAC, 0x03, 0xAC, 0x3C, 0x73, 0xD6, 0x16, 
+    0x72, 0x29, 0xC7, 0x2A, 0x57, 0xBC, 0x3E, 0xDC, 0x2E, 0xAF, 0xD2, 0x1A, 0x03, 0x76, 0x39, 0x9D, 
+    0x3F, 0x66, 0xE5, 0xCC, 0x32, 0x0D, 0xD8, 0x58, 0x4B, 0xA4, 0xA2, 0x39, 0xE2, 0xE8, 0xB7, 0x44, 
+    0x33, 0xAB, 0x7C, 0x49, 0xF6, 0xE4, 0x24, 0xC4, 0x7C, 0xA9, 0x07, 0x31, 0x93, 0x16, 0xB4, 0x31, 
+    0x38, 0x5D, 0x13, 0x0B, 0x8F, 0x46, 0xA8, 0x77, 0xB2, 0x86, 0x15, 0x2C, 0xA7, 0x6A, 0x04, 0xB1, 
+    0x4C, 0xDD, 0xC8, 0xE0, 0x26, 0xC5, 0xA3, 0x4D, 0x6A, 0x94, 0x57, 0x1F, 0x85, 0x83, 0x8F, 0x05, 
+    0xE3, 0xD9, 0x3D, 0x3C, 0x54, 0x96, 0x05, 0xEC, 0xF8, 0x25, 0xEA, 0x84, 0x9F, 0x5D, 0x3F, 0x4A, 
+    0xA1, 0x89, 0x86, 0x9F, 0xB7, 0x73, 0x49, 0x6C, 0x8E, 0xCF, 0x9C, 0x88, 0xB6, 0xCE, 0x18, 0x15, 
+    0x93, 0xE0, 0x17, 0x9A, 0x69, 0x57, 0xD1, 0xB6, 0x25, 0xF9, 0x62, 0xD2, 0xBA, 0x2C, 0xCB, 0xE6, 
+    0x5F, 0xE5, 0xB4, 0x18, 0xE8, 0x65, 0x46, 0x7D, 0x06, 0x36, 0x85, 0x74, 0xC4, 0x1D, 0x62, 0xF1, 
+    0x50, 0x54, 0x9A, 0x02, 0xDA, 0x4B, 0x67, 0x70, 0xFD, 0x00, 
+};
+
+static unsigned char open8[] = {
+    0x00, 0x00, 0x6B, 0x86, 0x5A, 0x4F, 0x3C, 0x00, 0x00, 0x00, 0x05, 0x03, 0x01, 0x14, 0x00, 0x01, 
+    0x00, 0x02, 0xF8, 0x10, 0x00, 0x20, 0x38, 0x5A, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open9[] = {
+    0x02, 0x90, 0x00, 0x01, 0x00, 0x20, 0x00, 0x08, 0x00, 0x2C, 0x03, 0x00, 0x30, 0x1F, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x03, 0x00, 0x30, 0x3D, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x18, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x24, 0x03, 0x00, 
+    0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x28, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x30, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x38, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x3C, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x53, 0x00, 0x20, 0x00, 0x08, 0x00, 0x44, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x03, 0x00, 0x30, 0x01, 0x04, 0x03, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x4C, 0x03, 0x00, 0x30, 0x01, 0x0C, 0x03, 0x00, 0x20, 0x00, 0x08, 0x00, 0x54, 0x03, 0x00, 
+    0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x5C, 0x03, 0x00, 0x30, 0x90, 0x01, 0x02, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x60, 0x03, 0x00, 0x30, 0x2C, 0x01, 0x19, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x64, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x6C, 0x03, 0x00, 
+    0x30, 0x1E, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x03, 0x00, 0x30, 0x21, 0x80, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x78, 0x03, 0x00, 0x30, 0x09, 0x00, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x7C, 0x03, 0x00, 0x30, 0x0B, 0x00, 0x19, 0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x03, 0x00, 0x30, 0x3A, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x88, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x8C, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x90, 0x03, 0x00, 
+    0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x94, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x98, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 
+    0x00, 0x9C, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 0x00, 0xA8, 0x03, 0x00, 
+    0x30, 0xE8, 0x03, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xAC, 0x03, 0x00, 0x30, 0x64, 0x01, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xB0, 0x03, 0x00, 0x30, 0xD0, 0x02, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0xB4, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xB8, 0x03, 0x00, 
+    0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xBC, 0x03, 0x00, 0x30, 0x05, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xC0, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x84, 0x03, 0x00, 0x30, 0x3B, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x00, 0x05, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x04, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x0C, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x10, 0x05, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x07, 0x00, 0x30, 0x03, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x10, 0x07, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x14, 0x07, 0x00, 
+    0x30, 0x21, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 0x30, 0x1A, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x2B, 0x1A, 0x00, 0x00, 0x00, 0xC0, 0x24, 0x5B, 0x33, 
+    0x4E, 0x24, 0xDC, 0x33, 0x44, 0x24, 0x00, 0x33, 0x59, 0x24, 0xAB, 0x33, 0x1D, 0x00, 0x00, 0x10, 
+    0x20, 0x29, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x28, 0x00, 0x00, 
+};
+
+static unsigned char open10[] = {
+    0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open11[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
+
+static unsigned char open12[] = {
+    0x02, 0x84, 0x00, 0xFC, 0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x03, 0x00, 0x30, 0x01, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x18, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x24, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x28, 0x03, 0x00, 
+    0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x30, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x38, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x3C, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x44, 0x03, 0x00, 
+    0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x03, 0x00, 0x30, 0x01, 0x04, 0x03, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x4C, 0x03, 0x00, 0x30, 0x01, 0x0C, 0x03, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x54, 0x03, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x5C, 0x03, 0x00, 
+    0x30, 0x90, 0x01, 0x02, 0x00, 0x20, 0x00, 0x08, 0x00, 0x60, 0x03, 0x00, 0x30, 0x2C, 0x01, 0x19, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x64, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x6C, 0x03, 0x00, 0x30, 0x1E, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x03, 0x00, 
+    0x30, 0x21, 0x80, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x78, 0x03, 0x00, 0x30, 0x09, 0x00, 0x02, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x7C, 0x03, 0x00, 0x30, 0x0B, 0x00, 0x19, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x80, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x03, 0x00, 
+    0x30, 0x3A, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x88, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x8C, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x90, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x94, 0x03, 0x00, 
+    0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x98, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x9C, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0xA8, 0x03, 0x00, 0x30, 0xE8, 0x03, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xAC, 0x03, 0x00, 
+    0x30, 0x64, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xB0, 0x03, 0x00, 0x30, 0xD0, 0x02, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xB4, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0xB8, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xBC, 0x03, 0x00, 
+    0x30, 0x05, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xC0, 0x03, 0x00, 0x30, 0x80, 0x01, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x00, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x04, 0x05, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x10, 0x05, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x07, 0x00, 
+    0x30, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x10, 0x07, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x14, 0x07, 0x00, 0x30, 0x21, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 
+    0x30, 0x1A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x01, 0x00, 0x00, 0x2B, 0xFF, 0x2B, 0xFF, 0x2B, 
+    0xED, 0x00, 0x00, 0x2B, 0xFB, 0x00, 0x00, 0x2B, 0xC5, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x00, 0x00, 
+    0x24, 0x70, 0x3B, 0x0D, 0xC0, 0x52, 0x01, 0x00, 0x02, 0x00, 0x53, 0x01, 0x08, 0x02, 0x00, 0x24, 
+    0x70, 0x3B, 0x0D, 0x52, 0x01, 0x01, 0x02, 0x00, 0x53, 0x01, 0x09, 0x02, 0x00, 0x24, 0x70, 0x3B, 
+    0x0D, 0x52, 0x01, 0x02, 0x02, 0x00, 0x53, 0x01, 0x0A, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 
+    0x01, 0x03, 0x02, 0x00, 0x53, 0x01, 0x0B, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x04, 
+    0x02, 0x00, 0x53, 0x01, 0x0C, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x05, 0x02, 0x00, 
+    0x53, 0x01, 0x0D, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x06, 0x02, 0x00, 0x53, 0x01, 
+    0x0E, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x07, 0x02, 0x00, 0x53, 0x01, 0x0F, 0x02, 
+    0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x08, 0x02, 0x00, 0x53, 0x01, 0x00, 0x02, 0x00, 0x24, 
+    0x70, 0x3B, 0x0D, 0x52, 0x01, 0x09, 0x02, 0x00, 0x53, 0x01, 0x01, 0x02, 0x00, 0x24, 0x70, 0x3B, 
+    0x0D, 0x52, 0x01, 0x0A, 0x02, 0x00, 0x53, 0x01, 0x02, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 
+    0x01, 0x0B, 0x02, 0x00, 0x53, 0x01, 0x03, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x0C, 
+    0x02, 0x00, 0x53, 0x01, 0x04, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x0D, 0x02, 0x00, 
+    0x53, 0x01, 0x05, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x0E, 0x02, 0x00, 0x53, 0x01, 
+    0x06, 0x02, 0x00, 0x24, 0x70, 0x3B, 0x0D, 0x52, 0x01, 0x0F, 0x02, 0x00, 0x53, 0x01, 0x07, 0x02, 
+    0x00, 0x24, 0x70, 0x3B, 0x0D, 0x2F, 0x07, 0x80, 0x24, 0x70, 0x3B, 0x0D, 0x00, 0x00, 0x00, 0x10, 
+    0x20, 0x0D, 0x00, 0x48, 0x01, 0x20, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 
+    0x30, 0x01, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 
+    0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x04, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
+    0xFF, 0x24, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 
+    0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 
+    0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
+    0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 
+    0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 
+    0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
+    0xFF, 0x24, 0x03, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0x20, 0x03, 0x00, 
+    0x30, 0x80, 0x10, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x80, 0x10, 0x00, 
+    0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x80, 0x10, 0x00, 0x00, 0x7F, 0x00, 0xFC, 
+    0xFF, 0x20, 0x03, 0x00, 0x30, 0x80, 0x10, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 
+    0x30, 0x80, 0x10, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x11, 0x00, 
+    0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x12, 0x00, 0x00, 0x7F, 0x00, 0xFC, 
+    0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x14, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 
+    0x30, 0x00, 0x18, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x38, 0x00, 
+    0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x38, 0x00, 0x00, 0x7F, 0x00, 0xFC, 
+    0xFF, 0x20, 0x03, 0x00, 0x30, 0x00, 0x38, 0x00, 0x00, 0x7F, 0x00, 0xFC, 0xFF, 0x03, 0x80, 0x40, 
+    0x00, 0x01, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x1E, 0x00, 0x1F, 0x00, 0x2D, 0x00, 0x2E, 0x00, 0x3C, 
+    0x00, 0x3D, 0x00, 0x4B, 0x00, 0x4C, 0x00, 0x5A, 0x00, 0x5B, 0x00, 0x69, 0x00, 0x6A, 0x00, 0x78, 
+    0x00, 0x79, 0x00, 0x87, 0x00, 0x88, 0x00, 0x96, 0x00, 0x97, 0x00, 0xA5, 0x00, 0xA6, 0x00, 0xB4, 
+    0x00, 0xB5, 0x00, 0xC3, 0x00, 0xC4, 0x00, 0xD2, 0x00, 0xD3, 0x00, 0xE1, 0x00, 0xE2, 0x00, 0xF0, 
+    0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
+    0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
+    0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 
+    0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 
+    0x00, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x80, 0x40, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 
+    0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 
+    0x00, 0x0E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 
+    0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x14, 0x03, 0x00, 
+    0x30, 0x15, 0x00, 0x00, 0x00, 0x29, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open13[] = {
+    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x34, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
+    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 
+    0x33, 0x33, 0x33, 0x33, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
+};
+
+static unsigned char open14[] = {
+    0x02, 0x8C, 0x00, 0x3B, 0x01, 0x20, 0x00, 0x08, 0x00, 0x20, 0x03, 0x00, 0x30, 0x01, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x18, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x24, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x28, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x30, 0x03, 0x00, 0x30, 0x00, 0x08, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x38, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x3C, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x44, 0x03, 0x00, 
+    0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x03, 0x00, 0x30, 0x01, 0x05, 0x02, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x4C, 0x03, 0x00, 0x30, 0x01, 0x0D, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x54, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x64, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x84, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x98, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x9C, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xC0, 0x03, 0x00, 0x30, 0x38, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x84, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x07, 0x00, 
+    0x30, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x10, 0x07, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x14, 0x07, 0x00, 0x30, 0x21, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 
+    0x30, 0x1A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x2B, 0xFF, 0x2B, 0xFF, 0x2B, 
+    0xED, 0x00, 0x00, 0x2B, 0xFB, 0x00, 0x00, 0x2B, 0xC5, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x00, 0x00, 
+    0x25, 0xFF, 0x2E, 0xC0, 0x2C, 0x2F, 0x07, 0x2F, 0xFE, 0x80, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 
+    0x00, 0x0D, 0x00, 0x28, 0x00, 0x20, 0x03, 0x00, 0x30, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
+    0x00, 0x3C, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x80, 0x04, 
+    0x00, 0x6C, 0x00, 0xAC, 0x00, 0x20, 0x00, 0x08, 0x00, 0x14, 0x03, 0x00, 0x30, 0x15, 0x00, 0x00, 
+    0x00, 0x29, 0x00, 0x04, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x48, 0x03, 0x00, 
+    0x30, 0xFF, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x21, 0x00, 0x10, 
+    0x00, 0x4C, 0x03, 0x00, 0x30, 0xFF, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 
+    0x00, 0x21, 0x00, 0x10, 0x00, 0x20, 0x03, 0x00, 0x30, 0x7F, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0x00, 
+    0x00, 0x80, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x24, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 0x30, 0x1A, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open15[] = {
+    0x02, 0x94, 0x00, 0x64, 0x00, 0x20, 0x00, 0x08, 0x00, 0x2C, 0x03, 0x00, 0x30, 0x1B, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x03, 0x00, 0x30, 0x3D, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x18, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x24, 0x03, 0x00, 
+    0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x28, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x30, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x38, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x3C, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x44, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x03, 0x00, 0x30, 0x01, 0x04, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x4C, 0x03, 0x00, 0x30, 0x01, 0x0C, 0x02, 0x00, 0x20, 0x00, 0x08, 0x00, 0x54, 0x03, 0x00, 
+    0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x5C, 0x03, 0x00, 0x30, 0x90, 0x01, 0x02, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x60, 0x03, 0x00, 0x30, 0x2C, 0x01, 0x19, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x64, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x6C, 0x03, 0x00, 
+    0x30, 0x1E, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x03, 0x00, 0x30, 0x21, 0x80, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x78, 0x03, 0x00, 0x30, 0x09, 0x00, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x7C, 0x03, 0x00, 0x30, 0x0B, 0x00, 0x19, 0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x03, 0x00, 0x30, 0x3A, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x88, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x8C, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x90, 0x03, 0x00, 
+    0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x94, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x98, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 
+    0x00, 0x9C, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 0x00, 0xA8, 0x03, 0x00, 
+    0x30, 0x64, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xAC, 0x03, 0x00, 0x30, 0x64, 0x01, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xB0, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0xB4, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xB8, 0x03, 0x00, 
+    0x30, 0x05, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xBC, 0x03, 0x00, 0x30, 0x05, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xC0, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x84, 0x03, 0x00, 0x30, 0x3B, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x07, 0x00, 
+    0x30, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x14, 0x07, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x1C, 0x07, 0x00, 0x30, 0x1A, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x0D, 0x00, 
+    0x30, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x28, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x2B, 0xFF, 0x2B, 0xFF, 0x2B, 0xED, 0x00, 0x00, 0x2B, 
+    0xFB, 0x00, 0x00, 0x2B, 0xC5, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x24, 0xD3, 0x2E, 0xC0, 0x2C, 0x3B, 0x08, 0xF0, 0x3B, 0x09, 0x24, 0xBB, 0x3B, 0x0B, 0x24, 
+    0xAA, 0x3B, 0x1F, 0xF8, 0x00, 0x3B, 0x3F, 0xF0, 0x00, 0x3B, 0x35, 0xC0, 0x00, 0x38, 0x80, 0x2C, 
+    0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 
+    0x3A, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3B, 0x0A, 0x80, 0x2E, 0x83, 0x24, 0xDB, 
+    0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x2C, 0x31, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 
+    0xCB, 0x33, 0x1B, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x31, 0x83, 0x2C, 0x70, 0x00, 
+    0x00, 0x00, 0x00, 0xCB, 0x00, 0x33, 0x1E, 0x83, 0x2E, 0x25, 0xFF, 0xC4, 0x00, 0x2F, 0x06, 0x84, 
+    0x2E, 0x00, 0x00, 0x10, 0x20, 0x29, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 
+    0x00, 0x21, 0x00, 0x10, 0x00, 0x48, 0x03, 0x00, 0x30, 0xFF, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x04, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x4C, 0x03, 0x00, 0x30, 0xFF, 0xF0, 0xFF, 
+    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x20, 0x03, 0x00, 
+    0x30, 0x7F, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x24, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 
+    0x30, 0x1A, 0x00, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x20, 0x03, 0x00, 0x30, 0xC3, 0xFF, 0xFF, 
+    0xFF, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 
+    0x30, 0x01, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open16[] = {
+    0x00, 0x00, 0x88, 0x02, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x70, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xD3, 0x2E, 0xC0, 0x2C, 0x3B, 0x08, 0xF0, 0x3B, 0x09, 
+    0x24, 0xBB, 0x3B, 0x0B, 0x24, 0xAA, 0x3B, 0x1F, 0xF8, 0x00, 0x3B, 0x3F, 0xF0, 0x00, 0x3B, 0x35, 
+    0xC0, 0x00, 0x38, 0x80, 0x2C, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x80, 0x2C, 0x70, 
+    0x00, 0x00, 0x00, 0x00, 0xC0, 0x3A, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3B, 0x0A, 
+    0x80, 0x2E, 0x83, 0x24, 0xDB, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x2C, 0x31, 0x83, 0x2C, 
+    0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x33, 0x1B, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 
+    0x31, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x33, 0x1E, 0x83, 0x2E, 0x25, 0xFF, 
+    0xC4, 0x00, 0x2F, 0x06, 0x84, 0x2E, 0x00, 0x00, 0x10, 0x20, 0x90, 0x02, 0x00, 0x30, 0x00, 0x00, 
+    0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xB8, 0x04, 
+    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x3F, 0x1F, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x38, 0x03, 
+    0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 
+    0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x5A, 0x03, 0x00, 0x00, 0x5C, 0x03, 
+    0x00, 0x00, 0x5C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 
+    0x00, 0x00, 0x13, 0x06, 0x00, 0x00, 0x18, 0x1F, 0x00, 0x00, 0x38, 0x09, 0x00, 0x00, 0x00, 0x03, 
+    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0xCC, 0x1E, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xAC, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x06, 
+    0x00, 0x00, 0x40, 0x1E, 0x00, 0x00, 0x40, 0x1E, 0x00, 0x00, 0x08, 0x1F, 0x00, 0x00, 0x74, 0x1F, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 0x00, 0x00, 0x30, 0x06, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x3B, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF0, 0x01, 0x95, 0x10, 
+    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00, 0x01, 0x0C, 0x02, 0x00, 0x01, 0x00, 
+    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x01, 0x02, 0x00, 0x2C, 0x01, 
+    0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x21, 0x80, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x19, 0x00, 0x01, 0x00, 
+    0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xA1, 0x01, 0xA1, 0x01, 0xA1, 0x01, 0xA1, 0x01, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x00, 0x01, 
+    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 
+    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1A, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x69, 0x5A, 
+    0x7E, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x81, 
+    0x00, 0x00, 0x17, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x03, 0x00, 
+    0x00, 0x00, 0x20, 0x0D, 0x03, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 
+    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xC3, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x07, 
+    0x05, 0x00, 0x69, 0x5A, 0x7E, 0xA5, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xA4, 0x00, 0x00, 0x64, 0xC9, 
+    0x00, 0x00, 0x96, 0x7A, 0x00, 0x00, 0x02, 0x7E, 0x00, 0x00, 0x61, 0x52, 0x00, 0x00, 0xF9, 0x4B, 
+    0x00, 0x00, 0x76, 0x62, 0x00, 0x00, 0xE6, 0x7F, 0x00, 0x00, 0x5B, 0x31, 0x00, 0x00, 0xAD, 0x03, 
+    0x00, 0x00, 0x2D, 0x2B, 0x00, 0x00, 0xF3, 0x46, 0x00, 0x00, 0xF1, 0x49, 0x00, 0x00, 0xEB, 0x6A, 
+    0x00, 0x00, 0x59, 0x3D, 0x00, 0x00, 0x4D, 0x33, 0x00, 0x00, 0xFE, 0x0E, 0x00, 0x00, 0xB5, 0x1D, 
+    0x00, 0x00, 0xFC, 0x66, 0x00, 0x00, 0x8A, 0x58, 0x00, 0x00, 0x86, 0x01, 0x00, 0xAD, 0x06, 0x91, 
+    0x82, 0x0C, 0xEC, 0x0C, 0xF0, 0x39, 0xAC, 0x60, 0xCF, 0xF0, 0xFC, 0x7F, 0x87, 0x8D, 0xE9, 0x08, 
+    0x34, 0x5D, 0x3C, 0xB5, 0x9F, 0x74, 0xF1, 0xB3, 0xA7, 0x38, 0x3A, 0x28, 0xB8, 0x63, 0x5D, 0xB7, 
+    0x0B, 0x3D, 0x83, 0x27, 0xE9, 0x17, 0xE7, 0xDF, 0xE6, 0x72, 0xCC, 0xFC, 0x55, 0x5A, 0xD0, 0x63, 
+    0xFB, 0xD8, 0xEE, 0xFE, 0x77, 0xED, 0x3A, 0xFD, 0xD9, 0x5F, 0xBC, 0x5D, 0xF5, 0x3E, 0x4A, 0x49, 
+    0xFB, 0xA4, 0x05, 0x9C, 0xB4, 0x19, 0x9B, 0x3B, 0xFF, 0x73, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
+    0x00, 0x00, 0xE8, 0x02, 0x00, 0x00, 0xDA, 0x6B, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00, 0x03, 0x00, 
+    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char open17[] = {
+    0x66, 0x56, 0x55, 0x55, 0x76, 0x77, 0x77, 0x77, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC,
+};
+
+static unsigned char interrupt_query_out[] = {
+    0x02, 0x94, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x2C, 0x03, 0x00, 0x30, 0x1B, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x03, 0x00, 0x30, 0x3D, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x18, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x24, 0x03, 0x00, 
+    0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x28, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x30, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x38, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x3C, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x44, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x48, 0x03, 0x00, 0x30, 0x01, 0x04, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x4C, 0x03, 0x00, 0x30, 0x01, 0x0C, 0x02, 0x00, 0x20, 0x00, 0x08, 0x00, 0x54, 0x03, 0x00, 
+    0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x5C, 0x03, 0x00, 0x30, 0x90, 0x01, 0x02, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x60, 0x03, 0x00, 0x30, 0x2C, 0x01, 0x19, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x64, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x6C, 0x03, 0x00, 
+    0x30, 0x1E, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x03, 0x00, 0x30, 0x21, 0x80, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x78, 0x03, 0x00, 0x30, 0x09, 0x00, 0x02, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x7C, 0x03, 0x00, 0x30, 0x0B, 0x00, 0x19, 0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 
+    0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x84, 0x03, 0x00, 0x30, 0x3A, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x88, 0x03, 0x00, 0x30, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x8C, 0x03, 0x00, 0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x90, 0x03, 0x00, 
+    0x30, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x94, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x98, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 
+    0x00, 0x9C, 0x03, 0x00, 0x30, 0x00, 0x00, 0xA1, 0x01, 0x20, 0x00, 0x08, 0x00, 0xA8, 0x03, 0x00, 
+    0x30, 0x64, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xAC, 0x03, 0x00, 0x30, 0x64, 0x01, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xB0, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0xB4, 0x03, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xB8, 0x03, 0x00, 
+    0x30, 0x05, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0xBC, 0x03, 0x00, 0x30, 0x05, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0xC0, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x84, 0x03, 0x00, 0x30, 0x3B, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x07, 0x00, 
+    0x30, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x0C, 0x07, 0x00, 0x30, 0x00, 0x00, 0x00, 
+    0x00, 0x20, 0x00, 0x08, 0x00, 0x14, 0x07, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x1C, 0x07, 0x00, 0x30, 0x1A, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x70, 0x0D, 0x00, 
+    0x30, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x28, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x90, 0x00, 0x00, 0x00, 0x2B, 0xFF, 0x2B, 0xFF, 0x2B, 0xED, 0x00, 0x00, 0x2B, 
+    0xFB, 0x00, 0x00, 0x2B, 0xC5, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x24, 0xD3, 0x2E, 0xC0, 0x2C, 0x3B, 0x08, 0xF0, 0x3B, 0x09, 0x24, 0xBB, 0x3B, 0x0B, 0x24, 
+    0xAA, 0x3B, 0x1F, 0xF8, 0x00, 0x3B, 0x3F, 0xF0, 0x00, 0x3B, 0x35, 0xC0, 0x00, 0x38, 0x80, 0x2C, 
+    0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 
+    0x3A, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3B, 0x0A, 0x80, 0x2E, 0x83, 0x24, 0xDB, 
+    0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x2C, 0x31, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 
+    0xCB, 0x33, 0x1B, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x31, 0x83, 0x2C, 0x70, 0x00, 
+    0x00, 0x00, 0x00, 0xCB, 0x00, 0x33, 0x1E, 0x83, 0x2E, 0x25, 0xFF, 0xC4, 0x00, 0x2F, 0x06, 0x84, 
+    0x2E, 0x00, 0x00, 0x10, 0x20, 0x29, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 
+    0x00, 0x21, 0x00, 0x10, 0x00, 0x48, 0x03, 0x00, 0x30, 0xFF, 0xF0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x04, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x4C, 0x03, 0x00, 0x30, 0xFF, 0xF0, 0xFF, 
+    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x20, 0x03, 0x00, 
+    0x30, 0x7F, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x20, 0x00, 0x08, 
+    0x00, 0x24, 0x03, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x1C, 0x07, 0x00, 
+    0x30, 0x1A, 0x00, 0x00, 0x00, 0x21, 0x00, 0x10, 0x00, 0x20, 0x03, 0x00, 0x30, 0xC3, 0xFF, 0xFF, 
+    0xFF, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x00, 0x80, 0x03, 0x00, 
+    0x30, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x84, 0x00, 0x31, 0x65, 0x77, 0x77, 0x77, 0x78, 0x88, 
+    0x77, 0x77, 0x76, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x78, 0x77, 0x67, 0x66, 0x66, 0x66, 0x66, 
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x76, 0x67, 0x66, 0x66, 0x66, 0x66, 0x66, 0x77, 0x66, 0x66, 
+    0x66, 0x66, 0x67, 0x66, 0x66, 0x66, 0x66, 0x66, 0x76, 0x76, 0x66, 0x56, 0x66, 0x66, 0x56, 0x55, 
+    0x65, 0x66, 0x66, 0x66, 0x65, 0x66, 0x66, 0x55, 0x66, 0x66, 0x65, 0x66, 0x76, 0x76, 0x77, 0x77, 
+    0x66, 0x66, 0x66, 0x76, 0x67, 0x66, 0x77, 0x67, 0x66, 0x66, 0x66, 0x56, 0x65, 0x66, 0x65, 0x66, 
+    0x66, 0x55, 0x55, 0x54, 0x55, 0x65, 0x66, 0x66, 0x66, 0x76, 0x77, 0x87, 0x88, 0x77, 0x66, 0x66, 
+    0x66, 0x66, 0x66, 0x66, 0x66, 0x65, 0x66, 0x55, 0x55, 0x65, 0x56, 0x55, 0x55, 0x55, 0x54, 0x45, 
+    0x54, 0x55, 0x55, 0x55, 0x66, 0x66, 0x66, 0x66, 0x66, 0x77, 0x77, 0x77, 0x66, 0x26, 0x00, 0x28, 
+    0x00, 0xFF, 0x00, 0x0F, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0x20, 0x00, 0x00, 0x00, 0x30, 0x01, 0x02, 
+    0x00, 0x2C, 0x01, 0x28, 0x00, 0x20, 0x80, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x0B, 0x00, 0x19, 
+    0x00, 0x40, 0x1F, 0x10, 0x27, 0x00, 0x0F, 0x03, 0x00, 
+};
+
+static unsigned char interrupt_query_in[] = {
+    0x00, 0x00, 0x88, 0x02, 0x00, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x05, 0x80, 0x70, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xD3, 0x2E, 0xC0, 0x2C, 0x3B, 0x08, 0xF0, 0x3B, 0x09, 
+    0x24, 0xBB, 0x3B, 0x0B, 0x24, 0xAA, 0x3B, 0x1F, 0xF8, 0x00, 0x3B, 0x3F, 0xF0, 0x00, 0x3B, 0x35, 
+    0xC0, 0x00, 0x38, 0x80, 0x2C, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x38, 0x80, 0x2C, 0x70, 
+    0x00, 0x00, 0x00, 0x00, 0xC0, 0x3A, 0x80, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x3B, 0x0A, 
+    0x80, 0x2E, 0x83, 0x24, 0xDB, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x2C, 0x31, 0x83, 0x2C, 
+    0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x33, 0x1B, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 
+    0x31, 0x83, 0x2C, 0x70, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x33, 0x1E, 0x83, 0x2E, 0x25, 0xFF, 
+    0xC4, 0x00, 0x2F, 0x06, 0x84, 0x2E, 0x00, 0x00, 0x10, 0x20, 0x90, 0x02, 0x00, 0x30, 0x21, 0x00, 
+    0x00, 0x00, 0x31, 0x65, 0x77, 0x77, 0x77, 0x78, 0x88, 0x77, 0x77, 0x76, 0x77, 0x77, 0x77, 0x77, 
+    0x77, 0x77, 0x78, 0x77, 0x67, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x76, 
+    0x67, 0x66, 0x66, 0x66, 0x66, 0x66, 0x77, 0x66, 0x66, 0x66, 0x66, 0x67, 0x66, 0x66, 0x66, 0x66, 
+    0x66, 0x76, 0x76, 0x66, 0x56, 0x66, 0x66, 0x56, 0x55, 0x65, 0x66, 0x66, 0x66, 0x65, 0x66, 0x66, 
+    0x55, 0x66, 0x66, 0x65, 0x66, 0x76, 0x76, 0x77, 0x77, 0x66, 0x66, 0x66, 0x76, 0x67, 0x66, 0x77, 
+    0x67, 0x66, 0x66, 0x66, 0x56, 0x65, 0x66, 0x65, 0x66, 0x66, 0x55, 0x55, 0x54, 0x55, 0x65, 0x66, 
+    0x66, 0x66, 0x76, 0x77, 0x87, 0x88, 0x77, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x65, 0x66, 
+    0x55, 0x55, 0x65, 0x56, 0x55, 0x55, 0x55, 0x54, 0x45, 0x54, 0x55, 0x55, 0x55, 0x66, 0x66, 0x66, 
+    0x66, 0x66, 0x77, 0x77, 0x77, 0x66, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1C, 0x02, 0x00, 0x00, 0x40, 0x00, 
+    0x00, 0x00, 0x23, 0x05, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
+    0x00, 0x00, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x30, 0x03, 
+    0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x18, 0x1B, 
+    0x00, 0x00, 0xE6, 0x1E, 0x00, 0x00, 0xE6, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x13, 0x06, 0x00, 0x00, 0xE8, 0x1E, 0x00, 0x00, 0xEC, 0x09, 
+    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x06, 
+    0x00, 0x00, 0x78, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x39, 0x00, 0x00, 0x70, 0x0F, 
+    0x00, 0x00, 0x70, 0x0F, 0x00, 0x00, 0xDC, 0x0E, 0x00, 0x00, 0xDC, 0x0E, 0x00, 0x00, 0x08, 0x1F, 
+    0x00, 0x00, 0x10, 0x1F, 0x00, 0x00, 0x64, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0F, 
+    0x00, 0x00, 0x70, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x40, 0x03, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
+    0xF0, 0x01, 0x95, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1B, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x04, 0x02, 0x00, 0x01, 0x0C, 
+    0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 
+    0x02, 0x00, 0x2C, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 
+    0x00, 0x00, 0x22, 0x80, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x0B, 0x00, 
+    0x19, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x00, 
+    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xA1, 0x01, 0xA1, 0x01, 0xA1, 0x01, 
+    0xA1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x64, 0x01, 
+    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 
+    0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x08, 0x00, 
+    0x00, 0x00, 0x69, 0x5A, 0x7E, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0xFA, 0xAB, 0x00, 0x00, 0x17, 0xC4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 
+    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x0D, 0x03, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xC3, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x0C, 0x07, 0x05, 0x00, 0x69, 0x5A, 0x7E, 0xA5, 0x00, 0x00, 0x00, 0x00, 0xD0, 0xA4, 
+    0x00, 0x00, 0x64, 0xC9, 0x00, 0x00, 0x96, 0x7A, 0x00, 0x00, 0x02, 0x7E, 0x00, 0x00, 0x61, 0x52, 
+    0x00, 0x00, 0xF9, 0x4B, 0x00, 0x00, 0x76, 0x62, 0x00, 0x00, 0xE6, 0x7F, 0x00, 0x00, 0x5B, 0x31, 
+    0x00, 0x00, 0xAD, 0x03, 0x00, 0x00, 0x2D, 0x2B, 0x00, 0x00, 0xF3, 0x46, 0x00, 0x00, 0xF1, 0x49, 
+    0x00, 0x00, 0xEB, 0x6A, 0x00, 0x00, 0x59, 0x3D, 0x00, 0x00, 0x4D, 0x33, 0x00, 0x00, 0xFE, 0x0E, 
+    0x00, 0x00, 0xB5, 0x1D, 0x00, 0x00, 0xFC, 0x66, 0x00, 0x00, 0x8A, 0x58, 0x00, 0x00, 0x86, 0x01, 
+    0x00, 0xAD, 0x06, 0x91, 0x82, 0x0C, 0xEC, 0x0C, 0xF0, 0x39, 0xAC, 0x60, 0xCF, 0xF0, 0xFC, 0x7F, 
+    0x87, 0x8D, 0xE9, 0x08, 0x34, 0x5D, 0x3C, 0xB5, 0x9F, 0x74, 0xF1, 0xB3, 0xA7, 0x38, 0x3A, 0x28, 
+    0xB8, 0x63, 0x5D, 0xB7, 0x0B, 0x3D, 0x83, 0x27, 0xE9, 0x17, 0xE7, 0xDF, 0xE6, 0x72, 0xCC, 0xFC, 
+    0x55, 0x5A, 0xD0, 0x63, 0xFB, 0xD8, 0xEE, 0xFE, 0x77, 0xED, 0x3A, 0xFD, 0xD9, 0x5F, 0xBC, 0x5D, 
+    0xF5, 0x3E, 0x4A, 0x49, 0xFB, 0xA4, 0x05, 0x9C, 0xB4, 0x19, 0x9B, 0x3B, 0xFF, 0x73, 0x01, 0x00, 
+    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE7, 0x02, 0x00, 0x00, 0xF9, 0x6F, 0x00, 0x00, 0x04, 0x00, 
+    0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x03, 0x00, 
+    0x00, 0x00, 
+};
+
+static unsigned char turn_off[] = {
+    0x39, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char turn_on[] = {
+    0x39, 0x20, 0xBF, 0x02, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x01, 0xD1, 0x00, 0x20, 0xD1, 0xD1, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x01, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0xF4, 0x01, 0x00, 0x00, 0x02, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char empty_interrupt[] = {
+    0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char valid_interrupt[] = {
+    0x02, 0x00, 0x0E, 0x00, 0xF0,
+};
+
+static unsigned char bad_fprint_interrupt_1[] = {
+    0x02, 0x04, 0x0A, 0x00, 0xF0,
+};
+
+static unsigned char bad_fprint_interrupt_2[] = {
+    0x02, 0x00, 0x0A, 0x00, 0xF0,
+};
+
+static unsigned char last_receive_1[] = {
+    0x39, 0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x01, 0xD1, 0x00, 0x20, 0xD1, 0xD1, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0xB8, 0x0B, 0x00, 0x00, 0x02, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+    
+static unsigned char last_receive_2[] = {
+    0x39, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0xD1, 0x00, 0x20, 0xD1, 0xD1, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0xE8, 0x03, 0x00, 0x00, 0x02, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+    
+static unsigned char next_receive_1[] = {
+    0x39, 0xB8, 0x0B, 0x00, 0x00, 0xB8, 0x0B, 0x00, 0x00, 0x01, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0xB8, 0x0B, 0x00, 0x00, 0x02, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
+
+static unsigned char next_receive_2[] = {
+    0x39, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x01, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0xD1, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 
+    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x02, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0xE8, 0x03, 0x00, 0x00, 0x02, 0xD1, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+};
diff -uraN libfprint-0.6.0/libfprint/fp_internal.h libfprint-0.6.0-my/libfprint/fp_internal.h
--- libfprint-0.6.0/libfprint/fp_internal.h	2015-02-03 19:26:43.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/fp_internal.h	2015-07-10 03:43:12.669197535 +0400
@@ -305,6 +305,9 @@
 #ifdef ENABLE_ETES603
 extern struct fp_img_driver etes603_driver;
 #endif
+#ifdef ENABLE_VFS0050
+extern struct fp_img_driver vfs0050_driver;
+#endif
 
 extern libusb_context *fpi_usb_ctx;
 extern GSList *opened_devices;
diff -uraN libfprint-0.6.0/libfprint/fprint-list-udev-rules.c libfprint-0.6.0-my/libfprint/fprint-list-udev-rules.c
--- libfprint-0.6.0/libfprint/fprint-list-udev-rules.c	2015-01-28 19:25:40.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/fprint-list-udev-rules.c	2015-04-16 13:57:00.317980997 +0400
@@ -74,7 +74,7 @@
 	if (num_printed == 0)
 	    printf ("# %s\n", driver->full_name);
 
-	printf ("SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"%04x\", ATTRS{idProduct}==\"%04x\", ATTRS{dev}==\"*\", TEST==\"power/control\", ATTR{power/control}=\"auto\"\n", driver->id_table[i].vendor, driver->id_table[i].product);
+	printf ("SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"%04x\", ATTRS{idProduct}==\"%04x\", ATTRS{dev}==\"*\", TEST==\"power/control\", ATTR{power/control}=\"auto\", MODE=\"0666\"\n", driver->id_table[i].vendor, driver->id_table[i].product);
 	num_printed++;
     }
 
diff -uraN libfprint-0.6.0/libfprint/Makefile.am libfprint-0.6.0-my/libfprint/Makefile.am
--- libfprint-0.6.0/libfprint/Makefile.am	2015-02-03 19:26:43.000000000 +0400
+++ libfprint-0.6.0-my/libfprint/Makefile.am	2015-07-10 03:40:37.821620228 +0400
@@ -21,6 +21,7 @@
 VFS5011_SRC = drivers/vfs5011.c drivers/vfs5011_proto.h
 UPEKTC_IMG_SRC = drivers/upektc_img.c drivers/upektc_img.h
 ETES603_SRC = drivers/etes603.c
+VFS0050_SRC = drivers/vfs0050.c drivers/vfs0050.h drivers/vfs0050_proto.h
 
 EXTRA_DIST = \
 	$(UPEKE2_SRC)		\
@@ -42,6 +43,7 @@
 	$(VFS5011_SRC)		\
 	$(UPEKTC_IMG_SRC)	\
 	$(ETES603_SRC)		\
+	$(VFS0050_SRC)		\
 	drivers/aesx660.c	\
 	drivers/aesx660.h	\
 	drivers/aes3k.c 	\
@@ -182,6 +184,10 @@
 DRIVER_SRC += $(ETES603_SRC)
 endif
 
+if ENABLE_VFS0050
+DRIVER_SRC += $(VFS0050_SRC)
+endif
+
 if REQUIRE_PIXMAN
 OTHER_SRC += pixman.c
 libfprint_la_CFLAGS += $(IMAGING_CFLAGS)
