#!/bin/bash

# Change the current hosted game by editing /usr/share/dom4/current.
# Params:
#   $1  game name
function change {
  if [[ -s /usr/share/dom4/current ]]; then
    game=$(</usr/share/dom4/current)

    if [[ $1 != $game ]]; then
      read -r -n 2 -p "Currently hosting $game. Set up to host $1 instead? [Y/n] " ovr
      if [[ $ovr != Y ]]; then
        exit 0
      fi
      echo
    fi
  fi

  echo "Setting $1 up for hosting."
  echo "$1" > /usr/share/dom4/current
}

# Load a properties file.
# Params:
#   $1  path to properties file
function config {
  if [[ -z $1 ]]; then
    cat <<EOF
Usage:

  sudo dom4 config path/to/mygame.properties
EOF
    exit 1
  fi

  if [[ ! -s $1 ]]; then
    echo "$1 does not exist. Specify a valid properties file."
    exit 1
  fi

  if [[ -s "/usr/share/dom4/config/$1" ]]; then
    read -r -n 2 -p "$1 is already configured. Overwrite? [Y/n] " ovr
    if [[ $ovr != Y ]]; then
      exit 0
    fi
    echo
  fi

  echo "Copying properties file..."

  cp $1 /usr/share/dom4/config

  mapfile=$(grep -oP "mapfile\s+\K.+" $1)
  mapname=$(basename $mapfile .map)
  confdir=$(dirname $1)

  mkdir -p /usr/share/dom4/maps

  USER_HOME=$(getent passwd $SUDO_USER | cut -d: -f6)

  if [[ -s "$mapname.map" ]]; then
    echo "Copying $mapname map files..."

    cp "$mapname".* /usr/share/dom4/maps
  elif [[ -s "$confdir/$mapname".map ]]; then
    echo "Copying $mapname map files from $confdir..."

    cp "$confdir/$mapname".* /usr/share/dom4/maps
  elif [[ -s "$USER_HOME/dominions4/maps/$mapname".map ]]; then
    echo "Copying $mapname map files from $USER_HOME/dominions4/maps..."

    cp "$USER_HOME/dominions4/maps/$mapname".* /usr/share/dom4/maps
  else
    echo "Could not find $mapname.map in $(pwd) or $USER_HOME/dominions4/maps. Please ensure the map file(s) exist and try again."

    exit 1;
  fi

  echo

  change "$(basename $1 .properties)"

  cat <<EOF

Done. Start the service to let players upload their pretenders.

  sudo systemctl start dom4-server.service

Once all pretenders have been uploaded, stop the service and set the game to ready.

  sudo dom4 ready
EOF
}

# Set game start flag in properties file.
# Params:
#   $1  game name (optional; uses whatever's in current if not supplied)
function ready {
  if [[ ! -z $1 ]]; then
    if [[ ! -s "/usr/share/dom4/config/$1.properties" ]]; then
      echo "No game named '$1' found. Use dom4 config $1.properties to upload it."

      exit 1
    fi

    change $1
  fi

  if [[ ! -s /usr/share/dom4/current ]]; then
    echo "No current game found. Use dom4 config to load game configuration."

    exit 1
  fi

  game=$(</usr/share/dom4/current)

  if [[ ! -d "/usr/share/dom4/savedgames/$game" ]]; then
    echo "No pretenders uploaded for $game. Start the service with systemctl to let players upload."

    exit 1
  fi

  if [[ -s "/usr/share/dom4/savedgames/$game/ftherlnd" ]]; then
    echo "$game has already been started. If the service is not running, start it with systemctl."

    exit 1
  fi

  players=$(ls -1 /usr/share/dom4/savedgames/$game/*.2h | wc -l)

  if grep -qE "uploadtime|uploadmaxp" /usr/share/dom4/config/$game.properties ; then
    echo "Upload flag already set for $game. Start the service with systemctl."

    exit 1
  fi

  echo "Setting start flag for $game ($players players)"

  echo "uploadmaxp $players" >> "/usr/share/dom4/config/$game.properties"

  cat <<EOF

Flag set. Start the dom4-server service to begin the game.

  sudo systemctl start dom4-server.service

You may wish to enable it as well to ensure it restarts on boot.
EOF
}

function delete {
  if [[ -z $1 ]]; then
    echo "Specify a game name to delete."
    exit 0
  fi

  if [[ $1 = "default" ]]; then
    echo "Not deleting the default config."
    exit 0
  fi

  game=$(</usr/share/dom4/current)

  if [[ $game = $1 ]]; then
    read -r -n 2 -p "$game is currently being hosted. Really delete? [Y/n] " ovr
    if [[ $ovr != Y ]]; then
      exit 0
    fi

    rm /usr/share/dom4/current
  fi

  # leave the mapfile in case something else is using it
  rm /usr/share/dom4/config/$1.properties
  rm -rf /usr/share/dom4/savedgames/$1
}

if [[ $EUID -ne 0 && ! -z $1 ]]; then
   echo "Use sudo to run this script."

   exit 1
fi

case $1 in
  "config" | "configure")
    config "${@:2}"
    ;;

  "ready")
    ready "${@:2}"
    ;;

  "delete")
    delete "${@:2}"
    ;;

  *)
    cat <<EOF
Get an example template to modify in your editor of choice:

  cp /usr/share/dom4/config/default.properties mygame.properties

Load a properties file into the server and set it as the current hosted game:

  sudo dom4 config path/to/mygame.properties

Set start flag for current game after all pretenders have been uploaded, prior to running service:

  sudo dom4 ready

Set start flag for mygame after pretenders have been uploaded and set it as current hosted game:

  sudo dom4 ready mygame

Delete a game:

  sudo dom4 delete mygame

Service commands:

  sudo systemctl start dom4-server.service
  sudo systemctl stop dom4-server.service
  sudo systemctl restart dom4-server.service
  systemctl status dom4-server.service
EOF
    ;;
esac
