From 59e353b75d51e88ac30ed37307a59b95a50146f8 Mon Sep 17 00:00:00 2001
From: kgv <kgv@opencascade.com>
Date: Sat, 21 Oct 2017 20:46:59 +0300
Subject: [PATCH 1/1] 0029251: Configuration - problem compiling OCCT 7.2 with glibc 2.26

Standard_CLocaleSentry does not include xlocale.h when using glibc anymore.
HAVE_XLOCALE_H has been renamed to OCCT_CLOCALE_POSIX2008 to avoid confusion.

Renamed macros OCC_CHECK_BASE_CLASS -> OCCT_CHECK_BASE_CLASS.
---
 src/Standard/Standard_CLocaleSentry.cxx |   10 +++++-----
 src/Standard/Standard_CLocaleSentry.hxx |   27 ++++++++++++++-------------
 src/Standard/Standard_CString.cxx       |    2 +-
 src/Standard/Standard_Type.hxx          |   16 ++++++++--------
 4 files changed, 28 insertions(+), 27 deletions(-)

diff --git a/src/Standard/Standard_CLocaleSentry.cxx b/src/Standard/Standard_CLocaleSentry.cxx
index ce3212f..8b30c2c 100644
--- a/src/Standard/Standard_CLocaleSentry.cxx
+++ b/src/Standard/Standard_CLocaleSentry.cxx
@@ -30,7 +30,7 @@ namespace
   public:
 
     CLocalePtr()
-    #ifdef HAVE_XLOCALE_H
+    #ifdef OCCT_CLOCALE_POSIX2008
     : myLocale (newlocale (LC_ALL_MASK, "C", NULL))
     #elif defined(_MSC_VER)
     : myLocale (_create_locale (LC_ALL, "C"))
@@ -41,7 +41,7 @@ namespace
 
     ~CLocalePtr()
     {
-    #ifdef HAVE_XLOCALE_H
+    #ifdef OCCT_CLOCALE_POSIX2008
       freelocale (myLocale);
     #elif defined(_MSC_VER)
       _free_locale (myLocale);
@@ -72,7 +72,7 @@ Standard_CLocaleSentry::clocale_t Standard_CLocaleSentry::GetCLocale()
 // purpose  :
 // =======================================================================
 Standard_CLocaleSentry::Standard_CLocaleSentry()
-#ifdef HAVE_XLOCALE_H
+#ifdef OCCT_CLOCALE_POSIX2008
 : myPrevLocale (uselocale (theCLocale.myLocale)) // switch to C locale within this thread only using xlocale API
 #else
 : myPrevLocale (setlocale (LC_ALL, 0))
@@ -81,7 +81,7 @@ Standard_CLocaleSentry::Standard_CLocaleSentry()
 #endif
 #endif
 {
-#if !defined(HAVE_XLOCALE_H)
+#if !defined(OCCT_CLOCALE_POSIX2008)
   const char* aPrevLocale = (const char* )myPrevLocale;
   if (myPrevLocale == NULL
    || (aPrevLocale[0] == 'C' && aPrevLocale[1] == '\0'))
@@ -104,7 +104,7 @@ Standard_CLocaleSentry::Standard_CLocaleSentry()
 // =======================================================================
 Standard_CLocaleSentry::~Standard_CLocaleSentry()
 {
-#if defined(HAVE_XLOCALE_H)
+#if defined(OCCT_CLOCALE_POSIX2008)
   uselocale ((locale_t )myPrevLocale);
 #else
   if (myPrevLocale != NULL)
diff --git a/src/Standard/Standard_CLocaleSentry.hxx b/src/Standard/Standard_CLocaleSentry.hxx
index a94ade7..3b3beba 100755
--- a/src/Standard/Standard_CLocaleSentry.hxx
+++ b/src/Standard/Standard_CLocaleSentry.hxx
@@ -20,24 +20,25 @@
 
 #include <locale.h>
 
-#ifndef HAVE_XLOCALE_H
-  //! "xlocale.h" available in Mac OS X and glibc (Linux) for a long time as an extension
-  //! and become part of POSIX since '2008.
-  //! Notice that this is impossible to test (_POSIX_C_SOURCE >= 200809L)
-  //! since POSIX didn't declared such identifier.
+#if defined(__APPLE__)
+  #include <xlocale.h>
+#endif
+
+#ifndef OCCT_CLOCALE_POSIX2008
+  //! @def OCCT_CLOCALE_POSIX2008
+  //!
+  //! POSIX.1-2008 extends C locale API by providing methods like newlocale/freelocale/uselocale.
+  //! Presence of this extension cannot be checked in straightforward way (like (_POSIX_C_SOURCE >= 200809L))
+  //! due to missing such declarations in standard.
+  //! On macOS new functions are declared within "xlocale.h" header (the same is for glibc, but this header has been removed since glibc 2.26).
   #if defined(__APPLE__)
-    #define HAVE_XLOCALE_H
+    #define OCCT_CLOCALE_POSIX2008
   #endif
 
   //! We check _GNU_SOURCE for glibc extensions here and it is always defined by g++ compiler.
   #if defined(_GNU_SOURCE) && !defined(__ANDROID__)
-    #define HAVE_XLOCALE_H
+    #define OCCT_CLOCALE_POSIX2008
   #endif
-#endif // ifndef HAVE_LOCALE_H
-
-#if defined(HAVE_XLOCALE_H) && !(defined(__GLIBC__) && (__GLIBC__ == 2 && __GLIBC_MINOR__ <= 24))
-  // xlocale.h is actually a non-standard header file; glibc 2.26 has removed it altogether (all definition comes from locale.h)
-  #include <xlocale.h>
 #endif
 
 #if !defined(__ANDROID__)
@@ -64,7 +65,7 @@ public:
 
 public:
 
-#ifdef HAVE_XLOCALE_H
+#ifdef OCCT_CLOCALE_POSIX2008
   typedef  locale_t clocale_t;
 #elif defined(_MSC_VER)
   typedef _locale_t clocale_t;
diff --git a/src/Standard/Standard_CString.cxx b/src/Standard/Standard_CString.cxx
index dc0a222..d10974f 100755
--- a/src/Standard/Standard_CString.cxx
+++ b/src/Standard/Standard_CString.cxx
@@ -76,7 +76,7 @@ Standard_Integer HashCodes (const Standard_CString Value,
   // and newlocale/uselocale/freelocale to switch locale within current thread only.
   // So we switch to C locale temporarily
   #define SAVE_TL() Standard_CLocaleSentry aLocaleSentry;
-  #ifndef HAVE_XLOCALE_H
+  #ifndef OCCT_CLOCALE_POSIX2008
     // glibc version for android platform use locale-independent implementation of
     // strtod, strtol, strtoll functions. For other system with locale-depended
     // implementations problems may appear if "C" locale is not set explicitly.
-- 
1.7.2.5

